{"ast":null,"code":"import _regeneratorRuntime from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _typeof from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _asyncToGenerator from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { orderApi } from '@/api';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'Orders',\n  data: function data() {\n    return {\n      orders: [],\n      loading: false,\n      error: null,\n      // 分页相关\n      currentPage: 1,\n      pageSize: 10\n    };\n  },\n  computed: {\n    totalItems: function totalItems() {\n      return this.orders.length;\n    },\n    paginatedOrders: function paginatedOrders() {\n      var startIndex = (this.currentPage - 1) * this.pageSize;\n      var endIndex = startIndex + this.pageSize;\n      return this.orders.slice(startIndex, endIndex);\n    }\n  },\n  created: function created() {\n    var _this = this;\n    console.log('Orders组件已创建，准备获取数据');\n\n    // 添加这个延迟调用以避免可能的ResizeObserver问题\n    setTimeout(function () {\n      _this.fetchOrders();\n    }, 0);\n  },\n  methods: {\n    fetchOrders: function fetchOrders() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, validOrders;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this2.loading = true;\n              _this2.error = null;\n              console.log('开始获取订单数据');\n              _context.prev = 4;\n              _context.next = 7;\n              return orderApi.getAll();\n            case 7:\n              response = _context.sent;\n              // 打印原始响应\n              console.log('获取到订单数据(原始):', response);\n              console.log('获取到订单数据:', response.data);\n              console.log('订单数据类型:', _typeof(response.data), Array.isArray(response.data));\n\n              // 确保数据是数组\n              if (Array.isArray(response.data)) {\n                // 检查每个订单对象的字段\n                validOrders = response.data.filter(function (order) {\n                  var isValid = order && _typeof(order) === 'object' && 'id' in order && 'robot_id' in order && 'station_id' in order && 'start_time' in order && 'status' in order;\n\n                  // 处理可能的NaN或undefined值\n                  if (isValid) {\n                    // 确保amount字段存在且为数字\n                    if (!('amount' in order) || order.amount === null || isNaN(order.amount)) {\n                      order.amount = '-';\n                    }\n\n                    // 确保end_time字段存在\n                    if (!('end_time' in order) || order.end_time === null) {\n                      order.end_time = '-';\n                    }\n                  } else {\n                    console.warn('过滤掉无效的订单数据:', order);\n                  }\n                  return isValid;\n                });\n                console.log('有效的订单数据:', validOrders);\n                _this2.orders = validOrders;\n                // 重置为第一页\n                _this2.currentPage = 1;\n                console.log('成功设置订单数据，数量:', _this2.orders.length);\n              } else {\n                console.error('API返回的订单数据不是数组:', response.data);\n                _this2.orders = []; // 设置为空数组\n                _this2.error = '订单数据格式错误，请联系管理员';\n                ElMessage.error('订单数据格式错误');\n              }\n              _context.next = 20;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              console.error('API调用出错:', _context.t0);\n              _this2.orders = []; // 确保错误时也设置为空数组\n              _this2.error = \"API\\u8C03\\u7528\\u51FA\\u9519: \".concat(_context.t0.message || '未知错误');\n              ElMessage.error('获取订单数据失败');\n            case 20:\n              _context.next = 28;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t1 = _context[\"catch\"](0);\n              console.error('获取订单列表失败:', _context.t1);\n              _this2.orders = []; // 确保错误时也设置为空数组\n              _this2.error = \"\\u83B7\\u53D6\\u6570\\u636E\\u5931\\u8D25: \".concat(_context.t1.message || '未知错误');\n              ElMessage.error('获取订单列表失败');\n            case 28:\n              _context.prev = 28;\n              _this2.loading = false;\n              return _context.finish(28);\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 22, 28, 31], [4, 14]]);\n      }))();\n    },\n    // 分页相关方法\n    handleCurrentChange: function handleCurrentChange(page) {\n      this.currentPage = page;\n      console.log(\"\\u5F53\\u524D\\u9875: \".concat(this.currentPage));\n    },\n    getStatusType: function getStatusType(status) {\n      var types = {\n        'charging': 'primary',\n        'completed': 'success',\n        'failed': 'danger'\n      };\n      return types[status] || 'info';\n    },\n    getStatusText: function getStatusText(status) {\n      var texts = {\n        'charging': '充电中',\n        'completed': '已完成',\n        'failed': '失败'\n      };\n      return texts[status] || status;\n    }\n  }\n};","map":{"version":3,"names":["orderApi","ElMessage","name","data","orders","loading","error","currentPage","pageSize","computed","totalItems","length","paginatedOrders","startIndex","endIndex","slice","created","_this","console","log","setTimeout","fetchOrders","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","validOrders","wrap","_callee$","_context","prev","next","getAll","sent","_typeof","Array","isArray","filter","order","isValid","amount","isNaN","end_time","warn","t0","concat","message","t1","finish","stop","handleCurrentChange","page","getStatusType","status","types","getStatusText","texts"],"sources":["D:\\software_data\\Project\\Y0527\\CODE\\frontend\\src\\views\\Orders.vue"],"sourcesContent":["<template>\r\n  <div class=\"orders-container\">\r\n    <h2>充电订单管理</h2>\r\n    <el-card class=\"box-card\">\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        <el-alert\r\n          title=\"加载数据出错\"\r\n          type=\"error\"\r\n          :description=\"error\"\r\n          show-icon\r\n        />\r\n      </div>\r\n      <el-table \r\n        v-if=\"orders && orders.length > 0\" \r\n        :data=\"paginatedOrders\" \r\n        style=\"width: 100%\" \r\n        v-loading=\"loading\">\r\n        <el-table-column prop=\"id\" label=\"订单ID\" width=\"180\" />\r\n        <el-table-column prop=\"robot_id\" label=\"机器人ID\" width=\"180\" />\r\n        <el-table-column prop=\"station_id\" label=\"充电站ID\" width=\"180\" />\r\n        <el-table-column prop=\"start_time\" label=\"开始时间\" />\r\n        <el-table-column prop=\"end_time\" label=\"结束时间\" />\r\n        <el-table-column prop=\"status\" label=\"状态\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ getStatusText(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"amount\" label=\"充电量\" />\r\n      </el-table>\r\n      <div v-else-if=\"!loading\" class=\"no-data\">\r\n        <el-empty description=\"暂无数据\" />\r\n      </div>\r\n      \r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination-container\" v-if=\"orders && orders.length > 0\">\r\n        <el-pagination\r\n          v-model:current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          layout=\"total, prev, pager, next, jumper\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { orderApi } from '@/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'Orders',\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      loading: false,\r\n      error: null,\r\n      // 分页相关\r\n      currentPage: 1,\r\n      pageSize: 10\r\n    }\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.orders.length\r\n    },\r\n    paginatedOrders() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize\r\n      const endIndex = startIndex + this.pageSize\r\n      return this.orders.slice(startIndex, endIndex)\r\n    }\r\n  },\r\n  created() {\r\n    console.log('Orders组件已创建，准备获取数据')\r\n    \r\n    // 添加这个延迟调用以避免可能的ResizeObserver问题\r\n    setTimeout(() => {\r\n      this.fetchOrders()\r\n    }, 0)\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        this.loading = true\r\n        this.error = null\r\n        console.log('开始获取订单数据')\r\n        \r\n        try {\r\n          const response = await orderApi.getAll()\r\n          // 打印原始响应\r\n          console.log('获取到订单数据(原始):', response)\r\n          console.log('获取到订单数据:', response.data)\r\n          console.log('订单数据类型:', typeof response.data, Array.isArray(response.data))\r\n          \r\n          // 确保数据是数组\r\n          if (Array.isArray(response.data)) {\r\n            // 检查每个订单对象的字段\r\n            const validOrders = response.data.filter(order => {\r\n              const isValid = order && \r\n                            typeof order === 'object' && \r\n                            'id' in order && \r\n                            'robot_id' in order && \r\n                            'station_id' in order && \r\n                            'start_time' in order && \r\n                            'status' in order;\r\n              \r\n              // 处理可能的NaN或undefined值\r\n              if (isValid) {\r\n                // 确保amount字段存在且为数字\r\n                if (!('amount' in order) || order.amount === null || isNaN(order.amount)) {\r\n                  order.amount = '-';\r\n                }\r\n                \r\n                // 确保end_time字段存在\r\n                if (!('end_time' in order) || order.end_time === null) {\r\n                  order.end_time = '-';\r\n                }\r\n              } else {\r\n                console.warn('过滤掉无效的订单数据:', order);\r\n              }\r\n              return isValid;\r\n            });\r\n            \r\n            console.log('有效的订单数据:', validOrders);\r\n            this.orders = validOrders;\r\n            // 重置为第一页\r\n            this.currentPage = 1;\r\n            console.log('成功设置订单数据，数量:', this.orders.length)\r\n          } else {\r\n            console.error('API返回的订单数据不是数组:', response.data)\r\n            this.orders = [] // 设置为空数组\r\n            this.error = '订单数据格式错误，请联系管理员'\r\n            ElMessage.error('订单数据格式错误')\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用出错:', apiError)\r\n          this.orders = [] // 确保错误时也设置为空数组\r\n          this.error = `API调用出错: ${apiError.message || '未知错误'}`\r\n          ElMessage.error('获取订单数据失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取订单列表失败:', error)\r\n        this.orders = [] // 确保错误时也设置为空数组\r\n        this.error = `获取数据失败: ${error.message || '未知错误'}`\r\n        ElMessage.error('获取订单列表失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 分页相关方法\r\n    handleCurrentChange(page) {\r\n      this.currentPage = page\r\n      console.log(`当前页: ${this.currentPage}`)\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        'charging': 'primary',\r\n        'completed': 'success',\r\n        'failed': 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getStatusText(status) {\r\n      const texts = {\r\n        'charging': '充电中',\r\n        'completed': '已完成',\r\n        'failed': '失败'\r\n      }\r\n      return texts[status] || status\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.orders-container {\r\n  padding: 20px;\r\n}\r\n.error-message {\r\n  margin-bottom: 20px;\r\n}\r\n.no-data {\r\n  padding: 20px 0;\r\n}\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}