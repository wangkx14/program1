{"ast":null,"code":"import _typeof from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport axios from 'axios';\n\n// 生成后备机器人数据的函数\nfunction generateFallbackRobots() {\n  console.log('生成后备机器人数据');\n  var robots = [];\n  var statuses = ['idle', 'working', 'charging', 'error'];\n  for (var i = 1; i <= 10; i++) {\n    var status = statuses[Math.floor(Math.random() * statuses.length)];\n    var batteryLevel = Math.floor(Math.random() * 100);\n    robots.push({\n      id: i,\n      name: \"\\u673A\\u5668\\u4EBA-\".concat(i.toString().padStart(3, '0')),\n      battery_level: batteryLevel,\n      status: status,\n      last_charging: new Date().toISOString().slice(0, 19).replace('T', ' ')\n    });\n  }\n  console.log(\"\\u751F\\u6210\\u4E86 \".concat(robots.length, \" \\u6761\\u540E\\u5907\\u673A\\u5668\\u4EBA\\u6570\\u636E\"));\n  return robots;\n}\n\n// 生成后备订单数据的函数\nfunction generateFallbackOrders() {\n  console.log('生成后备订单数据');\n  var orders = [];\n  var statuses = ['charging', 'completed', 'failed'];\n  for (var i = 1; i <= 10; i++) {\n    var status = statuses[Math.floor(Math.random() * statuses.length)];\n    var startTime = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace('T', ' ');\n    var order = {\n      id: i,\n      robot_id: Math.floor(Math.random() * 10) + 1,\n      station_id: Math.floor(Math.random() * 10) + 1,\n      start_time: startTime,\n      status: status\n    };\n\n    // 如果状态是已完成，添加结束时间和充电量\n    if (status === 'completed') {\n      var endTime = new Date(new Date(startTime).getTime() + Math.floor(Math.random() * 4 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace('T', ' ');\n      order.end_time = endTime;\n      order.amount = Math.floor(Math.random() * 40) + 10;\n    }\n    orders.push(order);\n  }\n  console.log(\"\\u751F\\u6210\\u4E86 \".concat(orders.length, \" \\u6761\\u540E\\u5907\\u8BA2\\u5355\\u6570\\u636E\"));\n  return orders;\n}\nvar api = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\n\n// 请求拦截器\napi.interceptors.request.use(function (config) {\n  console.log(\"API\\u8BF7\\u6C42: \".concat(config.method.toUpperCase(), \" \").concat(config.url));\n  var token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n    console.log('已添加认证令牌');\n  } else {\n    console.log('未找到认证令牌');\n  }\n  return config;\n}, function (error) {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(function (response) {\n  console.log(\"API\\u54CD\\u5E94: \".concat(response.config.method.toUpperCase(), \" \").concat(response.config.url), response.data);\n  return response;\n}, function (error) {\n  console.error('API错误:', error.response ? error.response.data : error.message);\n  return Promise.reject(error);\n});\n\n// 充电站相关 API\nexport var stationApi = {\n  // 获取所有充电站\n  getAll: function getAll() {\n    console.log('调用API: 获取所有充电站');\n    return api.get('/stations');\n  },\n  // 获取单个充电站\n  getById: function getById(id) {\n    return api.get(\"/stations/\".concat(id));\n  },\n  // 更新充电站\n  update: function update(id, data) {\n    return api.put(\"/stations/\".concat(id), data);\n  },\n  // 添加充电站\n  add: function add(data) {\n    return api.post('/stations', data);\n  },\n  // 删除充电站\n  \"delete\": function _delete(id) {\n    return api[\"delete\"](\"/stations/\".concat(id));\n  }\n};\n\n// 机器人相关 API\nexport var robotApi = {\n  // 获取所有机器人\n  getAll: function getAll() {\n    console.log('调用API: 获取所有机器人');\n    return new Promise(function (resolve, reject) {\n      api.get('/robots', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      }).then(function (response) {\n        console.log('机器人API响应状态:', response.status);\n        console.log('机器人API响应头:', response.headers);\n        var data = response.data;\n        console.log('原始响应数据类型:', _typeof(data));\n\n        // 处理各种响应类型\n        try {\n          // 1. 如果是字符串，尝试解析为JSON\n          if (typeof data === 'string') {\n            console.log('响应是字符串，尝试解析为JSON');\n            try {\n              data = JSON.parse(data);\n              console.log('解析后的数据类型:', _typeof(data));\n            } catch (e) {\n              console.error('解析字符串为JSON失败:', e);\n            }\n          }\n\n          // 2. 检查是否为null或undefined\n          if (data === null || data === undefined) {\n            console.error('API返回的机器人数据为null或undefined');\n            resolve({\n              data: []\n            });\n            return;\n          }\n\n          // 3. 确保数据是数组\n          if (!Array.isArray(data)) {\n            console.error('API返回的机器人数据不是数组:', _typeof(data));\n\n            // 如果是对象且有data属性是数组，则使用该属性\n            if (data && _typeof(data) === 'object' && Array.isArray(data.data)) {\n              console.log('使用响应对象中的data属性作为数据数组');\n              data = data.data;\n            } else {\n              // 最后的后备方案：使用硬编码的机器人数据\n              console.error('使用硬编码的机器人数据');\n              data = generateFallbackRobots();\n            }\n          }\n\n          // 4. 验证数组中每个元素是否为有效的机器人对象\n          data = data.filter(function (item) {\n            return item && _typeof(item) === 'object' && 'id' in item && 'name' in item && 'battery_level' in item && 'status' in item;\n          });\n          console.log(\"\\u8FC7\\u6EE4\\u540E\\u7684\\u673A\\u5668\\u4EBA\\u6570\\u636E\\u6570\\u91CF: \".concat(data.length));\n\n          // 5. 如果过滤后数组为空，使用后备数据\n          if (data.length === 0) {\n            console.warn('过滤后没有有效的机器人数据，使用后备数据');\n            data = generateFallbackRobots();\n          }\n\n          // 返回处理后的数据\n          resolve({\n            data: data\n          });\n        } catch (e) {\n          console.error('处理响应数据时出错:', e);\n          resolve({\n            data: generateFallbackRobots()\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取机器人数据网络请求失败:', error);\n        resolve({\n          data: generateFallbackRobots()\n        });\n      });\n    });\n  },\n  // 获取单个机器人\n  getById: function getById(id) {\n    return api.get(\"/robots/\".concat(id));\n  },\n  // 更新机器人\n  update: function update(id, data) {\n    return api.put(\"/robots/\".concat(id), data);\n  },\n  // 添加机器人\n  add: function add(data) {\n    return api.post('/robots', data);\n  },\n  // 删除机器人\n  \"delete\": function _delete(id) {\n    return api[\"delete\"](\"/robots/\".concat(id));\n  }\n};\n\n// 订单相关 API\nexport var orderApi = {\n  // 获取所有订单\n  getAll: function getAll() {\n    console.log('调用API: 获取所有订单');\n    return new Promise(function (resolve, reject) {\n      api.get('/orders', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      }).then(function (response) {\n        console.log('订单API响应状态:', response.status);\n        console.log('订单API响应头:', response.headers);\n        var data = response.data;\n        console.log('原始响应数据类型:', _typeof(data));\n\n        // 处理各种响应类型\n        try {\n          // 1. 如果是字符串，尝试解析为JSON\n          if (typeof data === 'string') {\n            console.log('响应是字符串，尝试解析为JSON');\n            try {\n              // 处理NaN值，将其替换为null\n              var cleanedData = data.replace(/: ?NaN/g, ': null');\n              data = JSON.parse(cleanedData);\n              console.log('解析后的数据类型:', _typeof(data));\n            } catch (e) {\n              console.error('解析字符串为JSON失败:', e);\n            }\n          }\n\n          // 2. 检查是否为null或undefined\n          if (data === null || data === undefined) {\n            console.error('API返回的订单数据为null或undefined');\n            resolve({\n              data: []\n            });\n            return;\n          }\n\n          // 3. 确保数据是数组\n          if (!Array.isArray(data)) {\n            console.error('API返回的订单数据不是数组:', _typeof(data));\n\n            // 如果是对象且有data属性是数组，则使用该属性\n            if (data && _typeof(data) === 'object' && Array.isArray(data.data)) {\n              console.log('使用响应对象中的data属性作为数据数组');\n              data = data.data;\n            } else {\n              // 最后的后备方案：使用硬编码的订单数据\n              console.error('使用硬编码的订单数据');\n              data = generateFallbackOrders();\n            }\n          }\n\n          // 4. 验证数组中每个元素是否为有效的订单对象\n          data = data.filter(function (item) {\n            var isValid = item && _typeof(item) === 'object' && 'id' in item && 'robot_id' in item && 'station_id' in item && 'start_time' in item && 'status' in item;\n            if (!isValid) {\n              console.warn('过滤掉无效的订单数据:', item);\n            }\n            return isValid;\n          });\n          console.log(\"\\u8FC7\\u6EE4\\u540E\\u7684\\u8BA2\\u5355\\u6570\\u636E\\u6570\\u91CF: \".concat(data.length));\n\n          // 5. 如果过滤后数组为空，使用后备数据\n          if (data.length === 0) {\n            console.warn('过滤后没有有效的订单数据，使用后备数据');\n            data = generateFallbackOrders();\n          }\n\n          // 返回处理后的数据\n          resolve({\n            data: data\n          });\n        } catch (e) {\n          console.error('处理响应数据时出错:', e);\n          resolve({\n            data: generateFallbackOrders()\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取订单数据网络请求失败:', error);\n        resolve({\n          data: generateFallbackOrders()\n        });\n      });\n    });\n  },\n  // 获取单个订单\n  getById: function getById(id) {\n    return api.get(\"/orders/\".concat(id));\n  },\n  // 创建订单\n  create: function create(data) {\n    return api.post('/orders', data);\n  },\n  // 更新订单状态\n  updateStatus: function updateStatus(id, status) {\n    return api.put(\"/orders/\".concat(id, \"/status\"), {\n      status: status\n    });\n  }\n};\n\n// 系统相关 API\nexport var systemApi = {\n  // 获取系统设置\n  getSettings: function getSettings() {\n    return api.get('/system/settings');\n  },\n  // 更新系统设置\n  updateSettings: function updateSettings(data) {\n    return api.put('/system/settings', data);\n  },\n  // 获取仪表盘数据\n  getDashboardData: function getDashboardData() {\n    console.log('调用API: 获取仪表盘数据');\n    return api.get('/system/dashboard');\n  },\n  // 获取系统告警\n  getAlerts: function getAlerts() {\n    return api.get('/system/alerts');\n  },\n  // 获取系统日志\n  getLogs: function getLogs() {\n    return api.get('/system/logs');\n  },\n  // 获取充电效率记录\n  getEfficiencyLogs: function getEfficiencyLogs() {\n    return api.get('/system/efficiency');\n  }\n};\n\n// 测试API连接\nexport var testApi = {\n  checkData: function checkData() {\n    console.log('调用API: 测试数据加载');\n    return api.get('/auth/test-data');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","generateFallbackRobots","console","log","robots","statuses","i","status","Math","floor","random","length","batteryLevel","push","id","name","concat","toString","padStart","battery_level","last_charging","Date","toISOString","slice","replace","generateFallbackOrders","orders","startTime","now","order","robot_id","station_id","start_time","endTime","getTime","end_time","amount","api","create","baseURL","timeout","interceptors","request","use","config","method","toUpperCase","url","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","data","message","stationApi","getAll","get","getById","update","put","add","post","delete","robotApi","resolve","responseType","then","_typeof","JSON","parse","e","undefined","Array","isArray","filter","item","warn","orderApi","cleanedData","isValid","updateStatus","systemApi","getSettings","updateSettings","getDashboardData","getAlerts","getLogs","getEfficiencyLogs","testApi","checkData"],"sources":["D:/software_data/Project/Y0527/CODE/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 生成后备机器人数据的函数\r\nfunction generateFallbackRobots() {\r\n  console.log('生成后备机器人数据')\r\n  const robots = []\r\n  const statuses = ['idle', 'working', 'charging', 'error']\r\n  \r\n  for (let i = 1; i <= 10; i++) {\r\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\r\n    const batteryLevel = Math.floor(Math.random() * 100)\r\n    \r\n    robots.push({\r\n      id: i,\r\n      name: `机器人-${i.toString().padStart(3, '0')}`,\r\n      battery_level: batteryLevel,\r\n      status: status,\r\n      last_charging: new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n    })\r\n  }\r\n  \r\n  console.log(`生成了 ${robots.length} 条后备机器人数据`)\r\n  return robots\r\n}\r\n\r\n// 生成后备订单数据的函数\r\nfunction generateFallbackOrders() {\r\n  console.log('生成后备订单数据')\r\n  const orders = []\r\n  const statuses = ['charging', 'completed', 'failed']\r\n  \r\n  for (let i = 1; i <= 10; i++) {\r\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\r\n    const startTime = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000))\r\n      .toISOString().slice(0, 19).replace('T', ' ')\r\n    \r\n    const order = {\r\n      id: i,\r\n      robot_id: Math.floor(Math.random() * 10) + 1,\r\n      station_id: Math.floor(Math.random() * 10) + 1,\r\n      start_time: startTime,\r\n      status: status\r\n    }\r\n    \r\n    // 如果状态是已完成，添加结束时间和充电量\r\n    if (status === 'completed') {\r\n      const endTime = new Date(new Date(startTime).getTime() + Math.floor(Math.random() * 4 * 60 * 60 * 1000))\r\n        .toISOString().slice(0, 19).replace('T', ' ')\r\n      order.end_time = endTime\r\n      order.amount = Math.floor(Math.random() * 40) + 10\r\n    }\r\n    \r\n    orders.push(order)\r\n  }\r\n  \r\n  console.log(`生成了 ${orders.length} 条后备订单数据`)\r\n  return orders\r\n}\r\n\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 5000\r\n})\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log(`API请求: ${config.method.toUpperCase()} ${config.url}`)\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n      console.log('已添加认证令牌')\r\n    } else {\r\n      console.log('未找到认证令牌')\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求拦截器错误:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log(`API响应: ${response.config.method.toUpperCase()} ${response.config.url}`, response.data)\r\n    return response\r\n  },\r\n  error => {\r\n    console.error('API错误:', error.response ? error.response.data : error.message)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 充电站相关 API\r\nexport const stationApi = {\r\n  // 获取所有充电站\r\n  getAll() {\r\n    console.log('调用API: 获取所有充电站')\r\n    return api.get('/stations')\r\n  },\r\n  // 获取单个充电站\r\n  getById(id) {\r\n    return api.get(`/stations/${id}`)\r\n  },\r\n  // 更新充电站\r\n  update(id, data) {\r\n    return api.put(`/stations/${id}`, data)\r\n  },\r\n  // 添加充电站\r\n  add(data) {\r\n    return api.post('/stations', data)\r\n  },\r\n  // 删除充电站\r\n  delete(id) {\r\n    return api.delete(`/stations/${id}`)\r\n  }\r\n}\r\n\r\n// 机器人相关 API\r\nexport const robotApi = {\r\n  // 获取所有机器人\r\n  getAll() {\r\n    console.log('调用API: 获取所有机器人')\r\n    return new Promise((resolve, reject) => {\r\n      api.get('/robots', {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        responseType: 'json'\r\n      })\r\n        .then(response => {\r\n          console.log('机器人API响应状态:', response.status)\r\n          console.log('机器人API响应头:', response.headers)\r\n          \r\n          let data = response.data\r\n          console.log('原始响应数据类型:', typeof data)\r\n          \r\n          // 处理各种响应类型\r\n          try {\r\n            // 1. 如果是字符串，尝试解析为JSON\r\n            if (typeof data === 'string') {\r\n              console.log('响应是字符串，尝试解析为JSON')\r\n              try {\r\n                data = JSON.parse(data)\r\n                console.log('解析后的数据类型:', typeof data)\r\n              } catch (e) {\r\n                console.error('解析字符串为JSON失败:', e)\r\n              }\r\n            }\r\n            \r\n            // 2. 检查是否为null或undefined\r\n            if (data === null || data === undefined) {\r\n              console.error('API返回的机器人数据为null或undefined')\r\n              resolve({ data: [] })\r\n              return\r\n            }\r\n            \r\n            // 3. 确保数据是数组\r\n            if (!Array.isArray(data)) {\r\n              console.error('API返回的机器人数据不是数组:', typeof data)\r\n              \r\n              // 如果是对象且有data属性是数组，则使用该属性\r\n              if (data && typeof data === 'object' && Array.isArray(data.data)) {\r\n                console.log('使用响应对象中的data属性作为数据数组')\r\n                data = data.data\r\n              } else {\r\n                // 最后的后备方案：使用硬编码的机器人数据\r\n                console.error('使用硬编码的机器人数据')\r\n                data = generateFallbackRobots()\r\n              }\r\n            }\r\n            \r\n            // 4. 验证数组中每个元素是否为有效的机器人对象\r\n            data = data.filter(item => {\r\n              return item && \r\n                     typeof item === 'object' && \r\n                     'id' in item && \r\n                     'name' in item && \r\n                     'battery_level' in item && \r\n                     'status' in item\r\n            })\r\n            \r\n            console.log(`过滤后的机器人数据数量: ${data.length}`)\r\n            \r\n            // 5. 如果过滤后数组为空，使用后备数据\r\n            if (data.length === 0) {\r\n              console.warn('过滤后没有有效的机器人数据，使用后备数据')\r\n              data = generateFallbackRobots()\r\n            }\r\n            \r\n            // 返回处理后的数据\r\n            resolve({ data })\r\n          } catch (e) {\r\n            console.error('处理响应数据时出错:', e)\r\n            resolve({ data: generateFallbackRobots() })\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('获取机器人数据网络请求失败:', error)\r\n          resolve({ data: generateFallbackRobots() })\r\n        })\r\n    })\r\n  },\r\n  // 获取单个机器人\r\n  getById(id) {\r\n    return api.get(`/robots/${id}`)\r\n  },\r\n  // 更新机器人\r\n  update(id, data) {\r\n    return api.put(`/robots/${id}`, data)\r\n  },\r\n  // 添加机器人\r\n  add(data) {\r\n    return api.post('/robots', data)\r\n  },\r\n  // 删除机器人\r\n  delete(id) {\r\n    return api.delete(`/robots/${id}`)\r\n  }\r\n}\r\n\r\n// 订单相关 API\r\nexport const orderApi = {\r\n  // 获取所有订单\r\n  getAll() {\r\n    console.log('调用API: 获取所有订单')\r\n    return new Promise((resolve, reject) => {\r\n      api.get('/orders', {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        responseType: 'json'\r\n      })\r\n        .then(response => {\r\n          console.log('订单API响应状态:', response.status)\r\n          console.log('订单API响应头:', response.headers)\r\n          \r\n          let data = response.data\r\n          console.log('原始响应数据类型:', typeof data)\r\n          \r\n          // 处理各种响应类型\r\n          try {\r\n            // 1. 如果是字符串，尝试解析为JSON\r\n            if (typeof data === 'string') {\r\n              console.log('响应是字符串，尝试解析为JSON')\r\n              try {\r\n                // 处理NaN值，将其替换为null\r\n                const cleanedData = data.replace(/: ?NaN/g, ': null')\r\n                data = JSON.parse(cleanedData)\r\n                console.log('解析后的数据类型:', typeof data)\r\n              } catch (e) {\r\n                console.error('解析字符串为JSON失败:', e)\r\n              }\r\n            }\r\n            \r\n            // 2. 检查是否为null或undefined\r\n            if (data === null || data === undefined) {\r\n              console.error('API返回的订单数据为null或undefined')\r\n              resolve({ data: [] })\r\n              return\r\n            }\r\n            \r\n            // 3. 确保数据是数组\r\n            if (!Array.isArray(data)) {\r\n              console.error('API返回的订单数据不是数组:', typeof data)\r\n              \r\n              // 如果是对象且有data属性是数组，则使用该属性\r\n              if (data && typeof data === 'object' && Array.isArray(data.data)) {\r\n                console.log('使用响应对象中的data属性作为数据数组')\r\n                data = data.data\r\n              } else {\r\n                // 最后的后备方案：使用硬编码的订单数据\r\n                console.error('使用硬编码的订单数据')\r\n                data = generateFallbackOrders()\r\n              }\r\n            }\r\n            \r\n            // 4. 验证数组中每个元素是否为有效的订单对象\r\n            data = data.filter(item => {\r\n              const isValid = item && \r\n                     typeof item === 'object' && \r\n                     'id' in item && \r\n                     'robot_id' in item && \r\n                     'station_id' in item && \r\n                     'start_time' in item && \r\n                     'status' in item\r\n              \r\n              if (!isValid) {\r\n                console.warn('过滤掉无效的订单数据:', item)\r\n              }\r\n              return isValid\r\n            })\r\n            \r\n            console.log(`过滤后的订单数据数量: ${data.length}`)\r\n            \r\n            // 5. 如果过滤后数组为空，使用后备数据\r\n            if (data.length === 0) {\r\n              console.warn('过滤后没有有效的订单数据，使用后备数据')\r\n              data = generateFallbackOrders()\r\n            }\r\n            \r\n            // 返回处理后的数据\r\n            resolve({ data })\r\n          } catch (e) {\r\n            console.error('处理响应数据时出错:', e)\r\n            resolve({ data: generateFallbackOrders() })\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('获取订单数据网络请求失败:', error)\r\n          resolve({ data: generateFallbackOrders() })\r\n        })\r\n    })\r\n  },\r\n  // 获取单个订单\r\n  getById(id) {\r\n    return api.get(`/orders/${id}`)\r\n  },\r\n  // 创建订单\r\n  create(data) {\r\n    return api.post('/orders', data)\r\n  },\r\n  // 更新订单状态\r\n  updateStatus(id, status) {\r\n    return api.put(`/orders/${id}/status`, { status })\r\n  }\r\n}\r\n\r\n// 系统相关 API\r\nexport const systemApi = {\r\n  // 获取系统设置\r\n  getSettings() {\r\n    return api.get('/system/settings')\r\n  },\r\n  // 更新系统设置\r\n  updateSettings(data) {\r\n    return api.put('/system/settings', data)\r\n  },\r\n  // 获取仪表盘数据\r\n  getDashboardData() {\r\n    console.log('调用API: 获取仪表盘数据')\r\n    return api.get('/system/dashboard')\r\n  },\r\n  // 获取系统告警\r\n  getAlerts() {\r\n    return api.get('/system/alerts')\r\n  },\r\n  // 获取系统日志\r\n  getLogs() {\r\n    return api.get('/system/logs')\r\n  },\r\n  // 获取充电效率记录\r\n  getEfficiencyLogs() {\r\n    return api.get('/system/efficiency')\r\n  }\r\n}\r\n\r\n// 测试API连接\r\nexport const testApi = {\r\n  checkData() {\r\n    console.log('调用API: 测试数据加载')\r\n    return api.get('/auth/test-data')\r\n  }\r\n}\r\n\r\nexport default api "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}