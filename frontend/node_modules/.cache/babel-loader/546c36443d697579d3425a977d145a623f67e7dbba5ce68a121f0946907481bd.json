{"ast":null,"code":"import _createClass from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"D:\\\\software_data\\\\Project\\\\Y0527\\\\CODE_BAK\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"D:\\\\software_data\\\\Project\\\\Y0527\\\\CODE_BAK\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"D:\\\\software_data\\\\Project\\\\Y0527\\\\CODE_BAK\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"D:\\\\software_data\\\\Project\\\\Y0527\\\\CODE_BAK\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { createApp } from 'vue';\nimport ElementPlus from 'element-plus';\nimport 'element-plus/dist/index.css';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport { applyErrorSuppressions } from './utils/errorHandler';\n\n// 应用错误抑制措施（会自动只在开发环境中应用）\napplyErrorSuppressions();\n\n// 添加全局错误处理，特别处理ResizeObserver错误\nvar originalConsoleError = console.error;\nconsole.error = function (message) {\n  // 过滤掉ResizeObserver的错误\n  if (typeof message === 'string' && (message.includes('ResizeObserver') || message.includes('ResizeObserver loop limit exceeded') || message.includes('ResizeObserver loop completed with undelivered notifications'))) {\n    // 忽略这些错误\n    return;\n  }\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  originalConsoleError.apply(console, [message].concat(args));\n};\n\n// 强制覆盖原生ResizeObserver，防止其循环错误\ntry {\n  // 保存原始的ResizeObserver\n  var OriginalResizeObserver = window.ResizeObserver;\n\n  // 重写ResizeObserver\n  window.ResizeObserver = /*#__PURE__*/function (_OriginalResizeObserv) {\n    function CustomResizeObserver(callback) {\n      var _this;\n      _classCallCheck(this, CustomResizeObserver);\n      // 包装回调函数，捕获并处理可能的错误\n      var wrappedCallback = function wrappedCallback(entries, observer) {\n        try {\n          // 过滤掉无效的条目\n          var validEntries = entries.filter(function (entry) {\n            // 检查目标元素是否仍在文档中\n            return entry && entry.target && document.body.contains(entry.target);\n          });\n\n          // 如果没有有效条目，直接返回\n          if (validEntries.length === 0) return;\n\n          // 只传递有效的条目给原始回调\n          callback(validEntries, observer);\n        } catch (e) {\n          if (e.message && (e.message.includes('ResizeObserver') || e.message.includes('Maximum update depth') || e.message.includes('disconnected') || e.message.includes('null') || e.message.includes('undefined'))) {\n            console.warn('Suppressed ResizeObserver error:', e);\n            return; // 忽略错误并继续\n          }\n          throw e; // 非ResizeObserver相关错误则重新抛出\n        }\n      };\n      _this = _callSuper(this, CustomResizeObserver, [wrappedCallback]);\n\n      // 增强disconnect方法\n      var originalDisconnect = _this.disconnect;\n      _this.disconnect = function () {\n        try {\n          originalDisconnect.call(this);\n        } catch (e) {\n          console.warn('Suppressed error in disconnect:', e);\n        }\n      };\n      return _this;\n    }\n    _inherits(CustomResizeObserver, _OriginalResizeObserv);\n    return _createClass(CustomResizeObserver);\n  }(OriginalResizeObserver);\n  console.log('成功加强了ResizeObserver处理');\n} catch (error) {\n  console.warn('无法加强ResizeObserver处理:', error);\n}\n\n// 添加webpack-dev-server覆盖层处理 - 直接干预DOM，隐藏错误覆盖层\nif (process.env.NODE_ENV === 'development') {\n  // 定期检查并移除错误覆盖层\n  var removeErrorOverlay = function removeErrorOverlay() {\n    try {\n      var overlays = document.querySelectorAll('div[id^=\"webpack-dev-server-client-overlay\"]');\n      overlays.forEach(function (overlay) {\n        if (overlay.textContent && overlay.textContent.includes('ResizeObserver')) {\n          // 完全移除错误覆盖层\n          overlay.parentNode && overlay.parentNode.removeChild(overlay);\n        }\n      });\n    } catch (e) {\n      // 忽略错误\n    }\n  };\n\n  // 每秒检查一次\n  setInterval(removeErrorOverlay, 1000);\n\n  // 在文档加载完成后立即检查\n  window.addEventListener('DOMContentLoaded', removeErrorOverlay);\n  window.addEventListener('load', removeErrorOverlay);\n}\nvar app = createApp(App);\n\n// 添加全局错误处理程序\napp.config.errorHandler = function (err, vm, info) {\n  // 忽略ResizeObserver相关错误\n  if (err && err.message && (err.message.includes('ResizeObserver') || err.message.includes('Maximum update depth'))) {\n    console.warn('全局捕获到ResizeObserver错误:', err.message);\n    return;\n  }\n  console.error(err);\n};\napp.use(ElementPlus, {\n  // 设置Element Plus的一些选项\n  size: 'default',\n  zIndex: 2000\n});\napp.use(router);\napp.use(store);\napp.mount('#app');","map":{"version":3,"names":["createApp","ElementPlus","App","router","store","applyErrorSuppressions","originalConsoleError","console","error","message","includes","_len","arguments","length","args","Array","_key","apply","concat","OriginalResizeObserver","window","ResizeObserver","_OriginalResizeObserv","CustomResizeObserver","callback","_this","_classCallCheck","wrappedCallback","entries","observer","validEntries","filter","entry","target","document","body","contains","e","warn","_callSuper","originalDisconnect","disconnect","call","_inherits","_createClass","log","process","env","NODE_ENV","removeErrorOverlay","overlays","querySelectorAll","forEach","overlay","textContent","parentNode","removeChild","setInterval","addEventListener","app","config","errorHandler","err","vm","info","use","size","zIndex","mount"],"sources":["D:/software_data/Project/Y0527/CODE_BAK/frontend/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\r\nimport ElementPlus from 'element-plus'\r\nimport 'element-plus/dist/index.css'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\nimport { applyErrorSuppressions } from './utils/errorHandler'\r\n\r\n// 应用错误抑制措施（会自动只在开发环境中应用）\r\napplyErrorSuppressions();\r\n\r\n// 添加全局错误处理，特别处理ResizeObserver错误\r\nconst originalConsoleError = console.error;\r\nconsole.error = function(message, ...args) {\r\n  // 过滤掉ResizeObserver的错误\r\n  if (typeof message === 'string' && \r\n      (message.includes('ResizeObserver') || \r\n       message.includes('ResizeObserver loop limit exceeded') || \r\n       message.includes('ResizeObserver loop completed with undelivered notifications'))) {\r\n    // 忽略这些错误\r\n    return;\r\n  }\r\n  originalConsoleError.apply(console, [message, ...args]);\r\n};\r\n\r\n// 强制覆盖原生ResizeObserver，防止其循环错误\r\ntry {\r\n  // 保存原始的ResizeObserver\r\n  const OriginalResizeObserver = window.ResizeObserver;\r\n  \r\n  // 重写ResizeObserver\r\n  window.ResizeObserver = class CustomResizeObserver extends OriginalResizeObserver {\r\n    constructor(callback) {\r\n      // 包装回调函数，捕获并处理可能的错误\r\n      const wrappedCallback = (entries, observer) => {\r\n        try {\r\n          // 过滤掉无效的条目\r\n          const validEntries = entries.filter(entry => {\r\n            // 检查目标元素是否仍在文档中\r\n            return entry && entry.target && document.body.contains(entry.target);\r\n          });\r\n          \r\n          // 如果没有有效条目，直接返回\r\n          if (validEntries.length === 0) return;\r\n          \r\n          // 只传递有效的条目给原始回调\r\n          callback(validEntries, observer);\r\n        } catch (e) {\r\n          if (e.message && (\r\n            e.message.includes('ResizeObserver') || \r\n            e.message.includes('Maximum update depth') ||\r\n            e.message.includes('disconnected') ||\r\n            e.message.includes('null') ||\r\n            e.message.includes('undefined')\r\n          )) {\r\n            console.warn('Suppressed ResizeObserver error:', e);\r\n            return; // 忽略错误并继续\r\n          }\r\n          throw e; // 非ResizeObserver相关错误则重新抛出\r\n        }\r\n      };\r\n      super(wrappedCallback);\r\n      \r\n      // 增强disconnect方法\r\n      const originalDisconnect = this.disconnect;\r\n      this.disconnect = function() {\r\n        try {\r\n          originalDisconnect.call(this);\r\n        } catch (e) {\r\n          console.warn('Suppressed error in disconnect:', e);\r\n        }\r\n      };\r\n    }\r\n  };\r\n  \r\n  console.log('成功加强了ResizeObserver处理');\r\n} catch (error) {\r\n  console.warn('无法加强ResizeObserver处理:', error);\r\n}\r\n\r\n// 添加webpack-dev-server覆盖层处理 - 直接干预DOM，隐藏错误覆盖层\r\nif (process.env.NODE_ENV === 'development') {\r\n  // 定期检查并移除错误覆盖层\r\n  const removeErrorOverlay = () => {\r\n    try {\r\n      const overlays = document.querySelectorAll('div[id^=\"webpack-dev-server-client-overlay\"]');\r\n      overlays.forEach(overlay => {\r\n        if (overlay.textContent && overlay.textContent.includes('ResizeObserver')) {\r\n          // 完全移除错误覆盖层\r\n          overlay.parentNode && overlay.parentNode.removeChild(overlay);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      // 忽略错误\r\n    }\r\n  };\r\n  \r\n  // 每秒检查一次\r\n  setInterval(removeErrorOverlay, 1000);\r\n  \r\n  // 在文档加载完成后立即检查\r\n  window.addEventListener('DOMContentLoaded', removeErrorOverlay);\r\n  window.addEventListener('load', removeErrorOverlay);\r\n}\r\n\r\nconst app = createApp(App)\r\n\r\n// 添加全局错误处理程序\r\napp.config.errorHandler = (err, vm, info) => {\r\n  // 忽略ResizeObserver相关错误\r\n  if (err && err.message && (\r\n    err.message.includes('ResizeObserver') || \r\n    err.message.includes('Maximum update depth')\r\n  )) {\r\n    console.warn('全局捕获到ResizeObserver错误:', err.message);\r\n    return;\r\n  }\r\n  console.error(err);\r\n};\r\n\r\napp.use(ElementPlus, {\r\n  // 设置Element Plus的一些选项\r\n  size: 'default',\r\n  zIndex: 2000\r\n})\r\napp.use(router)\r\napp.use(store)\r\n\r\napp.mount('#app') "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}