{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"energy-efficiency-analysis\"\n};\nvar _hoisted_2 = {\n  \"class\": \"filter-row\"\n};\nvar _hoisted_3 = {\n  \"class\": \"date-picker\"\n};\nvar _hoisted_4 = {\n  \"class\": \"station-filter\"\n};\nvar _hoisted_5 = {\n  \"class\": \"robot-filter\"\n};\nvar _hoisted_6 = {\n  \"class\": \"export-buttons\"\n};\nvar _hoisted_7 = {\n  \"class\": \"kpi-title\"\n};\nvar _hoisted_8 = {\n  \"class\": \"kpi-value\"\n};\nvar _hoisted_9 = {\n  \"class\": \"chart-header\"\n};\nvar _hoisted_10 = {\n  \"class\": \"chart-content\"\n};\nvar _hoisted_11 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_12 = {\n  ref: \"efficiencyChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_13 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_14 = {\n  ref: \"consumptionChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_15 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_16 = {\n  ref: \"utilizationChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_17 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_18 = {\n  ref: \"robotChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_19 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_20 = {\n  ref: \"peakChart\",\n  \"class\": \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n  var _component_el_option = _resolveComponent(\"el-option\");\n  var _component_el_select = _resolveComponent(\"el-select\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_col = _resolveComponent(\"el-col\");\n  var _component_el_row = _resolveComponent(\"el-row\");\n  var _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  var _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 筛选器部分 \"), _createVNode(_component_el_card, {\n    \"class\": \"filter-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_date_picker, {\n        modelValue: $data.dateRange,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.dateRange = $event;\n        }),\n        type: \"daterange\",\n        \"range-separator\": \"至\",\n        \"start-placeholder\": \"开始日期\",\n        \"end-placeholder\": \"结束日期\",\n        onChange: $options.handleDateChange\n      }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_select, {\n        modelValue: $data.selectedStations,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n          return $data.selectedStations = $event;\n        }),\n        multiple: \"\",\n        placeholder: \"选择充电站\",\n        onChange: $options.handleStationChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.stations, function (station) {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: station.id,\n              label: station.name,\n              value: station.id\n            }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n          }), 128 /* KEYED_FRAGMENT */))];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_select, {\n        modelValue: $data.selectedRobots,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n          return $data.selectedRobots = $event;\n        }),\n        multiple: \"\",\n        placeholder: \"选择机器人\",\n        onChange: $options.handleRobotChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.robots, function (robot) {\n            return _openBlock(), _createBlock(_component_el_option, {\n              key: robot.id,\n              label: robot.name,\n              value: robot.id\n            }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n          }), 128 /* KEYED_FRAGMENT */))];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[3] || (_cache[3] = function ($event) {\n          return $options.exportData('csv');\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[6] || (_cache[6] = [_createTextVNode(\" 导出CSV \")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [6]\n      }), _createVNode(_component_el_button, {\n        type: \"success\",\n        onClick: _cache[4] || (_cache[4] = function ($event) {\n          return $options.exportData('excel');\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[7] || (_cache[7] = [_createTextVNode(\" 导出Excel \")]);\n        }),\n        _: 1 /* STABLE */,\n        __: [7]\n      })])])];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" KPI指标卡片 \"), _createVNode(_component_el_row, {\n    gutter: 20,\n    \"class\": \"kpi-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.kpiData, function (kpi, index) {\n        return _openBlock(), _createBlock(_component_el_col, {\n          span: 4,\n          key: index\n        }, {\n          \"default\": _withCtx(function () {\n            return [_createVNode(_component_el_card, {\n              \"class\": \"kpi-card\"\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(kpi.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, _toDisplayString(kpi.value) + _toDisplayString(kpi.unit), 1 /* TEXT */), _createElementVNode(\"div\", {\n                  \"class\": _normalizeClass([\"kpi-change\", kpi.trend])\n                }, [_createElementVNode(\"i\", {\n                  \"class\": _normalizeClass(kpi.trend === 'up' ? 'el-icon-top' : 'el-icon-bottom')\n                }, null, 2 /* CLASS */), _createTextVNode(\" \" + _toDisplayString(kpi.change) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 分析图表区域 \"), _createVNode(_component_el_card, {\n    \"class\": \"chart-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"h3\", null, _toDisplayString($data.currentChartTitle), 1 /* TEXT */), _createVNode(_component_el_radio_group, {\n        modelValue: $data.currentChart,\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n          return $data.currentChart = $event;\n        }),\n        onChange: $options.handleChartChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_radio_button, {\n            label: \"efficiency\"\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[8] || (_cache[8] = [_createTextVNode(\"充电效率趋势\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [8]\n          }), _createVNode(_component_el_radio_button, {\n            label: \"consumption\"\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[9] || (_cache[9] = [_createTextVNode(\"能耗分布\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [9]\n          }), _createVNode(_component_el_radio_button, {\n            label: \"utilization\"\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[10] || (_cache[10] = [_createTextVNode(\"充电站利用率\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [10]\n          }), _createVNode(_component_el_radio_button, {\n            label: \"robot\"\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[11] || (_cache[11] = [_createTextVNode(\"机器人充电分析\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [11]\n          }), _createVNode(_component_el_radio_button, {\n            label: \"peak\"\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[12] || (_cache[12] = [_createTextVNode(\"充电高峰期\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [12]\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_10, [_createCommentVNode(\" 不同图表的容器 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'efficiency']]), _withDirectives(_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'consumption']]), _withDirectives(_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'utilization']]), _withDirectives(_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'robot']]), _withDirectives(_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'peak']])])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_el_card","_withCtx","_createElementVNode","_hoisted_2","_hoisted_3","_component_el_date_picker","modelValue","$data","dateRange","_cache","$event","type","onChange","$options","handleDateChange","_hoisted_4","_component_el_select","selectedStations","multiple","placeholder","handleStationChange","_Fragment","_renderList","stations","station","_createBlock","_component_el_option","key","id","label","name","value","_","_hoisted_5","selectedRobots","handleRobotChange","robots","robot","_hoisted_6","_component_el_button","onClick","exportData","_createTextVNode","__","_component_el_row","gutter","kpiData","kpi","index","_component_el_col","span","_hoisted_7","_toDisplayString","title","_hoisted_8","unit","_normalizeClass","trend","change","_hoisted_9","currentChartTitle","_component_el_radio_group","currentChart","handleChartChange","_component_el_radio_button","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\EnergyEfficiency.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-efficiency-analysis\">\r\n    <!-- 筛选器部分 -->\r\n    <el-card class=\"filter-container\">\r\n      <div class=\"filter-row\">\r\n        <div class=\"date-picker\">\r\n          <el-date-picker\r\n            v-model=\"dateRange\"\r\n            type=\"daterange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期\"\r\n            end-placeholder=\"结束日期\"\r\n            @change=\"handleDateChange\"\r\n          />\r\n        </div>\r\n        <div class=\"station-filter\">\r\n          <el-select\r\n            v-model=\"selectedStations\"\r\n            multiple\r\n            placeholder=\"选择充电站\"\r\n            @change=\"handleStationChange\"\r\n          >\r\n            <el-option\r\n              v-for=\"station in stations\"\r\n              :key=\"station.id\"\r\n              :label=\"station.name\"\r\n              :value=\"station.id\"\r\n            />\r\n          </el-select>\r\n        </div>\r\n        <div class=\"robot-filter\">\r\n          <el-select\r\n            v-model=\"selectedRobots\"\r\n            multiple\r\n            placeholder=\"选择机器人\"\r\n            @change=\"handleRobotChange\"\r\n          >\r\n            <el-option\r\n              v-for=\"robot in robots\"\r\n              :key=\"robot.id\"\r\n              :label=\"robot.name\"\r\n              :value=\"robot.id\"\r\n            />\r\n          </el-select>\r\n        </div>\r\n        <div class=\"export-buttons\">\r\n          <el-button type=\"primary\" @click=\"exportData('csv')\">\r\n            导出CSV\r\n          </el-button>\r\n          <el-button type=\"success\" @click=\"exportData('excel')\">\r\n            导出Excel\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- KPI指标卡片 -->\r\n    <el-row :gutter=\"20\" class=\"kpi-container\">\r\n      <el-col :span=\"4\" v-for=\"(kpi, index) in kpiData\" :key=\"index\">\r\n        <el-card class=\"kpi-card\">\r\n          <div class=\"kpi-title\">{{ kpi.title }}</div>\r\n          <div class=\"kpi-value\">{{ kpi.value }}{{ kpi.unit }}</div>\r\n          <div class=\"kpi-change\" :class=\"kpi.trend\">\r\n            <i :class=\"kpi.trend === 'up' ? 'el-icon-top' : 'el-icon-bottom'\"></i>\r\n            {{ kpi.change }}%\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 分析图表区域 -->\r\n    <el-card class=\"chart-container\">\r\n      <div class=\"chart-header\">\r\n        <h3>{{ currentChartTitle }}</h3>\r\n        <el-radio-group v-model=\"currentChart\" @change=\"handleChartChange\">\r\n          <el-radio-button label=\"efficiency\">充电效率趋势</el-radio-button>\r\n          <el-radio-button label=\"consumption\">能耗分布</el-radio-button>\r\n          <el-radio-button label=\"utilization\">充电站利用率</el-radio-button>\r\n          <el-radio-button label=\"robot\">机器人充电分析</el-radio-button>\r\n          <el-radio-button label=\"peak\">充电高峰期</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"chart-content\">\r\n        <!-- 不同图表的容器 -->\r\n        <div v-show=\"currentChart === 'efficiency'\" class=\"chart-item\">\r\n          <div ref=\"efficiencyChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'consumption'\" class=\"chart-item\">\r\n          <div ref=\"consumptionChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'utilization'\" class=\"chart-item\">\r\n          <div ref=\"utilizationChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'robot'\" class=\"chart-item\">\r\n          <div ref=\"robotChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'peak'\" class=\"chart-item\">\r\n          <div ref=\"peakChart\" class=\"chart\"></div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport energyEfficiencyApi from '@/api/energyEfficiency';\r\nimport { formatDateTime, calculateDuration } from '@/utils/dateTime';\r\n\r\nexport default {\r\n  name: 'EnergyEfficiencyAnalysis',\r\n  data() {\r\n    return {\r\n      // 筛选条件\r\n      dateRange: [new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000), new Date()],\r\n      selectedStations: [],\r\n      selectedRobots: [],\r\n      \r\n      // 数据列表\r\n      stations: [],\r\n      robots: [],\r\n      \r\n      // 图表相关\r\n      currentChart: 'efficiency',\r\n      currentChartTitle: '充电效率趋势分析',\r\n      charts: {\r\n        efficiency: null,\r\n        consumption: null,\r\n        utilization: null,\r\n        robot: null,\r\n        peak: null\r\n      },\r\n      \r\n      // KPI数据\r\n      kpiData: [\r\n        { title: '平均充电效率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总能耗', value: 0, unit: 'kWh', change: 0, trend: 'up' },\r\n        { title: '充电器利用率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '平均等待时间', value: 0, unit: 'min', change: 0, trend: 'down' },\r\n        { title: '充电成功率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总充电次数', value: 0, unit: '次', change: 0, trend: 'up' }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    this.initData();\r\n  },\r\n  \r\n  methods: {\r\n    async initData() {\r\n      try {\r\n        // 获取充电站列表\r\n        const stationsResponse = await energyEfficiencyApi.getStations();\r\n        this.stations = stationsResponse.data;\r\n        \r\n        // 获取机器人列表\r\n        const robotsResponse = await energyEfficiencyApi.getRobots();\r\n        this.robots = robotsResponse.data;\r\n        \r\n        // 获取初始数据\r\n        this.fetchKpiData();\r\n        this.fetchChartData();\r\n      } catch (error) {\r\n        console.error('初始化数据失败:', error);\r\n        this.$message.error('加载数据失败，请重试');\r\n      }\r\n    },\r\n    \r\n    // 筛选器处理\r\n    handleDateChange() {\r\n      this.refreshData();\r\n    },\r\n    \r\n    handleStationChange() {\r\n      this.refreshData();\r\n    },\r\n    \r\n    handleRobotChange() {\r\n      this.refreshData();\r\n    },\r\n    \r\n    // 刷新所有数据\r\n    refreshData() {\r\n      this.fetchKpiData();\r\n      this.fetchChartData();\r\n    },\r\n    \r\n    // 获取KPI数据\r\n    async fetchKpiData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        const response = await energyEfficiencyApi.getKpiData(params);\r\n        \r\n        this.kpiData = [\r\n          { \r\n            title: '平均充电效率', \r\n            value: response.data.avgEfficiency.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.efficiencyChange.toFixed(2), \r\n            trend: response.data.efficiencyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总能耗', \r\n            value: response.data.totalEnergy.toFixed(2), \r\n            unit: 'kWh', \r\n            change: response.data.energyChange.toFixed(2), \r\n            trend: response.data.energyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电器利用率', \r\n            value: response.data.utilization.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.utilizationChange.toFixed(2), \r\n            trend: response.data.utilizationChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '平均等待时间', \r\n            value: response.data.avgWaitTime.toFixed(2), \r\n            unit: 'min', \r\n            change: response.data.waitTimeChange.toFixed(2), \r\n            trend: response.data.waitTimeChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电成功率', \r\n            value: response.data.successRate.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.successRateChange.toFixed(2), \r\n            trend: response.data.successRateChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总充电次数', \r\n            value: response.data.totalOrders || 0, \r\n            unit: '次', \r\n            change: response.data.ordersChange || 0, \r\n            trend: (response.data.ordersChange || 0) >= 0 ? 'up' : 'down' \r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.error('获取KPI数据失败:', error);\r\n        this.$message.error('获取KPI数据失败');\r\n      }\r\n    },\r\n    \r\n    // 获取图表数据并渲染\r\n    async fetchChartData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        \r\n        // 根据当前选择的图表类型获取数据\r\n        switch (this.currentChart) {\r\n          case 'efficiency':\r\n            await this.renderEfficiencyChart(params);\r\n            break;\r\n          case 'consumption':\r\n            await this.renderConsumptionChart(params);\r\n            break;\r\n          case 'utilization':\r\n            await this.renderUtilizationChart(params);\r\n            break;\r\n          case 'robot':\r\n            await this.renderRobotChart(params);\r\n            break;\r\n          case 'peak':\r\n            await this.renderPeakChart(params);\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取图表数据失败:', error);\r\n        this.$message.error('获取图表数据失败');\r\n      }\r\n    },\r\n    \r\n    // 充电效率趋势图\r\n    async renderEfficiencyChart(params) {\r\n      const response = await energyEfficiencyApi.getEfficiencyTrend(params);\r\n      \r\n      if (!this.charts.efficiency) {\r\n        this.charts.efficiency = echarts.init(this.$refs.efficiencyChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电效率趋势分析',\r\n          left: 'center',\r\n          top: '10px'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: response.data.stations.map(station => station.name),\r\n          selected: response.data.stations.reduce((acc, station) => {\r\n            acc[station.name] = true;\r\n            return acc;\r\n          }, {}),\r\n          top: '40px',\r\n          type: 'scroll',\r\n          orient: 'horizontal'\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          top: '100px',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: response.data.timeline\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '充电效率 (%)',\r\n          min: 50,\r\n          max: 100\r\n        },\r\n        series: response.data.stations.map(station => ({\r\n          name: station.name,\r\n          type: 'line',\r\n          data: station.efficiencyData,\r\n          smooth: true\r\n        }))\r\n      };\r\n      \r\n      this.charts.efficiency.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.efficiency.off('click');\r\n    },\r\n    \r\n    // 能耗分布热力图\r\n    async renderConsumptionChart(params) {\r\n      const response = await energyEfficiencyApi.getEnergyConsumptionDistribution(params);\r\n      \r\n      if (!this.charts.consumption) {\r\n        this.charts.consumption = echarts.init(this.$refs.consumptionChart);\r\n      }\r\n      \r\n      const hours = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];\r\n      const days = response.data.days;\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '能耗分布热力图'\r\n        },\r\n        tooltip: {\r\n          position: 'top',\r\n          formatter: function (params) {\r\n            return `${params.data[1]}:00 - ${params.data[1] + 1}:00<br>日期: ${params.data[0]}<br>能耗: ${params.data[2].toFixed(2)} kWh`;\r\n          }\r\n        },\r\n        grid: {\r\n          height: '70%',\r\n          top: '10%'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: hours,\r\n          splitArea: {\r\n            show: true\r\n          },\r\n          axisLabel: {\r\n            formatter: '{value}:00'\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'category',\r\n          data: days,\r\n          splitArea: {\r\n            show: true\r\n          }\r\n        },\r\n        visualMap: {\r\n          min: 0,\r\n          max: response.data.maxValue,\r\n          calculable: true,\r\n          orient: 'horizontal',\r\n          left: 'center',\r\n          bottom: '5%',\r\n          color: ['#d94e5d', '#eac736', '#50a3ba']\r\n        },\r\n        series: [{\r\n          name: '能耗 (kWh)',\r\n          type: 'heatmap',\r\n          data: response.data.data,\r\n          label: {\r\n            show: false\r\n          },\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          }\r\n        }]\r\n      };\r\n      \r\n      this.charts.consumption.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.consumption.off('click');\r\n    },\r\n    \r\n    // 充电站利用率对比\r\n    async renderUtilizationChart(params) {\r\n      const response = await energyEfficiencyApi.getStationUtilization(params);\r\n      \r\n      if (!this.charts.utilization) {\r\n        this.charts.utilization = echarts.init(this.$refs.utilizationChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电站利用率对比'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['忙碌时间', '空闲时间', '维护时间', '故障时间']\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'value',\r\n          name: '小时',\r\n          max: 24\r\n        },\r\n        yAxis: {\r\n          type: 'category',\r\n          data: response.data.map(item => item.stationName)\r\n        },\r\n        series: [\r\n          {\r\n            name: '忙碌时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.busyHours)\r\n          },\r\n          {\r\n            name: '空闲时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.idleHours)\r\n          },\r\n          {\r\n            name: '维护时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.maintenanceHours)\r\n          },\r\n          {\r\n            name: '故障时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.errorHours)\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.utilization.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.utilization.off('click');\r\n    },\r\n    \r\n    // 机器人充电行为分析\r\n    async renderRobotChart(params) {\r\n      const response = await energyEfficiencyApi.getRobotChargingBehavior(params);\r\n      \r\n      if (!this.charts.robot) {\r\n        this.charts.robot = echarts.init(this.$refs.robotChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '机器人充电行为分析'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['充电次数', '平均充电时长', '平均等待时间']\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: response.data.robots.map(robot => robot.name),\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '次数',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '时间 (分钟)',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value} min'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '充电次数',\r\n            type: 'bar',\r\n            data: response.data.robots.map(robot => robot.chargingCount)\r\n          },\r\n          {\r\n            name: '平均充电时长',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.robots.map(robot => robot.avgChargingDuration)\r\n          },\r\n          {\r\n            name: '平均等待时间',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.robots.map(robot => robot.avgWaitingTime)\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.robot.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.robot.off('click');\r\n    },\r\n    \r\n    // 充电高峰期分析\r\n    async renderPeakChart(params) {\r\n      const response = await energyEfficiencyApi.getChargingPeakAnalysis(params);\r\n      \r\n      if (!this.charts.peak) {\r\n        this.charts.peak = echarts.init(this.$refs.peakChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电高峰期分析'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['充电请求数', '平均等待时间']\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: ['0-2', '2-4', '4-6', '6-8', '8-10', '10-12', '12-14', '14-16', '16-18', '18-20', '20-22', '22-24'],\r\n            axisLabel: {\r\n              formatter: '{value}时'\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '请求数',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '等待时间 (分钟)',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value} min'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '充电请求数',\r\n            type: 'bar',\r\n            data: response.data.requestCounts\r\n          },\r\n          {\r\n            name: '平均等待时间',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.avgWaitingTimes\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.peak.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.peak.off('click');\r\n    },\r\n    \r\n    // 获取筛选参数\r\n    getFilterParams() {\r\n      return {\r\n        startDate: this.dateRange[0] ? this.dateRange[0].toISOString() : null,\r\n        endDate: this.dateRange[1] ? this.dateRange[1].toISOString() : null,\r\n        stationIds: this.selectedStations.length > 0 ? this.selectedStations : null,\r\n        robotIds: this.selectedRobots.length > 0 ? this.selectedRobots : null\r\n      };\r\n    },\r\n    \r\n    // 处理图表切换\r\n    handleChartChange(chartType) {\r\n      const titles = {\r\n        efficiency: '充电效率趋势分析',\r\n        consumption: '能耗分布热力图',\r\n        utilization: '充电站利用率对比',\r\n        robot: '机器人充电行为分析',\r\n        peak: '充电高峰期分析'\r\n      };\r\n      \r\n      this.currentChartTitle = titles[chartType];\r\n      this.fetchChartData();\r\n    },\r\n    \r\n    // 数据导出\r\n    exportData(type) {\r\n      const params = {\r\n        ...this.getFilterParams(),\r\n        exportType: type\r\n      };\r\n      \r\n      energyEfficiencyApi.exportData(params)\r\n        .then(response => {\r\n          const url = window.URL.createObjectURL(new Blob([response.data]));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.setAttribute('download', `能效分析_${new Date().toISOString().split('T')[0]}.${type}`);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n        })\r\n        .catch(error => {\r\n          console.error('导出数据失败:', error);\r\n          this.$message.error('导出数据失败');\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-efficiency-analysis {\r\n  padding: 20px;\r\n}\r\n\r\n.filter-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.date-picker, .station-filter, .robot-filter {\r\n  margin-right: 15px;\r\n  min-width: 200px;\r\n}\r\n\r\n.export-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.kpi-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.kpi-card {\r\n  text-align: center;\r\n  padding: 10px;\r\n}\r\n\r\n.kpi-title {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.kpi-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.kpi-change {\r\n  font-size: 12px;\r\n}\r\n\r\n.kpi-change.up {\r\n  color: #67c23a;\r\n}\r\n\r\n.kpi-change.down {\r\n  color: #f56c6c;\r\n}\r\n\r\n.chart-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-content {\r\n  position: relative;\r\n}\r\n\r\n.chart-item {\r\n  position: relative;\r\n}\r\n\r\n.chart {\r\n  height: 400px;\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}