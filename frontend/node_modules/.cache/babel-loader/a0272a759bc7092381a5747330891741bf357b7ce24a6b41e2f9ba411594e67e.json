{"ast":null,"code":"import _regeneratorRuntime from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _typeof from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _asyncToGenerator from \"D:/software_data/Project/Y0527/CODE/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { robotApi } from '@/api';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'Robots',\n  data: function data() {\n    return {\n      robots: [],\n      loading: false,\n      error: null,\n      // 分页相关\n      currentPage: 1,\n      pageSize: 10\n    };\n  },\n  computed: {\n    totalItems: function totalItems() {\n      return this.robots.length;\n    },\n    paginatedRobots: function paginatedRobots() {\n      var startIndex = (this.currentPage - 1) * this.pageSize;\n      var endIndex = startIndex + this.pageSize;\n      return this.robots.slice(startIndex, endIndex);\n    }\n  },\n  created: function created() {\n    var _this = this;\n    console.log('Robots组件已创建，准备获取数据');\n\n    // 添加这个延迟调用以避免可能的ResizeObserver问题\n    setTimeout(function () {\n      _this.fetchRobots();\n    }, 0);\n  },\n  methods: {\n    fetchRobots: function fetchRobots() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, validRobots;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this2.loading = true;\n              _this2.error = null;\n              console.log('开始获取机器人数据');\n              _context.prev = 4;\n              _context.next = 7;\n              return robotApi.getAll();\n            case 7:\n              response = _context.sent;\n              // 打印原始响应\n              console.log('获取到机器人数据(原始):', response);\n              console.log('获取到机器人数据:', response.data);\n              console.log('机器人数据类型:', _typeof(response.data), Array.isArray(response.data));\n\n              // 确保数据是数组\n              if (Array.isArray(response.data)) {\n                // 检查每个机器人对象的字段\n                validRobots = response.data.filter(function (robot) {\n                  var isValid = robot && _typeof(robot) === 'object' && 'id' in robot && 'name' in robot && 'battery_level' in robot && 'status' in robot;\n                  if (!isValid) {\n                    console.warn('过滤掉无效的机器人数据:', robot);\n                  }\n                  return isValid;\n                });\n                console.log('有效的机器人数据:', validRobots);\n                _this2.robots = validRobots;\n                // 重置为第一页\n                _this2.currentPage = 1;\n                console.log('成功设置机器人数据，数量:', _this2.robots.length);\n              } else {\n                console.error('API返回的机器人数据不是数组:', response.data);\n                _this2.robots = []; // 设置为空数组\n                _this2.error = '机器人数据格式错误，请联系管理员';\n                ElMessage.error('机器人数据格式错误');\n              }\n              _context.next = 20;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              console.error('API调用出错:', _context.t0);\n              _this2.robots = []; // 确保错误时也设置为空数组\n              _this2.error = \"API\\u8C03\\u7528\\u51FA\\u9519: \".concat(_context.t0.message || '未知错误');\n              ElMessage.error('获取机器人数据失败');\n            case 20:\n              _context.next = 28;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t1 = _context[\"catch\"](0);\n              console.error('获取机器人列表失败:', _context.t1);\n              _this2.robots = []; // 确保错误时也设置为空数组\n              _this2.error = \"\\u83B7\\u53D6\\u6570\\u636E\\u5931\\u8D25: \".concat(_context.t1.message || '未知错误');\n              ElMessage.error('获取机器人列表失败');\n            case 28:\n              _context.prev = 28;\n              _this2.loading = false;\n              return _context.finish(28);\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 22, 28, 31], [4, 14]]);\n      }))();\n    },\n    // 分页相关方法\n    handleCurrentChange: function handleCurrentChange(page) {\n      this.currentPage = page;\n      console.log(\"\\u5F53\\u524D\\u9875: \".concat(this.currentPage));\n    },\n    getStatusType: function getStatusType(status) {\n      var types = {\n        'idle': 'info',\n        'working': 'success',\n        'charging': 'primary',\n        'error': 'danger'\n      };\n      return types[status] || 'info';\n    },\n    getStatusText: function getStatusText(status) {\n      var texts = {\n        'idle': '空闲',\n        'working': '工作中',\n        'charging': '充电中',\n        'error': '故障'\n      };\n      return texts[status] || status;\n    }\n  }\n};","map":{"version":3,"names":["robotApi","ElMessage","name","data","robots","loading","error","currentPage","pageSize","computed","totalItems","length","paginatedRobots","startIndex","endIndex","slice","created","_this","console","log","setTimeout","fetchRobots","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","validRobots","wrap","_callee$","_context","prev","next","getAll","sent","_typeof","Array","isArray","filter","robot","isValid","warn","t0","concat","message","t1","finish","stop","handleCurrentChange","page","getStatusType","status","types","getStatusText","texts"],"sources":["D:\\software_data\\Project\\Y0527\\CODE\\frontend\\src\\views\\Robots.vue"],"sourcesContent":["<template>\r\n  <div class=\"robots-container\">\r\n    <h2>机器人管理</h2>\r\n    <el-card class=\"box-card\">\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        <el-alert\r\n          title=\"加载数据出错\"\r\n          type=\"error\"\r\n          :description=\"error\"\r\n          show-icon\r\n        />\r\n      </div>\r\n      <el-table \r\n        v-if=\"robots && robots.length > 0\" \r\n        :data=\"paginatedRobots\" \r\n        style=\"width: 100%\" \r\n        v-loading=\"loading\">\r\n        <el-table-column prop=\"id\" label=\"机器人ID\" width=\"180\" />\r\n        <el-table-column prop=\"name\" label=\"名称\" width=\"180\" />\r\n        <el-table-column prop=\"battery_level\" label=\"电量\">\r\n          <template #default=\"scope\">\r\n            <el-progress :percentage=\"scope.row.battery_level\" />\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"status\" label=\"状态\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ getStatusText(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"last_charging\" label=\"上次充电时间\" />\r\n      </el-table>\r\n      <div v-else-if=\"!loading\" class=\"no-data\">\r\n        <el-empty description=\"暂无数据\" />\r\n      </div>\r\n      \r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination-container\" v-if=\"robots && robots.length > 0\">\r\n        <el-pagination\r\n          v-model:current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          layout=\"total, prev, pager, next, jumper\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { robotApi } from '@/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'Robots',\r\n  data() {\r\n    return {\r\n      robots: [],\r\n      loading: false,\r\n      error: null,\r\n      // 分页相关\r\n      currentPage: 1,\r\n      pageSize: 10\r\n    }\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.robots.length\r\n    },\r\n    paginatedRobots() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize\r\n      const endIndex = startIndex + this.pageSize\r\n      return this.robots.slice(startIndex, endIndex)\r\n    }\r\n  },\r\n  created() {\r\n    console.log('Robots组件已创建，准备获取数据')\r\n    \r\n    // 添加这个延迟调用以避免可能的ResizeObserver问题\r\n    setTimeout(() => {\r\n      this.fetchRobots()\r\n    }, 0)\r\n  },\r\n  methods: {\r\n    async fetchRobots() {\r\n      try {\r\n        this.loading = true\r\n        this.error = null\r\n        console.log('开始获取机器人数据')\r\n        \r\n        try {\r\n          const response = await robotApi.getAll()\r\n          // 打印原始响应\r\n          console.log('获取到机器人数据(原始):', response)\r\n          console.log('获取到机器人数据:', response.data)\r\n          console.log('机器人数据类型:', typeof response.data, Array.isArray(response.data))\r\n          \r\n          // 确保数据是数组\r\n          if (Array.isArray(response.data)) {\r\n            // 检查每个机器人对象的字段\r\n            const validRobots = response.data.filter(robot => {\r\n              const isValid = robot && \r\n                             typeof robot === 'object' && \r\n                             'id' in robot && \r\n                             'name' in robot && \r\n                             'battery_level' in robot && \r\n                             'status' in robot;\r\n              if (!isValid) {\r\n                console.warn('过滤掉无效的机器人数据:', robot);\r\n              }\r\n              return isValid;\r\n            });\r\n            \r\n            console.log('有效的机器人数据:', validRobots);\r\n            this.robots = validRobots;\r\n            // 重置为第一页\r\n            this.currentPage = 1;\r\n            console.log('成功设置机器人数据，数量:', this.robots.length)\r\n          } else {\r\n            console.error('API返回的机器人数据不是数组:', response.data)\r\n            this.robots = [] // 设置为空数组\r\n            this.error = '机器人数据格式错误，请联系管理员'\r\n            ElMessage.error('机器人数据格式错误')\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用出错:', apiError)\r\n          this.robots = [] // 确保错误时也设置为空数组\r\n          this.error = `API调用出错: ${apiError.message || '未知错误'}`\r\n          ElMessage.error('获取机器人数据失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取机器人列表失败:', error)\r\n        this.robots = [] // 确保错误时也设置为空数组\r\n        this.error = `获取数据失败: ${error.message || '未知错误'}`\r\n        ElMessage.error('获取机器人列表失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 分页相关方法\r\n    handleCurrentChange(page) {\r\n      this.currentPage = page\r\n      console.log(`当前页: ${this.currentPage}`)\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        'idle': 'info',\r\n        'working': 'success',\r\n        'charging': 'primary',\r\n        'error': 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getStatusText(status) {\r\n      const texts = {\r\n        'idle': '空闲',\r\n        'working': '工作中',\r\n        'charging': '充电中',\r\n        'error': '故障'\r\n      }\r\n      return texts[status] || status\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.robots-container {\r\n  padding: 20px;\r\n}\r\n.error-message {\r\n  margin-bottom: 20px;\r\n}\r\n.no-data {\r\n  padding: 20px 0;\r\n}\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}