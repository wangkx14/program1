{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\n/**\r\n * 格式化日期时间\r\n * @param {string} dateStr - 日期字符串\r\n * @returns {string} 格式化后的日期时间字符串\r\n */\nexport function formatDateTime(dateStr) {\n  if (!dateStr) return '-';\n  var date = new Date(dateStr);\n  if (isNaN(date.getTime())) return '-';\n  return date.toLocaleString('zh-CN', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n}\n\n/**\r\n * 计算两个时间之间的持续时间\r\n * @param {string} startTime - 开始时间字符串\r\n * @param {string} endTime - 结束时间字符串\r\n * @returns {string} 格式化后的持续时间\r\n */\nexport function calculateDuration(startTime, endTime) {\n  if (!startTime || !endTime) return '-';\n  var start = new Date(startTime);\n  var end = new Date(endTime);\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) return '-';\n\n  // 计算时间差（毫秒）\n  var diffMs = end.getTime() - start.getTime();\n  if (diffMs < 0) return '-';\n\n  // 转换为分钟\n  var diffMinutes = Math.floor(diffMs / 60000);\n\n  // 格式化为小时和分钟\n  var hours = Math.floor(diffMinutes / 60);\n  var minutes = diffMinutes % 60;\n  if (hours > 0) {\n    return \"\".concat(hours, \"\\u5C0F\\u65F6\").concat(minutes, \"\\u5206\\u949F\");\n  } else {\n    return \"\".concat(minutes, \"\\u5206\\u949F\");\n  }\n}\n\n/**\r\n * 获取日期范围的天数数组\r\n * @param {Date} startDate - 开始日期\r\n * @param {Date} endDate - 结束日期\r\n * @returns {Array} 日期字符串数组\r\n */\nexport function getDateRange(startDate, endDate) {\n  var dates = [];\n  var currentDate = new Date(startDate);\n\n  // 确保当前日期不超过结束日期\n  while (currentDate <= endDate) {\n    dates.push(currentDate.toISOString().split('T')[0]);\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  return dates;\n}\n\n/**\r\n * 根据时间戳获取小时\r\n * @param {string} timestamp - 时间戳字符串\r\n * @returns {number} 小时数 (0-23)\r\n */\nexport function getHourFromTimestamp(timestamp) {\n  if (!timestamp) return 0;\n  var date = new Date(timestamp);\n  if (isNaN(date.getTime())) return 0;\n  return date.getHours();\n}","map":{"version":3,"names":["formatDateTime","dateStr","date","Date","isNaN","getTime","toLocaleString","year","month","day","hour","minute","second","calculateDuration","startTime","endTime","start","end","diffMs","diffMinutes","Math","floor","hours","minutes","concat","getDateRange","startDate","endDate","dates","currentDate","push","toISOString","split","setDate","getDate","getHourFromTimestamp","timestamp","getHours"],"sources":["C:/Users/jiaronghao/Desktop/Documents/本科论文编写/5、货仓机器人激光充电和能效管理云平台的设计与实现/Y0527-final/frontend/src/utils/dateTime.js"],"sourcesContent":["/**\r\n * 格式化日期时间\r\n * @param {string} dateStr - 日期字符串\r\n * @returns {string} 格式化后的日期时间字符串\r\n */\r\nexport function formatDateTime(dateStr) {\r\n  if (!dateStr) return '-';\r\n  \r\n  const date = new Date(dateStr);\r\n  if (isNaN(date.getTime())) return '-';\r\n  \r\n  return date.toLocaleString('zh-CN', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  });\r\n}\r\n\r\n/**\r\n * 计算两个时间之间的持续时间\r\n * @param {string} startTime - 开始时间字符串\r\n * @param {string} endTime - 结束时间字符串\r\n * @returns {string} 格式化后的持续时间\r\n */\r\nexport function calculateDuration(startTime, endTime) {\r\n  if (!startTime || !endTime) return '-';\r\n  \r\n  const start = new Date(startTime);\r\n  const end = new Date(endTime);\r\n  \r\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) return '-';\r\n  \r\n  // 计算时间差（毫秒）\r\n  const diffMs = end.getTime() - start.getTime();\r\n  if (diffMs < 0) return '-';\r\n  \r\n  // 转换为分钟\r\n  const diffMinutes = Math.floor(diffMs / 60000);\r\n  \r\n  // 格式化为小时和分钟\r\n  const hours = Math.floor(diffMinutes / 60);\r\n  const minutes = diffMinutes % 60;\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}小时${minutes}分钟`;\r\n  } else {\r\n    return `${minutes}分钟`;\r\n  }\r\n}\r\n\r\n/**\r\n * 获取日期范围的天数数组\r\n * @param {Date} startDate - 开始日期\r\n * @param {Date} endDate - 结束日期\r\n * @returns {Array} 日期字符串数组\r\n */\r\nexport function getDateRange(startDate, endDate) {\r\n  const dates = [];\r\n  const currentDate = new Date(startDate);\r\n  \r\n  // 确保当前日期不超过结束日期\r\n  while (currentDate <= endDate) {\r\n    dates.push(currentDate.toISOString().split('T')[0]);\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n  }\r\n  \r\n  return dates;\r\n}\r\n\r\n/**\r\n * 根据时间戳获取小时\r\n * @param {string} timestamp - 时间戳字符串\r\n * @returns {number} 小时数 (0-23)\r\n */\r\nexport function getHourFromTimestamp(timestamp) {\r\n  if (!timestamp) return 0;\r\n  \r\n  const date = new Date(timestamp);\r\n  if (isNaN(date.getTime())) return 0;\r\n  \r\n  return date.getHours();\r\n} "],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAACC,OAAO,EAAE;EACtC,IAAI,CAACA,OAAO,EAAE,OAAO,GAAG;EAExB,IAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,OAAO,CAAC;EAC9B,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,GAAG;EAErC,OAAOH,IAAI,CAACI,cAAc,CAAC,OAAO,EAAE;IAClCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,SAAS,EAAEC,OAAO,EAAE;EACpD,IAAI,CAACD,SAAS,IAAI,CAACC,OAAO,EAAE,OAAO,GAAG;EAEtC,IAAMC,KAAK,GAAG,IAAIb,IAAI,CAACW,SAAS,CAAC;EACjC,IAAMG,GAAG,GAAG,IAAId,IAAI,CAACY,OAAO,CAAC;EAE7B,IAAIX,KAAK,CAACY,KAAK,CAACX,OAAO,CAAC,CAAC,CAAC,IAAID,KAAK,CAACa,GAAG,CAACZ,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,GAAG;;EAE9D;EACA,IAAMa,MAAM,GAAGD,GAAG,CAACZ,OAAO,CAAC,CAAC,GAAGW,KAAK,CAACX,OAAO,CAAC,CAAC;EAC9C,IAAIa,MAAM,GAAG,CAAC,EAAE,OAAO,GAAG;;EAE1B;EACA,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,KAAK,CAAC;;EAE9C;EACA,IAAMI,KAAK,GAAGF,IAAI,CAACC,KAAK,CAACF,WAAW,GAAG,EAAE,CAAC;EAC1C,IAAMI,OAAO,GAAGJ,WAAW,GAAG,EAAE;EAEhC,IAAIG,KAAK,GAAG,CAAC,EAAE;IACb,UAAAE,MAAA,CAAUF,KAAK,kBAAAE,MAAA,CAAKD,OAAO;EAC7B,CAAC,MAAM;IACL,UAAAC,MAAA,CAAUD,OAAO;EACnB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACC,SAAS,EAAEC,OAAO,EAAE;EAC/C,IAAMC,KAAK,GAAG,EAAE;EAChB,IAAMC,WAAW,GAAG,IAAI1B,IAAI,CAACuB,SAAS,CAAC;;EAEvC;EACA,OAAOG,WAAW,IAAIF,OAAO,EAAE;IAC7BC,KAAK,CAACE,IAAI,CAACD,WAAW,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnDH,WAAW,CAACI,OAAO,CAACJ,WAAW,CAACK,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAChD;EAEA,OAAON,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,oBAAoBA,CAACC,SAAS,EAAE;EAC9C,IAAI,CAACA,SAAS,EAAE,OAAO,CAAC;EAExB,IAAMlC,IAAI,GAAG,IAAIC,IAAI,CAACiC,SAAS,CAAC;EAChC,IAAIhC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EAEnC,OAAOH,IAAI,CAACmC,QAAQ,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}