{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"energy-efficiency-analysis\"\n};\nvar _hoisted_2 = {\n  \"class\": \"kpi-title\"\n};\nvar _hoisted_3 = {\n  \"class\": \"kpi-value\"\n};\nvar _hoisted_4 = {\n  \"class\": \"chart-header\"\n};\nvar _hoisted_5 = {\n  \"class\": \"chart-content\"\n};\nvar _hoisted_6 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_7 = {\n  ref: \"efficiencyChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_8 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_9 = {\n  ref: \"consumptionChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_10 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_11 = {\n  ref: \"utilizationChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_12 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_13 = {\n  ref: \"robotChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_14 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_15 = {\n  ref: \"peakChart\",\n  \"class\": \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_ArrowUp = _resolveComponent(\"ArrowUp\");\n  var _component_el_icon = _resolveComponent(\"el-icon\");\n  var _component_ArrowDown = _resolveComponent(\"ArrowDown\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_col = _resolveComponent(\"el-col\");\n  var _component_el_row = _resolveComponent(\"el-row\");\n  var _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  var _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" KPI指标卡片 \"), _createVNode(_component_el_row, {\n    gutter: 20,\n    \"class\": \"kpi-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.kpiData, function (kpi, index) {\n        return _openBlock(), _createBlock(_component_el_col, {\n          span: 4,\n          key: index\n        }, {\n          \"default\": _withCtx(function () {\n            return [_createVNode(_component_el_card, {\n              \"class\": \"kpi-card\"\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(kpi.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, _toDisplayString(kpi.value) + _toDisplayString(kpi.unit), 1 /* TEXT */), _createElementVNode(\"div\", {\n                  \"class\": _normalizeClass([\"kpi-change\", kpi.trend])\n                }, [kpi.trend === 'up' ? (_openBlock(), _createBlock(_component_el_icon, {\n                  key: 0\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_ArrowUp)];\n                  }),\n                  _: 1 /* STABLE */\n                })) : (_openBlock(), _createBlock(_component_el_icon, {\n                  key: 1\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_ArrowDown)];\n                  }),\n                  _: 1 /* STABLE */\n                })), _createTextVNode(\" \" + _toDisplayString(kpi.change) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 分析图表区域 \"), _createVNode(_component_el_card, {\n    \"class\": \"chart-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h3\", null, _toDisplayString($data.currentChartTitle), 1 /* TEXT */), _createVNode(_component_el_radio_group, {\n        modelValue: $data.currentChart,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.currentChart = $event;\n        }),\n        onChange: $options.handleChartChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_radio_button, {\n            value: 'efficiency'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[1] || (_cache[1] = [_createTextVNode(\"充电效率趋势\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [1]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'consumption'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[2] || (_cache[2] = [_createTextVNode(\"能耗分布\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [2]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'utilization'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[3] || (_cache[3] = [_createTextVNode(\"充电站利用率\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [3]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'robot'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[4] || (_cache[4] = [_createTextVNode(\"机器人充电分析\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [4]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'peak'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[5] || (_cache[5] = [_createTextVNode(\"充电高峰期\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [5]\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 不同图表的容器 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'efficiency']]), _withDirectives(_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'consumption']]), _withDirectives(_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'utilization']]), _withDirectives(_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'robot']]), _withDirectives(_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'peak']])])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_el_row","gutter","_withCtx","_Fragment","_renderList","$data","kpiData","kpi","index","_createBlock","_component_el_col","span","key","_component_el_card","_createElementVNode","_hoisted_2","_toDisplayString","title","_hoisted_3","value","unit","_normalizeClass","trend","_component_el_icon","_component_ArrowUp","_","_component_ArrowDown","_createTextVNode","change","_hoisted_4","currentChartTitle","_component_el_radio_group","modelValue","currentChart","_cache","$event","onChange","$options","handleChartChange","_component_el_radio_button","__","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\EnergyEfficiency.vue"],"sourcesContent":["<template>\n  <div class=\"energy-efficiency-analysis\">\n    <!-- KPI指标卡片 -->\n    <el-row :gutter=\"20\" class=\"kpi-container\">\n      <el-col :span=\"4\" v-for=\"(kpi, index) in kpiData\" :key=\"index\">\n        <el-card class=\"kpi-card\">\n          <div class=\"kpi-title\">{{ kpi.title }}</div>\n          <div class=\"kpi-value\">{{ kpi.value }}{{ kpi.unit }}</div>\n          <div class=\"kpi-change\" :class=\"kpi.trend\">\n            <el-icon v-if=\"kpi.trend === 'up'\"><ArrowUp /></el-icon>\n            <el-icon v-else><ArrowDown /></el-icon>\n            {{ kpi.change }}%\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 分析图表区域 -->\n    <el-card class=\"chart-container\">\n      <div class=\"chart-header\">\n        <h3>{{ currentChartTitle }}</h3>\n        <el-radio-group v-model=\"currentChart\" @change=\"handleChartChange\">\n          <el-radio-button :value=\"'efficiency'\">充电效率趋势</el-radio-button>\n          <el-radio-button :value=\"'consumption'\">能耗分布</el-radio-button>\n          <el-radio-button :value=\"'utilization'\">充电站利用率</el-radio-button>\n          <el-radio-button :value=\"'robot'\">机器人充电分析</el-radio-button>\n          <el-radio-button :value=\"'peak'\">充电高峰期</el-radio-button>\n        </el-radio-group>\n      </div>\n      <div class=\"chart-content\">\n        <!-- 不同图表的容器 -->\n        <div v-show=\"currentChart === 'efficiency'\" class=\"chart-item\">\n          <div ref=\"efficiencyChart\" class=\"chart\"></div>\n        </div>\n        <div v-show=\"currentChart === 'consumption'\" class=\"chart-item\">\n          <div ref=\"consumptionChart\" class=\"chart\"></div>\n        </div>\n        <div v-show=\"currentChart === 'utilization'\" class=\"chart-item\">\n          <div ref=\"utilizationChart\" class=\"chart\"></div>\n        </div>\n        <div v-show=\"currentChart === 'robot'\" class=\"chart-item\">\n          <div ref=\"robotChart\" class=\"chart\"></div>\n        </div>\n        <div v-show=\"currentChart === 'peak'\" class=\"chart-item\">\n          <div ref=\"peakChart\" class=\"chart\"></div>\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\nimport energyEfficiencyApi from '@/api/energyEfficiency';\nimport { formatDateTime, calculateDuration } from '@/utils/dateTime';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\n\nexport default {\n  name: 'EnergyEfficiencyAnalysis',\n  components: {\n    ArrowUp,\n    ArrowDown\n  },\n  data() {\n    return {\n      // 固定的默认筛选条件（不再显示在UI上）\n      dateRange: [new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000), new Date()],\n      selectedStations: [],\n      selectedRobots: [],\n      \n      // 数据列表\n      stations: [],\n      robots: [],\n      \n      // 图表相关\n      currentChart: 'efficiency',\n      currentChartTitle: '充电效率趋势分析',\n      charts: {\n        efficiency: null,\n        consumption: null,\n        utilization: null,\n        robot: null,\n        peak: null\n      },\n      \n      // KPI数据\n      kpiData: [\n        { title: '平均充电效率', value: 0, unit: '%', change: 0, trend: 'up' },\n        { title: '总能耗', value: 0, unit: 'kWh', change: 0, trend: 'up' },\n        { title: '充电器利用率', value: 0, unit: '%', change: 0, trend: 'up' },\n        { title: '平均等待时间', value: 0, unit: 'min', change: 0, trend: 'down' },\n        { title: '充电成功率', value: 0, unit: '%', change: 0, trend: 'up' },\n        { title: '总充电次数', value: 0, unit: '次', change: 0, trend: 'up' }\n      ]\n    };\n  },\n  \n  mounted() {\n    this.initData();\n  },\n  \n  methods: {\n    async initData() {\n      try {\n        // 获取充电站列表\n        const stationsResponse = await energyEfficiencyApi.getStations();\n        this.stations = stationsResponse.data;\n        \n        // 获取机器人列表\n        const robotsResponse = await energyEfficiencyApi.getRobots();\n        this.robots = robotsResponse.data;\n        \n        // 获取初始数据\n        this.fetchKpiData();\n        this.fetchChartData();\n      } catch (error) {\n        console.error('初始化数据失败:', error);\n        this.$message.error('加载数据失败，请重试');\n      }\n    },\n    \n    // 刷新所有数据\n    refreshData() {\n      this.fetchKpiData();\n      this.fetchChartData();\n    },\n    \n    // 获取KPI数据\n    async fetchKpiData() {\n      try {\n        const params = this.getFilterParams();\n        const response = await energyEfficiencyApi.getKpiData(params);\n        \n        this.kpiData = [\n          { \n            title: '平均充电效率', \n            value: response.data.avgEfficiency.toFixed(2), \n            unit: '%', \n            change: response.data.efficiencyChange.toFixed(2), \n            trend: response.data.efficiencyChange >= 0 ? 'up' : 'down' \n          },\n          { \n            title: '总能耗', \n            value: response.data.totalEnergy.toFixed(2), \n            unit: 'kWh', \n            change: response.data.energyChange.toFixed(2), \n            trend: response.data.energyChange >= 0 ? 'up' : 'down' \n          },\n          { \n            title: '充电器利用率', \n            value: response.data.utilization.toFixed(2), \n            unit: '%', \n            change: response.data.utilizationChange.toFixed(2), \n            trend: response.data.utilizationChange >= 0 ? 'up' : 'down' \n          },\n          { \n            title: '平均等待时间', \n            value: response.data.avgWaitTime.toFixed(2), \n            unit: 'min', \n            change: response.data.waitTimeChange.toFixed(2), \n            trend: response.data.waitTimeChange >= 0 ? 'up' : 'down' \n          },\n          { \n            title: '充电成功率', \n            value: response.data.successRate.toFixed(2), \n            unit: '%', \n            change: response.data.successRateChange.toFixed(2), \n            trend: response.data.successRateChange >= 0 ? 'up' : 'down' \n          },\n          { \n            title: '总充电次数', \n            value: response.data.totalOrders || 0, \n            unit: '次', \n            change: response.data.ordersChange || 0, \n            trend: (response.data.ordersChange || 0) >= 0 ? 'up' : 'down' \n          }\n        ];\n      } catch (error) {\n        console.error('获取KPI数据失败:', error);\n        this.$message.error('获取KPI数据失败');\n      }\n    },\n    \n    // 获取图表数据并渲染\n    async fetchChartData() {\n      try {\n        const params = this.getFilterParams();\n        \n        // 根据当前选择的图表类型获取数据\n        switch (this.currentChart) {\n          case 'efficiency':\n            await this.renderEfficiencyChart(params);\n            break;\n          case 'consumption':\n            await this.renderConsumptionChart(params);\n            break;\n          case 'utilization':\n            await this.renderUtilizationChart(params);\n            break;\n          case 'robot':\n            await this.renderRobotChart(params);\n            break;\n          case 'peak':\n            await this.renderPeakChart(params);\n            break;\n        }\n      } catch (error) {\n        console.error('获取图表数据失败:', error);\n        this.$message.error('获取图表数据失败');\n      }\n    },\n    \n    // 充电效率趋势图\n    async renderEfficiencyChart(params) {\n      const response = await energyEfficiencyApi.getEfficiencyTrend(params);\n      \n      if (!this.charts.efficiency) {\n        this.charts.efficiency = echarts.init(this.$refs.efficiencyChart);\n      }\n      \n      const option = {\n        title: {\n          text: '充电效率趋势分析',\n          left: 'center',\n          top: '10px'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: response.data.stations.map(station => station.name),\n          selected: response.data.stations.reduce((acc, station) => {\n            acc[station.name] = true;\n            return acc;\n          }, {}),\n          top: '40px',\n          type: 'scroll',\n          orient: 'horizontal',\n          selectedMode: false\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          top: '100px',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: response.data.timeline\n        },\n        yAxis: {\n          type: 'value',\n          name: '充电效率 (%)',\n          min: 50,\n          max: 100\n        },\n        series: response.data.stations.map(station => ({\n          name: station.name,\n          type: 'line',\n          data: station.efficiencyData,\n          smooth: true\n        }))\n      };\n      \n      this.charts.efficiency.setOption(option);\n      \n      // 取消图表的点击事件\n      this.charts.efficiency.off('click');\n    },\n    \n    // 能耗分布热力图\n    async renderConsumptionChart(params) {\n      try {\n        console.log('获取能耗分布数据，参数:', params);\n        const response = await energyEfficiencyApi.getEnergyConsumptionDistribution(params);\n        console.log('能耗分布数据响应:', response.data);\n        \n        // 确保DOM元素存在\n        if (!this.$refs.consumptionChart) {\n          console.error('热力图DOM元素不存在');\n          return;\n        }\n        \n        // 检查返回的数据\n        if (!response.data || !response.data.days || !response.data.data || response.data.days.length === 0) {\n          console.error('能耗分布数据异常:', response.data);\n          return;\n        }\n        \n        console.log('能耗分布数据:', response.data.data);\n        \n        // 销毁旧的图表实例\n        if (this.charts.consumption) {\n          this.charts.consumption.dispose();\n        }\n        \n        // 设置明确的宽高\n        this.$refs.consumptionChart.style.width = '100%';\n        this.$refs.consumptionChart.style.height = '500px';\n        \n        // 重新创建图表实例\n        this.charts.consumption = echarts.init(this.$refs.consumptionChart);\n        \n        // 直接使用后端返回的日期作为Y轴\n        const days = response.data.days;\n        \n        // 提取所有小时作为X轴（0-23）\n        const hours = [];\n        for (let i = 0; i < 24; i++) {\n          hours.push(i.toString());\n        }\n        \n        // 将API返回的数据转换为ECharts需要的格式 [x索引, y索引, 值]\n        const formattedData = [];\n        \n        response.data.data.forEach(item => {\n          if (Array.isArray(item) && item.length === 3) {\n            const day = item[0];\n            const hour = parseInt(item[1]);\n            const value = parseFloat(item[2] || 0);\n            \n            // 确保值是有效的数字\n            if (!isNaN(value) && hour >= 0 && hour < 24) {\n              // 找到日期在Y轴中的索引\n              const dayIndex = days.indexOf(day);\n              \n              // 只有当日期在Y轴中存在时才添加数据点\n              if (dayIndex !== -1) {\n                formattedData.push([hour, dayIndex, value]);\n              }\n            }\n          }\n        });\n        \n        console.log('格式化后的数据点数:', formattedData.length);\n        \n        // 使用简单的配置\n        const option = {\n          title: {\n            text: '能耗分布热力图',\n            left: 'center'\n          },\n          tooltip: {\n            position: 'top',\n            formatter: function (params) {\n              const hour = params.data[0];\n              const day = days[params.data[1]];\n              const value = params.data[2];\n              return `${hour}:00 - ${(parseInt(hour) + 1) % 24}:00<br>日期: ${day}<br>能耗: ${value.toFixed(2)} kWh`;\n            }\n          },\n          grid: {\n            height: '70%',\n            top: '60px',\n            left: '80px',\n            right: '30px',\n            containLabel: true\n          },\n          xAxis: {\n            type: 'category',\n            data: hours,\n            axisLabel: {\n              formatter: '{value}:00',\n              interval: function (index, value) {\n                // 每2小时显示一个标签\n                return index % 2 === 0;\n              }\n            }\n          },\n          yAxis: {\n            type: 'category',\n            data: days,\n            axisLabel: {\n              formatter: function (value) {\n                const parts = value.split('-');\n                return parts[1] + '-' + parts[2]; // 只显示月-日\n              }\n            }\n          },\n          visualMap: {\n            min: 0,\n            max: response.data.maxValue || 120,\n            calculable: false,\n            orient: 'horizontal',\n            left: 'center',\n            bottom: '5%',\n            inRange: {\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n            }\n          },\n          series: [\n            {\n              name: '能耗 (kWh)',\n              type: 'heatmap',\n              data: formattedData,\n              emphasis: {\n                itemStyle: {\n                  shadowBlur: 10,\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\n                }\n              }\n            }\n          ]\n        };\n        \n        // 应用配置并渲染\n        this.charts.consumption.setOption(option);\n        console.log('热力图渲染成功');\n        \n        // 确保图表正确渲染\n        window.addEventListener('resize', () => {\n          if (this.charts.consumption) {\n            this.charts.consumption.resize();\n          }\n        });\n      } catch (error) {\n        console.error('渲染能耗分布热力图失败:', error);\n        \n        // 尝试显示错误信息\n        if (this.$refs.consumptionChart && this.charts.consumption) {\n          this.charts.consumption.dispose();\n          this.charts.consumption = echarts.init(this.$refs.consumptionChart);\n          this.charts.consumption.setOption({\n            title: {\n              text: '能耗分布热力图 (加载失败)',\n              textStyle: { color: '#ff0000' },\n              left: 'center'\n            }\n          });\n        }\n      }\n    },\n    \n    // 充电站利用率对比\n    async renderUtilizationChart(params) {\n      const response = await energyEfficiencyApi.getStationUtilization(params);\n      \n      if (!this.charts.utilization) {\n        this.charts.utilization = echarts.init(this.$refs.utilizationChart);\n      }\n      \n      // 数据处理：确保所有数据都是正数，且单位一致\n      const processedData = response.data.map(item => {\n        return {\n          stationName: item.stationName,\n          busyHours: Math.abs(parseFloat(item.busyHours || 0)),\n          idleHours: Math.abs(parseFloat(item.idleHours || 0)),\n          maintenanceHours: Math.abs(parseFloat(item.maintenanceHours || 0)),\n          errorHours: Math.abs(parseFloat(item.errorHours || 0))\n        };\n      });\n      \n      // 验证数据总和是否合理，如果总和异常大，则进行归一化处理\n      processedData.forEach(item => {\n        const total = item.busyHours + item.idleHours + item.maintenanceHours + item.errorHours;\n        // 如果总时间超过48小时（允许一定误差），则认为数据异常，需要归一化\n        if (total > 48) {\n          const factor = 24 / total;\n          item.busyHours *= factor;\n          item.idleHours *= factor;\n          item.maintenanceHours *= factor;\n          item.errorHours *= factor;\n        }\n      });\n      \n      console.log('处理后的充电站利用率数据:', processedData);\n      \n      const option = {\n        title: {\n          text: '充电站利用率对比'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          },\n          formatter: function(params) {\n            let tooltip = params[0].name + '<br/>';\n            let total = 0;\n            \n            params.forEach(param => {\n              tooltip += param.seriesName + ': ' + param.value.toFixed(2) + ' 小时<br/>';\n              total += param.value;\n            });\n            \n            tooltip += '<br/>总计: ' + total.toFixed(2) + ' 小时';\n            return tooltip;\n          }\n        },\n        legend: {\n          data: ['忙碌时间', '空闲时间', '维护时间', '故障时间'],\n          selectedMode: false\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value',\n          name: '小时',\n          min: 0,\n          max: 24,\n          axisLabel: {\n            formatter: '{value} h'\n          }\n        },\n        yAxis: {\n          type: 'category',\n          data: processedData.map(item => item.stationName)\n        },\n        series: [\n          {\n            name: '忙碌时间',\n            type: 'bar',\n            stack: 'total',\n            label: {\n              show: true,\n              formatter: '{c} h'\n            },\n            emphasis: {\n              focus: 'series'\n            },\n            data: processedData.map(item => parseFloat(item.busyHours.toFixed(2)))\n          },\n          {\n            name: '空闲时间',\n            type: 'bar',\n            stack: 'total',\n            label: {\n              show: true,\n              formatter: '{c} h'\n            },\n            emphasis: {\n              focus: 'series'\n            },\n            data: processedData.map(item => parseFloat(item.idleHours.toFixed(2)))\n          },\n          {\n            name: '维护时间',\n            type: 'bar',\n            stack: 'total',\n            label: {\n              show: true,\n              formatter: '{c} h'\n            },\n            emphasis: {\n              focus: 'series'\n            },\n            data: processedData.map(item => parseFloat(item.maintenanceHours.toFixed(2)))\n          },\n          {\n            name: '故障时间',\n            type: 'bar',\n            stack: 'total',\n            label: {\n              show: true,\n              formatter: '{c} h'\n            },\n            emphasis: {\n              focus: 'series'\n            },\n            data: processedData.map(item => parseFloat(item.errorHours.toFixed(2)))\n          }\n        ]\n      };\n      \n      this.charts.utilization.setOption(option);\n      \n      // 取消图表的点击事件\n      this.charts.utilization.off('click');\n    },\n    \n    // 机器人充电行为分析\n    async renderRobotChart(params) {\n      const response = await energyEfficiencyApi.getRobotChargingBehavior(params);\n      \n      if (!this.charts.robot) {\n        this.charts.robot = echarts.init(this.$refs.robotChart);\n      }\n      \n      const option = {\n        title: {\n          text: '机器人充电行为分析'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['充电次数', '平均充电时长', '平均等待时间'],\n          selectedMode: false\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [\n          {\n            type: 'category',\n            data: response.data.robots.map(robot => robot.name),\n            axisPointer: {\n              type: 'shadow'\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            name: '次数',\n            min: 0,\n            axisLabel: {\n              formatter: '{value}'\n            }\n          },\n          {\n            type: 'value',\n            name: '时间 (分钟)',\n            min: 0,\n            axisLabel: {\n              formatter: '{value} min'\n            }\n          }\n        ],\n        series: [\n          {\n            name: '充电次数',\n            type: 'bar',\n            data: response.data.robots.map(robot => robot.chargingCount)\n          },\n          {\n            name: '平均充电时长',\n            type: 'line',\n            yAxisIndex: 1,\n            data: response.data.robots.map(robot => robot.avgChargingDuration)\n          },\n          {\n            name: '平均等待时间',\n            type: 'line',\n            yAxisIndex: 1,\n            data: response.data.robots.map(robot => robot.avgWaitingTime)\n          }\n        ]\n      };\n      \n      this.charts.robot.setOption(option);\n      \n      // 取消图表的点击事件\n      this.charts.robot.off('click');\n    },\n    \n    // 充电高峰期分析\n    async renderPeakChart(params) {\n      const response = await energyEfficiencyApi.getChargingPeakAnalysis(params);\n      \n      if (!this.charts.peak) {\n        this.charts.peak = echarts.init(this.$refs.peakChart);\n      }\n      \n      const option = {\n        title: {\n          text: '充电高峰期分析'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        legend: {\n          data: ['充电请求数', '平均等待时间'],\n          selectedMode: false\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [\n          {\n            type: 'category',\n            data: ['0-2', '2-4', '4-6', '6-8', '8-10', '10-12', '12-14', '14-16', '16-18', '18-20', '20-22', '22-24'],\n            axisLabel: {\n              formatter: '{value}时'\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            name: '请求数',\n            min: 0,\n            axisLabel: {\n              formatter: '{value}'\n            }\n          },\n          {\n            type: 'value',\n            name: '等待时间 (分钟)',\n            min: 0,\n            axisLabel: {\n              formatter: '{value} min'\n            }\n          }\n        ],\n        series: [\n          {\n            name: '充电请求数',\n            type: 'bar',\n            data: response.data.requestCounts\n          },\n          {\n            name: '平均等待时间',\n            type: 'line',\n            yAxisIndex: 1,\n            data: response.data.avgWaitingTimes\n          }\n        ]\n      };\n      \n      this.charts.peak.setOption(option);\n      \n      // 取消图表的点击事件\n      this.charts.peak.off('click');\n    },\n    \n    // 获取筛选参数\n    getFilterParams() {\n      return {\n        startDate: this.dateRange[0] ? this.dateRange[0].toISOString() : null,\n        endDate: this.dateRange[1] ? this.dateRange[1].toISOString() : null,\n        stationIds: this.selectedStations.length > 0 ? this.selectedStations : null,\n        robotIds: this.selectedRobots.length > 0 ? this.selectedRobots : null\n      };\n    },\n    \n    // 处理图表切换\n    handleChartChange(chartType) {\n      const titles = {\n        efficiency: '充电效率趋势分析',\n        consumption: '能耗分布热力图',\n        utilization: '充电站利用率对比',\n        robot: '机器人充电行为分析',\n        peak: '充电高峰期分析'\n      };\n      \n      this.currentChartTitle = titles[chartType];\n      this.fetchChartData();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.energy-efficiency-analysis {\n  padding: 20px;\n}\n\n.kpi-container {\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  text-align: center;\n  padding: 10px;\n}\n\n.kpi-title {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 5px;\n}\n\n.kpi-value {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.kpi-change {\n  font-size: 12px;\n}\n\n.kpi-change.up {\n  color: #67c23a;\n}\n\n.kpi-change.down {\n  color: #f56c6c;\n}\n\n.chart-container {\n  margin-bottom: 20px;\n}\n\n.chart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.chart-content {\n  position: relative;\n}\n\n.chart-item {\n  position: relative;\n}\n\n.chart {\n  height: 400px;\n  width: 100%;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}