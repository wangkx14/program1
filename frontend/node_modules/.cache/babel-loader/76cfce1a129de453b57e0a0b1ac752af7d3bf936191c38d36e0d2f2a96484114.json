{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"energy-efficiency-analysis\"\n};\nvar _hoisted_2 = {\n  \"class\": \"kpi-title\"\n};\nvar _hoisted_3 = {\n  \"class\": \"kpi-value\"\n};\nvar _hoisted_4 = {\n  \"class\": \"chart-header\"\n};\nvar _hoisted_5 = {\n  \"class\": \"chart-content\"\n};\nvar _hoisted_6 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_7 = {\n  ref: \"efficiencyChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_8 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_9 = {\n  ref: \"consumptionChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_10 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_11 = {\n  ref: \"utilizationChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_12 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_13 = {\n  ref: \"robotChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_14 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_15 = {\n  ref: \"peakChart\",\n  \"class\": \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_ArrowUp = _resolveComponent(\"ArrowUp\");\n  var _component_el_icon = _resolveComponent(\"el-icon\");\n  var _component_ArrowDown = _resolveComponent(\"ArrowDown\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_col = _resolveComponent(\"el-col\");\n  var _component_el_row = _resolveComponent(\"el-row\");\n  var _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  var _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" KPI指标卡片 \"), _createVNode(_component_el_row, {\n    gutter: 20,\n    \"class\": \"kpi-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.kpiData, function (kpi, index) {\n        return _openBlock(), _createBlock(_component_el_col, {\n          span: 4,\n          key: index\n        }, {\n          \"default\": _withCtx(function () {\n            return [_createVNode(_component_el_card, {\n              \"class\": \"kpi-card\"\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(kpi.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, _toDisplayString(kpi.value) + _toDisplayString(kpi.unit), 1 /* TEXT */), _createElementVNode(\"div\", {\n                  \"class\": _normalizeClass([\"kpi-change\", kpi.trend])\n                }, [kpi.trend === 'up' ? (_openBlock(), _createBlock(_component_el_icon, {\n                  key: 0\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_ArrowUp)];\n                  }),\n                  _: 1 /* STABLE */\n                })) : (_openBlock(), _createBlock(_component_el_icon, {\n                  key: 1\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_ArrowDown)];\n                  }),\n                  _: 1 /* STABLE */\n                })), _createTextVNode(\" \" + _toDisplayString(kpi.change) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 分析图表区域 \"), _createVNode(_component_el_card, {\n    \"class\": \"chart-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h3\", null, _toDisplayString($data.currentChartTitle), 1 /* TEXT */), _createVNode(_component_el_radio_group, {\n        modelValue: $data.currentChart,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.currentChart = $event;\n        }),\n        onChange: $options.handleChartChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_radio_button, {\n            value: 'efficiency'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[1] || (_cache[1] = [_createTextVNode(\"充电效率趋势\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [1]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'consumption'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[2] || (_cache[2] = [_createTextVNode(\"能耗分布\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [2]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'utilization'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[3] || (_cache[3] = [_createTextVNode(\"充电站利用率\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [3]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'robot'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[4] || (_cache[4] = [_createTextVNode(\"机器人充电分析\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [4]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'peak'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[5] || (_cache[5] = [_createTextVNode(\"充电高峰期\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [5]\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 不同图表的容器 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'efficiency']]), _withDirectives(_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'consumption']]), _withDirectives(_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'utilization']]), _withDirectives(_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'robot']]), _withDirectives(_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'peak']])])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_el_row","gutter","_withCtx","_Fragment","_renderList","$data","kpiData","kpi","index","_createBlock","_component_el_col","span","key","_component_el_card","_createElementVNode","_hoisted_2","_toDisplayString","title","_hoisted_3","value","unit","_normalizeClass","trend","_component_el_icon","_component_ArrowUp","_","_component_ArrowDown","_createTextVNode","change","_hoisted_4","currentChartTitle","_component_el_radio_group","modelValue","currentChart","_cache","$event","onChange","$options","handleChartChange","_component_el_radio_button","__","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\EnergyEfficiency.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-efficiency-analysis\">\r\n    <!-- KPI指标卡片 -->\r\n    <el-row :gutter=\"20\" class=\"kpi-container\">\r\n      <el-col :span=\"4\" v-for=\"(kpi, index) in kpiData\" :key=\"index\">\r\n        <el-card class=\"kpi-card\">\r\n          <div class=\"kpi-title\">{{ kpi.title }}</div>\r\n          <div class=\"kpi-value\">{{ kpi.value }}{{ kpi.unit }}</div>\r\n          <div class=\"kpi-change\" :class=\"kpi.trend\">\r\n            <el-icon v-if=\"kpi.trend === 'up'\"><ArrowUp /></el-icon>\r\n            <el-icon v-else><ArrowDown /></el-icon>\r\n            {{ kpi.change }}%\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 分析图表区域 -->\r\n    <el-card class=\"chart-container\">\r\n      <div class=\"chart-header\">\r\n        <h3>{{ currentChartTitle }}</h3>\r\n        <el-radio-group v-model=\"currentChart\" @change=\"handleChartChange\">\r\n          <el-radio-button :value=\"'efficiency'\">充电效率趋势</el-radio-button>\r\n          <el-radio-button :value=\"'consumption'\">能耗分布</el-radio-button>\r\n          <el-radio-button :value=\"'utilization'\">充电站利用率</el-radio-button>\r\n          <el-radio-button :value=\"'robot'\">机器人充电分析</el-radio-button>\r\n          <el-radio-button :value=\"'peak'\">充电高峰期</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"chart-content\">\r\n        <!-- 不同图表的容器 -->\r\n        <div v-show=\"currentChart === 'efficiency'\" class=\"chart-item\">\r\n          <div ref=\"efficiencyChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'consumption'\" class=\"chart-item\">\r\n          <div ref=\"consumptionChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'utilization'\" class=\"chart-item\">\r\n          <div ref=\"utilizationChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'robot'\" class=\"chart-item\">\r\n          <div ref=\"robotChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'peak'\" class=\"chart-item\">\r\n          <div ref=\"peakChart\" class=\"chart\"></div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport energyEfficiencyApi from '@/api/energyEfficiency';\r\nimport { formatDateTime, calculateDuration } from '@/utils/dateTime';\r\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\r\n\r\nexport default {\r\n  name: 'EnergyEfficiencyAnalysis',\r\n  components: {\r\n    ArrowUp,\r\n    ArrowDown\r\n  },\r\n  data() {\r\n    return {\r\n      // 固定的默认筛选条件（不再显示在UI上）\r\n      dateRange: [new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000), new Date()],\r\n      selectedStations: [],\r\n      selectedRobots: [],\r\n      \r\n      // 数据列表\r\n      stations: [],\r\n      robots: [],\r\n      \r\n      // 图表相关\r\n      currentChart: 'efficiency',\r\n      currentChartTitle: '充电效率趋势分析',\r\n      charts: {\r\n        efficiency: null,\r\n        consumption: null,\r\n        utilization: null,\r\n        robot: null,\r\n        peak: null\r\n      },\r\n      \r\n      // KPI数据\r\n      kpiData: [\r\n        { title: '平均充电效率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总能耗', value: 0, unit: 'kWh', change: 0, trend: 'up' },\r\n        { title: '充电器利用率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '平均等待时间', value: 0, unit: 'min', change: 0, trend: 'down' },\r\n        { title: '充电成功率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总充电次数', value: 0, unit: '次', change: 0, trend: 'up' }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    this.initData();\r\n  },\r\n  \r\n  methods: {\r\n    async initData() {\r\n      try {\r\n        // 获取充电站列表\r\n        const stationsResponse = await energyEfficiencyApi.getStations();\r\n        this.stations = stationsResponse.data;\r\n        \r\n        // 获取机器人列表\r\n        const robotsResponse = await energyEfficiencyApi.getRobots();\r\n        this.robots = robotsResponse.data;\r\n        \r\n        // 获取初始数据\r\n        this.fetchKpiData();\r\n        this.fetchChartData();\r\n      } catch (error) {\r\n        console.error('初始化数据失败:', error);\r\n        this.$message.error('加载数据失败，请重试');\r\n      }\r\n    },\r\n    \r\n    // 刷新所有数据\r\n    refreshData() {\r\n      this.fetchKpiData();\r\n      this.fetchChartData();\r\n    },\r\n    \r\n    // 获取KPI数据\r\n    async fetchKpiData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        const response = await energyEfficiencyApi.getKpiData(params);\r\n        \r\n        this.kpiData = [\r\n          { \r\n            title: '平均充电效率', \r\n            value: response.data.avgEfficiency.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.efficiencyChange.toFixed(2), \r\n            trend: response.data.efficiencyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总能耗', \r\n            value: response.data.totalEnergy.toFixed(2), \r\n            unit: 'kWh', \r\n            change: response.data.energyChange.toFixed(2), \r\n            trend: response.data.energyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电器利用率', \r\n            value: response.data.utilization.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.utilizationChange.toFixed(2), \r\n            trend: response.data.utilizationChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '平均等待时间', \r\n            value: response.data.avgWaitTime.toFixed(2), \r\n            unit: 'min', \r\n            change: response.data.waitTimeChange.toFixed(2), \r\n            trend: response.data.waitTimeChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电成功率', \r\n            value: response.data.successRate.toFixed(2), \r\n            unit: '%', \r\n            change: response.data.successRateChange.toFixed(2), \r\n            trend: response.data.successRateChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总充电次数', \r\n            value: response.data.totalOrders || 0, \r\n            unit: '次', \r\n            change: response.data.ordersChange || 0, \r\n            trend: (response.data.ordersChange || 0) >= 0 ? 'up' : 'down' \r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.error('获取KPI数据失败:', error);\r\n        this.$message.error('获取KPI数据失败');\r\n      }\r\n    },\r\n    \r\n    // 获取图表数据并渲染\r\n    async fetchChartData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        \r\n        // 根据当前选择的图表类型获取数据\r\n        switch (this.currentChart) {\r\n          case 'efficiency':\r\n            await this.renderEfficiencyChart(params);\r\n            break;\r\n          case 'consumption':\r\n            await this.renderConsumptionChart(params);\r\n            break;\r\n          case 'utilization':\r\n            await this.renderUtilizationChart(params);\r\n            break;\r\n          case 'robot':\r\n            await this.renderRobotChart(params);\r\n            break;\r\n          case 'peak':\r\n            await this.renderPeakChart(params);\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取图表数据失败:', error);\r\n        this.$message.error('获取图表数据失败');\r\n      }\r\n    },\r\n    \r\n    // 充电效率趋势图\r\n    async renderEfficiencyChart(params) {\r\n      const response = await energyEfficiencyApi.getEfficiencyTrend(params);\r\n      \r\n      if (!this.charts.efficiency) {\r\n        this.charts.efficiency = echarts.init(this.$refs.efficiencyChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电效率趋势分析',\r\n          left: 'center',\r\n          top: '10px'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: response.data.stations.map(station => station.name),\r\n          selected: response.data.stations.reduce((acc, station) => {\r\n            acc[station.name] = true;\r\n            return acc;\r\n          }, {}),\r\n          top: '40px',\r\n          type: 'scroll',\r\n          orient: 'horizontal',\r\n          selectedMode: false\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          top: '100px',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: response.data.timeline\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '充电效率 (%)',\r\n          min: 50,\r\n          max: 100\r\n        },\r\n        series: response.data.stations.map(station => ({\r\n          name: station.name,\r\n          type: 'line',\r\n          data: station.efficiencyData,\r\n          smooth: true\r\n        }))\r\n      };\r\n      \r\n      this.charts.efficiency.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.efficiency.off('click');\r\n    },\r\n    \r\n    // 能耗分布热力图\r\n    async renderConsumptionChart(params) {\r\n      try {\r\n        console.log('获取能耗分布数据，参数:', params);\r\n        const response = await energyEfficiencyApi.getEnergyConsumptionDistribution(params);\r\n        console.log('能耗分布数据响应:', response.data);\r\n        \r\n        if (!this.charts.consumption) {\r\n          this.charts.consumption = echarts.init(this.$refs.consumptionChart);\r\n        }\r\n        \r\n        // 检查返回的数据\r\n        if (!response.data || !response.data.days || !response.data.data || response.data.days.length === 0) {\r\n          console.error('能耗分布数据异常:', response.data);\r\n          // 显示一个空的图表\r\n          this.charts.consumption.setOption({\r\n            title: {\r\n              text: '能耗分布热力图 (无数据)',\r\n              left: 'center',\r\n              top: '10px'\r\n            },\r\n            grid: {\r\n              height: '70%',\r\n              top: '10%'\r\n            }\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 为了保持15*8=120个点位，我们需要将24小时合并为15个时间段\r\n        // 每个时间段包含1.6小时，我们向上取整为每个时间段包含2小时，最后一个时间段少一些\r\n        const timeSlots = [\r\n          '00-01', '02-03', '04-05', '06-07', '08-09', \r\n          '10-11', '12-13', '14-15', '16-17', '18-19', \r\n          '20-21', '22-23'\r\n        ];\r\n        \r\n        const days = response.data.days;\r\n        \r\n        console.log('天数:', days.length, '时间段:', timeSlots.length, '预期点位数:', days.length * timeSlots.length);\r\n        \r\n        // 使用固定的最大值\r\n        const fixedMaxValue = 120;\r\n        \r\n        // 创建日期和时间段的索引映射\r\n        const dayIndexMap = {};\r\n        days.forEach((day, index) => {\r\n          dayIndexMap[day] = index;\r\n        });\r\n        \r\n        // 将原始数据按时间段和日期进行分组和聚合\r\n        const aggregatedData = {};\r\n        \r\n        // 初始化聚合数据结构，确保每个时间段和日期的组合都有一个初始值\r\n        days.forEach(day => {\r\n          if (!aggregatedData[day]) {\r\n            aggregatedData[day] = {};\r\n          }\r\n          \r\n          for (let slotIndex = 0; slotIndex < timeSlots.length; slotIndex++) {\r\n            const startHour = slotIndex * 2;\r\n            const endHour = Math.min(startHour + 1, 23);\r\n            aggregatedData[day][`${startHour}-${endHour}`] = {\r\n              sum: 0,\r\n              count: 0\r\n            };\r\n          }\r\n        });\r\n        \r\n        // 聚合数据\r\n        response.data.data.forEach(item => {\r\n          if (Array.isArray(item) && item.length === 3) {\r\n            const day = item[0];\r\n            const hour = parseInt(item[1]);\r\n            const value = parseFloat(item[2] || 0);\r\n            \r\n            if (!isNaN(value) && dayIndexMap[day] !== undefined && hour >= 0 && hour < 24) {\r\n              // 计算该小时属于哪个时间段\r\n              const slotIndex = Math.floor(hour / 2);\r\n              const startHour = slotIndex * 2;\r\n              const endHour = Math.min(startHour + 1, 23);\r\n              const timeSlot = `${startHour}-${endHour}`;\r\n              \r\n              // 累加该时间段的值和计数\r\n              if (aggregatedData[day] && aggregatedData[day][timeSlot]) {\r\n                aggregatedData[day][timeSlot].sum += value;\r\n                aggregatedData[day][timeSlot].count += 1;\r\n              }\r\n            }\r\n          }\r\n        });\r\n        \r\n        // 将聚合数据转换为ECharts需要的格式 [x索引, y索引, 值]\r\n        const formattedData = [];\r\n        \r\n        days.forEach((day, dayIndex) => {\r\n          for (let slotIndex = 0; slotIndex < timeSlots.length; slotIndex++) {\r\n            const startHour = slotIndex * 2;\r\n            const endHour = Math.min(startHour + 1, 23);\r\n            const timeSlot = `${startHour}-${endHour}`;\r\n            \r\n            // 计算该时间段的平均值\r\n            let value = 0;\r\n            if (aggregatedData[day][timeSlot].count > 0) {\r\n              value = aggregatedData[day][timeSlot].sum / aggregatedData[day][timeSlot].count;\r\n            }\r\n            \r\n            formattedData.push([slotIndex, dayIndex, value]);\r\n          }\r\n        });\r\n        \r\n        console.log('格式化后的数据点数:', formattedData.length);\r\n        console.log('格式化后的数据示例:', formattedData.slice(0, 3));\r\n        \r\n        // 添加详细调试日志\r\n        console.log('热力图数据详情:');\r\n        console.log('- X轴类别数据:', timeSlots);\r\n        console.log('- Y轴类别数据:', days);\r\n        console.log('- 第一个数据点:', formattedData[0]);\r\n        if (formattedData[0]) {\r\n          console.log('  - X索引:', formattedData[0][0], '对应值:', timeSlots[formattedData[0][0]]);\r\n          console.log('  - Y索引:', formattedData[0][1], '对应值:', days[formattedData[0][1]]);\r\n          console.log('  - 数值:', formattedData[0][2]);\r\n        }\r\n        \r\n        const option = {\r\n          animation: false,  // 禁用动画，避免渲染问题\r\n          title: {\r\n            text: '能耗分布热力图',\r\n            left: 'center',\r\n            top: '10px'\r\n          },\r\n          tooltip: {\r\n            position: 'top',\r\n            formatter: function (params) {\r\n              const slotIndex = params.data[0];\r\n              const timeSlot = timeSlots[slotIndex];\r\n              const day = days[params.data[1]];\r\n              const value = params.data[2];\r\n              return `时间段: ${timeSlot}:00<br>日期: ${day}<br>能耗: ${value.toFixed(2)} kWh`;\r\n            }\r\n          },\r\n          grid: {\r\n            height: '70%',\r\n            top: '60px',\r\n            left: '80px',\r\n            right: '30px'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: timeSlots,\r\n            splitArea: {\r\n              show: true\r\n            },\r\n            axisLabel: {\r\n              interval: 1  // 显示所有标签\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: days,\r\n            splitArea: {\r\n              show: true\r\n            }\r\n          },\r\n          visualMap: {\r\n            type: 'continuous',\r\n            min: 0,\r\n            max: fixedMaxValue,\r\n            calculable: false, // 禁用拖动调节\r\n            realtime: false,   // 禁用实时更新\r\n            orient: 'horizontal',\r\n            left: 'center',\r\n            bottom: '5%',\r\n            inRange: {\r\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\r\n            },\r\n            text: ['高', '低'],     // 两端的文本\r\n            itemWidth: 15,         // 图形的宽度\r\n            itemHeight: 120,       // 图形的高度\r\n            precision: 0           // 数据展示的小数精度\r\n          },\r\n          series: [{\r\n            name: '能耗 (kWh)',\r\n            type: 'heatmap',\r\n            data: formattedData,\r\n            label: {\r\n              show: false\r\n            },\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            }\r\n          }]\r\n        };\r\n        \r\n        // 尝试设置图表选项\r\n        try {\r\n          // 完全销毁并重新创建图表实例\r\n          if (this.charts.consumption) {\r\n            this.charts.consumption.dispose();\r\n          }\r\n          \r\n          // 确保DOM元素存在且有尺寸\r\n          if (this.$refs.consumptionChart) {\r\n            // 设置明确的宽高\r\n            this.$refs.consumptionChart.style.width = '100%';\r\n            this.$refs.consumptionChart.style.height = '400px';\r\n            \r\n            // 初始化图表\r\n            this.charts.consumption = echarts.init(this.$refs.consumptionChart);\r\n            \r\n            // 强制应用选项\r\n            this.charts.consumption.setOption(option, true);\r\n            console.log('热力图渲染成功');\r\n            \r\n            // 强制重绘\r\n            this.$nextTick(() => {\r\n              if (this.charts.consumption) {\r\n                this.charts.consumption.resize();\r\n              }\r\n            });\r\n            \r\n            // 取消图表的点击事件\r\n            this.charts.consumption.off('click');\r\n          } else {\r\n            console.error('热力图DOM元素不存在');\r\n          }\r\n        } catch (chartError) {\r\n          console.error('设置热力图选项失败:', chartError);\r\n          console.error('错误详情:', chartError.stack);\r\n          // 尝试重新创建图表实例\r\n          if (this.$refs.consumptionChart) {\r\n            if (this.charts.consumption) {\r\n              this.charts.consumption.dispose();\r\n            }\r\n            this.charts.consumption = echarts.init(this.$refs.consumptionChart);\r\n            this.charts.consumption.setOption({\r\n              title: {\r\n                text: '能耗分布热力图 (渲染失败)',\r\n                textStyle: {\r\n                  color: '#ff0000'\r\n                },\r\n                left: 'center',\r\n                top: '10px'\r\n              }\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('渲染能耗分布热力图失败:', error);\r\n        console.error('错误详情:', error.stack);\r\n        // 显示错误信息\r\n        if (this.charts.consumption) {\r\n          this.charts.consumption.setOption({\r\n            title: {\r\n              text: '能耗分布热力图 (加载失败)',\r\n              textStyle: {\r\n                color: '#ff0000'\r\n              },\r\n              left: 'center',\r\n              top: '10px'\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 充电站利用率对比\r\n    async renderUtilizationChart(params) {\r\n      const response = await energyEfficiencyApi.getStationUtilization(params);\r\n      \r\n      if (!this.charts.utilization) {\r\n        this.charts.utilization = echarts.init(this.$refs.utilizationChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电站利用率对比'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['忙碌时间', '空闲时间', '维护时间', '故障时间'],\r\n          selectedMode: false\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'value',\r\n          name: '小时',\r\n          max: 24\r\n        },\r\n        yAxis: {\r\n          type: 'category',\r\n          data: response.data.map(item => item.stationName)\r\n        },\r\n        series: [\r\n          {\r\n            name: '忙碌时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.busyHours)\r\n          },\r\n          {\r\n            name: '空闲时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.idleHours)\r\n          },\r\n          {\r\n            name: '维护时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.maintenanceHours)\r\n          },\r\n          {\r\n            name: '故障时间',\r\n            type: 'bar',\r\n            stack: 'total',\r\n            label: {\r\n              show: true\r\n            },\r\n            emphasis: {\r\n              focus: 'series'\r\n            },\r\n            data: response.data.map(item => item.errorHours)\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.utilization.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.utilization.off('click');\r\n    },\r\n    \r\n    // 机器人充电行为分析\r\n    async renderRobotChart(params) {\r\n      const response = await energyEfficiencyApi.getRobotChargingBehavior(params);\r\n      \r\n      if (!this.charts.robot) {\r\n        this.charts.robot = echarts.init(this.$refs.robotChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '机器人充电行为分析'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['充电次数', '平均充电时长', '平均等待时间'],\r\n          selectedMode: false\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: response.data.robots.map(robot => robot.name),\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '次数',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '时间 (分钟)',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value} min'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '充电次数',\r\n            type: 'bar',\r\n            data: response.data.robots.map(robot => robot.chargingCount)\r\n          },\r\n          {\r\n            name: '平均充电时长',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.robots.map(robot => robot.avgChargingDuration)\r\n          },\r\n          {\r\n            name: '平均等待时间',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.robots.map(robot => robot.avgWaitingTime)\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.robot.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.robot.off('click');\r\n    },\r\n    \r\n    // 充电高峰期分析\r\n    async renderPeakChart(params) {\r\n      const response = await energyEfficiencyApi.getChargingPeakAnalysis(params);\r\n      \r\n      if (!this.charts.peak) {\r\n        this.charts.peak = echarts.init(this.$refs.peakChart);\r\n      }\r\n      \r\n      const option = {\r\n        title: {\r\n          text: '充电高峰期分析'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'shadow'\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['充电请求数', '平均等待时间'],\r\n          selectedMode: false\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            data: ['0-2', '2-4', '4-6', '6-8', '8-10', '10-12', '12-14', '14-16', '16-18', '18-20', '20-22', '22-24'],\r\n            axisLabel: {\r\n              formatter: '{value}时'\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: '请求数',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            name: '等待时间 (分钟)',\r\n            min: 0,\r\n            axisLabel: {\r\n              formatter: '{value} min'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '充电请求数',\r\n            type: 'bar',\r\n            data: response.data.requestCounts\r\n          },\r\n          {\r\n            name: '平均等待时间',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: response.data.avgWaitingTimes\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.charts.peak.setOption(option);\r\n      \r\n      // 取消图表的点击事件\r\n      this.charts.peak.off('click');\r\n    },\r\n    \r\n    // 获取筛选参数\r\n    getFilterParams() {\r\n      return {\r\n        startDate: this.dateRange[0] ? this.dateRange[0].toISOString() : null,\r\n        endDate: this.dateRange[1] ? this.dateRange[1].toISOString() : null,\r\n        stationIds: this.selectedStations.length > 0 ? this.selectedStations : null,\r\n        robotIds: this.selectedRobots.length > 0 ? this.selectedRobots : null\r\n      };\r\n    },\r\n    \r\n    // 处理图表切换\r\n    handleChartChange(chartType) {\r\n      const titles = {\r\n        efficiency: '充电效率趋势分析',\r\n        consumption: '能耗分布热力图',\r\n        utilization: '充电站利用率对比',\r\n        robot: '机器人充电行为分析',\r\n        peak: '充电高峰期分析'\r\n      };\r\n      \r\n      this.currentChartTitle = titles[chartType];\r\n      this.fetchChartData();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-efficiency-analysis {\r\n  padding: 20px;\r\n}\r\n\r\n.kpi-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.kpi-card {\r\n  text-align: center;\r\n  padding: 10px;\r\n}\r\n\r\n.kpi-title {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.kpi-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.kpi-change {\r\n  font-size: 12px;\r\n}\r\n\r\n.kpi-change.up {\r\n  color: #67c23a;\r\n}\r\n\r\n.kpi-change.down {\r\n  color: #f56c6c;\r\n}\r\n\r\n.chart-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-content {\r\n  position: relative;\r\n}\r\n\r\n.chart-item {\r\n  position: relative;\r\n}\r\n\r\n.chart {\r\n  height: 400px;\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}