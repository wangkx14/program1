{"ast":null,"code":"import _regeneratorRuntime from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport dashboardApi from '../api/dashboard';\nexport default {\n  name: 'Dashboard',\n  data: function data() {\n    return {\n      loading: false,\n      alertsLoading: false,\n      dashboardData: {\n        stationCount: 0,\n        onlineStations: 0,\n        offlineStations: 0,\n        robotCount: 0,\n        chargingRobots: 0,\n        waitingRobots: 0,\n        todayOrders: 0,\n        orderChangeRate: 0,\n        systemStatus: '加载中...',\n        systemMessage: '正在获取系统状态...'\n      },\n      alerts: [],\n      pagination: {\n        currentPage: 1,\n        perPage: 7,\n        totalPages: 0,\n        totalItems: 0\n      },\n      refreshInterval: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n    this.fetchDashboardData();\n    this.fetchAlerts();\n\n    // 设置定时刷新 - 每60秒刷新一次数据\n    this.refreshInterval = setInterval(function () {\n      _this.fetchDashboardData();\n      _this.fetchAlerts();\n    }, 60000);\n  },\n  beforeUnmount: function beforeUnmount() {\n    // 组件销毁前清除定时器\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  },\n  methods: {\n    fetchDashboardData: function fetchDashboardData() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this2.loading = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return dashboardApi.getDashboardOverview();\n            case 4:\n              response = _context.sent;\n              _this2.dashboardData = response.data;\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('获取仪表盘数据失败:', _context.t0);\n              _this2.$message.error('获取仪表盘数据失败');\n            case 12:\n              _context.prev = 12;\n              _this2.loading = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8, 12, 15]]);\n      }))();\n    },\n    fetchAlerts: function fetchAlerts() {\n      var _arguments = arguments,\n        _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var page, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              page = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : 1;\n              _this3.alertsLoading = true;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return dashboardApi.getSystemAlerts(page, _this3.pagination.perPage);\n            case 5:\n              response = _context2.sent;\n              // 更新告警数据\n              _this3.alerts = response.data.items;\n\n              // 更新分页信息\n              _this3.pagination = {\n                currentPage: response.data.pagination.current_page,\n                perPage: response.data.pagination.per_page,\n                totalPages: response.data.pagination.total_pages,\n                totalItems: response.data.pagination.total_items\n              };\n              _context2.next = 14;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error('获取系统告警失败:', _context2.t0);\n              _this3.$message.error('获取系统告警数据失败');\n            case 14:\n              _context2.prev = 14;\n              _this3.alertsLoading = false;\n              return _context2.finish(14);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 10, 14, 17]]);\n      }))();\n    },\n    handlePageChange: function handlePageChange(page) {\n      this.fetchAlerts(page);\n    },\n    refreshData: function refreshData() {\n      this.fetchDashboardData();\n      this.fetchAlerts(1); // 刷新时回到第一页\n    },\n    formatPercentage: function formatPercentage(value) {\n      if (value === null || value === undefined) return '0%';\n      var sign = value >= 0 ? '+' : '';\n      return \"\".concat(sign).concat(value, \"%\");\n    },\n    formatDateTime: function formatDateTime(dateTimeStr) {\n      if (!dateTimeStr) return '';\n      var date = new Date(dateTimeStr);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n  }\n};","map":{"version":3,"names":["dashboardApi","name","data","loading","alertsLoading","dashboardData","stationCount","onlineStations","offlineStations","robotCount","chargingRobots","waitingRobots","todayOrders","orderChangeRate","systemStatus","systemMessage","alerts","pagination","currentPage","perPage","totalPages","totalItems","refreshInterval","created","_this","fetchDashboardData","fetchAlerts","setInterval","beforeUnmount","clearInterval","methods","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","getDashboardOverview","sent","t0","console","error","$message","finish","stop","_arguments","arguments","_this3","_callee2","page","_callee2$","_context2","length","undefined","getSystemAlerts","items","current_page","per_page","total_pages","total_items","handlePageChange","refreshData","formatPercentage","value","sign","concat","formatDateTime","dateTimeStr","date","Date","toLocaleString","year","month","day","hour","minute","second"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <el-row :gutter=\"20\">\r\n      <el-col :span=\"6\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>充电桩总数</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\" v-loading=\"loading\">\r\n            <h2>{{ dashboardData.stationCount || 0 }}</h2>\r\n            <p>在线: {{ dashboardData.onlineStations || 0 }} | 离线: {{ dashboardData.offlineStations || 0 }}</p>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>机器人总数</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\" v-loading=\"loading\">\r\n            <h2>{{ dashboardData.robotCount || 0 }}</h2>\r\n            <p>充电中: {{ dashboardData.chargingRobots || 0 }} | 待充电: {{ dashboardData.waitingRobots || 0 }}</p>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>今日充电次数</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\" v-loading=\"loading\">\r\n            <h2>{{ dashboardData.todayOrders || 0 }}</h2>\r\n            <p>较昨日 {{ formatPercentage(dashboardData.orderChangeRate) }}</p>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"6\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>系统状态</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"card-content\" v-loading=\"loading\">\r\n            <h2>{{ dashboardData.systemStatus || '加载中...' }}</h2>\r\n            <p>{{ dashboardData.systemMessage || '' }}</p>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"20\" class=\"mt-20\">\r\n      <el-col :span=\"12\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>充电效率趋势</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"chart-container\">\r\n            <!-- 这里将来会放置图表组件 -->\r\n            <div class=\"placeholder-chart\">充电效率趋势图</div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <el-card>\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <span>系统告警</span>\r\n              <el-button type=\"primary\" size=\"small\" @click=\"refreshData\">刷新</el-button>\r\n            </div>\r\n          </template>\r\n          <div v-loading=\"alertsLoading\">\r\n            <el-table :data=\"alerts\" style=\"width: 100%\">\r\n              <el-table-column prop=\"created_at\" label=\"时间\" width=\"180\">\r\n                <template #default=\"scope\">\r\n                  {{ formatDateTime(scope.row.created_at) }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"type\" label=\"类型\" width=\"120\" />\r\n              <el-table-column prop=\"message\" label=\"告警信息\" />\r\n            </el-table>\r\n            \r\n            <!-- 添加分页组件 -->\r\n            <div class=\"pagination-container\">\r\n              <el-pagination\r\n                v-if=\"pagination.totalPages > 0\"\r\n                background\r\n                layout=\"prev, pager, next\"\r\n                :total=\"pagination.totalItems\"\r\n                :page-size=\"pagination.perPage\"\r\n                :current-page=\"pagination.currentPage\"\r\n                @current-change=\"handlePageChange\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport dashboardApi from '../api/dashboard';\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      alertsLoading: false,\r\n      dashboardData: {\r\n        stationCount: 0,\r\n        onlineStations: 0,\r\n        offlineStations: 0,\r\n        robotCount: 0,\r\n        chargingRobots: 0,\r\n        waitingRobots: 0,\r\n        todayOrders: 0,\r\n        orderChangeRate: 0,\r\n        systemStatus: '加载中...',\r\n        systemMessage: '正在获取系统状态...'\r\n      },\r\n      alerts: [],\r\n      pagination: {\r\n        currentPage: 1,\r\n        perPage: 7,\r\n        totalPages: 0,\r\n        totalItems: 0\r\n      },\r\n      refreshInterval: null\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDashboardData();\r\n    this.fetchAlerts();\r\n    \r\n    // 设置定时刷新 - 每60秒刷新一次数据\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchDashboardData();\r\n      this.fetchAlerts();\r\n    }, 60000);\r\n  },\r\n  beforeUnmount() {\r\n    // 组件销毁前清除定时器\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchDashboardData() {\r\n      this.loading = true;\r\n      try {\r\n        const response = await dashboardApi.getDashboardOverview();\r\n        this.dashboardData = response.data;\r\n      } catch (error) {\r\n        console.error('获取仪表盘数据失败:', error);\r\n        this.$message.error('获取仪表盘数据失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async fetchAlerts(page = 1) {\r\n      this.alertsLoading = true;\r\n      try {\r\n        const response = await dashboardApi.getSystemAlerts(page, this.pagination.perPage);\r\n        \r\n        // 更新告警数据\r\n        this.alerts = response.data.items;\r\n        \r\n        // 更新分页信息\r\n        this.pagination = {\r\n          currentPage: response.data.pagination.current_page,\r\n          perPage: response.data.pagination.per_page,\r\n          totalPages: response.data.pagination.total_pages,\r\n          totalItems: response.data.pagination.total_items\r\n        };\r\n      } catch (error) {\r\n        console.error('获取系统告警失败:', error);\r\n        this.$message.error('获取系统告警数据失败');\r\n      } finally {\r\n        this.alertsLoading = false;\r\n      }\r\n    },\r\n    handlePageChange(page) {\r\n      this.fetchAlerts(page);\r\n    },\r\n    refreshData() {\r\n      this.fetchDashboardData();\r\n      this.fetchAlerts(1); // 刷新时回到第一页\r\n    },\r\n    formatPercentage(value) {\r\n      if (value === null || value === undefined) return '0%';\r\n      const sign = value >= 0 ? '+' : '';\r\n      return `${sign}${value}%`;\r\n    },\r\n    formatDateTime(dateTimeStr) {\r\n      if (!dateTimeStr) return '';\r\n      const date = new Date(dateTimeStr);\r\n      return date.toLocaleString('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  padding: 20px;\r\n}\r\n\r\n.mt-20 {\r\n  margin-top: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.card-content {\r\n  text-align: center;\r\n}\r\n\r\n.card-content h2 {\r\n  font-size: 24px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.card-content p {\r\n  color: #666;\r\n  margin: 0;\r\n}\r\n\r\n.chart-container {\r\n  height: 300px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.placeholder-chart {\r\n  color: #999;\r\n  font-size: 16px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}