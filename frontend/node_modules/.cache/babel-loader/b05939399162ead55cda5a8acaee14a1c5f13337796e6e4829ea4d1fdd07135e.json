{"ast":null,"code":"import _objectSpread from \"C:/Users/jiaronghao/Desktop/Documents/\\u672C\\u79D1\\u8BBA\\u6587\\u7F16\\u5199/5\\u3001\\u8D27\\u4ED3\\u673A\\u5668\\u4EBA\\u6FC0\\u5149\\u5145\\u7535\\u548C\\u80FD\\u6548\\u7BA1\\u7406\\u4E91\\u5E73\\u53F0\\u7684\\u8BBE\\u8BA1\\u4E0E\\u5B9E\\u73B0/Y0527-final/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _typeof from \"C:/Users/jiaronghao/Desktop/Documents/\\u672C\\u79D1\\u8BBA\\u6587\\u7F16\\u5199/5\\u3001\\u8D27\\u4ED3\\u673A\\u5668\\u4EBA\\u6FC0\\u5149\\u5145\\u7535\\u548C\\u80FD\\u6548\\u7BA1\\u7406\\u4E91\\u5E73\\u53F0\\u7684\\u8BBE\\u8BA1\\u4E0E\\u5B9E\\u73B0/Y0527-final/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport axios from 'axios';\nimport store from '../store';\n\n// 生成后备机器人数据的函数\nfunction generateFallbackRobots() {\n  console.log('生成后备机器人数据');\n  var robots = [];\n  var statuses = ['idle', 'working', 'charging', 'error'];\n  for (var i = 1; i <= 10; i++) {\n    var status = statuses[Math.floor(Math.random() * statuses.length)];\n    var batteryLevel = Math.floor(Math.random() * 100);\n    robots.push({\n      id: i,\n      name: \"\\u673A\\u5668\\u4EBA-\".concat(i.toString().padStart(3, '0')),\n      battery_level: batteryLevel,\n      status: status,\n      last_charging: new Date().toISOString().slice(0, 19).replace('T', ' ')\n    });\n  }\n  console.log(\"\\u751F\\u6210\\u4E86 \".concat(robots.length, \" \\u6761\\u540E\\u5907\\u673A\\u5668\\u4EBA\\u6570\\u636E\"));\n  return robots;\n}\n\n// 生成后备订单数据的函数\nfunction generateFallbackOrders() {\n  console.log('生成后备订单数据');\n  var orders = [];\n  var statuses = ['charging', 'completed', 'failed'];\n  for (var i = 1; i <= 10; i++) {\n    var status = statuses[Math.floor(Math.random() * statuses.length)];\n    var startTime = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace('T', ' ');\n    var order = {\n      id: i,\n      robot_id: Math.floor(Math.random() * 10) + 1,\n      station_id: Math.floor(Math.random() * 10) + 1,\n      start_time: startTime,\n      status: status\n    };\n\n    // 如果状态是已完成，添加结束时间和充电量\n    if (status === 'completed') {\n      var endTime = new Date(new Date(startTime).getTime() + Math.floor(Math.random() * 4 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace('T', ' ');\n      order.end_time = endTime;\n      order.amount = Math.floor(Math.random() * 40) + 10;\n    }\n    orders.push(order);\n  }\n  console.log(\"\\u751F\\u6210\\u4E86 \".concat(orders.length, \" \\u6761\\u540E\\u5907\\u8BA2\\u5355\\u6570\\u636E\"));\n  return orders;\n}\n\n// 生成后备充电站数据的函数\nfunction generateFallbackStations() {\n  console.log('生成后备充电站数据');\n  var stations = [];\n  var statuses = ['idle', 'charging', 'maintenance', 'error'];\n  for (var i = 1; i <= 8; i++) {\n    var status = statuses[Math.floor(Math.random() * statuses.length)];\n    var efficiency = Math.floor(Math.random() * 15) + 80; // 80-95\n\n    stations.push({\n      id: i,\n      name: \"\\u5145\\u7535\\u7AD9-\".concat(i),\n      location: \"\\u4F4D\\u7F6E\".concat(i),\n      status: status,\n      power_rating: Math.floor(Math.random() * 5) + 5,\n      // 5-10\n      efficiency: efficiency\n    });\n  }\n  console.log(\"\\u751F\\u6210\\u4E86 \".concat(stations.length, \" \\u6761\\u540E\\u5907\\u5145\\u7535\\u7AD9\\u6570\\u636E\"));\n  return stations;\n}\nvar api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 5000\n});\n\n// 暴露api实例，供其他模块使用\nexport { api };\n\n// 请求拦截器\napi.interceptors.request.use(function (config) {\n  console.log(\"API\\u8BF7\\u6C42: \".concat(config.method.toUpperCase(), \" \").concat(config.url));\n\n  // 设置加载状态\n  store.dispatch('loading/setEndpointLoading', {\n    endpoint: config.url,\n    isLoading: true\n  });\n  var token = localStorage.getItem('token');\n  if (token) {\n    // 确保令牌格式正确\n    if (typeof token === 'string' && token.trim() !== '') {\n      config.headers.Authorization = \"Bearer \".concat(token.trim());\n      // 禁用token缓存，确保每次请求都使用最新的token\n      config.headers['Cache-Control'] = 'no-cache';\n      console.log('已添加认证令牌');\n    } else {\n      console.warn('令牌格式不正确:', token);\n      localStorage.removeItem('token');\n    }\n  } else {\n    console.log('未找到认证令牌');\n  }\n  return config;\n}, function (error) {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(function (response) {\n  console.log(\"API\\u54CD\\u5E94: \".concat(response.config.method.toUpperCase(), \" \").concat(response.config.url), response.data);\n\n  // 清除加载状态\n  store.dispatch('loading/setEndpointLoading', {\n    endpoint: response.config.url,\n    isLoading: false\n  });\n  return response;\n}, function (error) {\n  // 清除加载状态\n  if (error.config) {\n    store.dispatch('loading/setEndpointLoading', {\n      endpoint: error.config.url,\n      isLoading: false\n    });\n  }\n\n  // 处理认证错误\n  if (error.response && error.response.status === 401) {\n    console.error('认证失败，需要重新登录');\n    // 清除本地存储的认证信息\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // 如果不是登录页面，可以重定向到登录页\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  console.error('API错误:', error.response ? error.response.data : error.message);\n  return Promise.reject(error);\n});\n\n// 充电站相关 API\nexport var stationApi = {\n  // 获取所有充电站\n  getAll: function getAll() {\n    console.log('调用API: 获取所有充电站');\n    return new Promise(function (resolve, reject) {\n      api.get('/stations/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      }).then(function (response) {\n        console.log('充电站API响应状态:', response.status);\n        console.log('充电站API响应头:', response.headers);\n        var data = response.data;\n        console.log('原始响应数据类型:', _typeof(data));\n\n        // 处理各种响应类型\n        try {\n          // 1. 如果是字符串，尝试解析为JSON\n          if (typeof data === 'string') {\n            console.log('响应是字符串，尝试解析为JSON');\n            try {\n              // 处理NaN值，将其替换为null\n              var cleanedData = data.replace(/: ?NaN/g, ': null');\n              data = JSON.parse(cleanedData);\n              console.log('解析后的数据类型:', _typeof(data));\n            } catch (e) {\n              console.error('解析字符串为JSON失败:', e);\n            }\n          }\n\n          // 2. 检查是否为null或undefined\n          if (data === null || data === undefined) {\n            console.error('API返回的充电站数据为null或undefined');\n            resolve({\n              data: []\n            });\n            return;\n          }\n\n          // 3. 确保数据是数组\n          if (!Array.isArray(data)) {\n            console.error('API返回的充电站数据不是数组:', _typeof(data));\n\n            // 如果是对象且有data属性是数组，则使用该属性\n            if (data && _typeof(data) === 'object' && Array.isArray(data.data)) {\n              console.log('使用响应对象中的data属性作为数据数组');\n              data = data.data;\n            } else {\n              // 最后的后备方案：使用硬编码的充电站数据\n              console.error('使用硬编码的充电站数据');\n              data = generateFallbackStations();\n            }\n          }\n\n          // 4. 验证数组中每个元素是否为有效的充电站对象\n          data = data.filter(function (item) {\n            var isValid = item && _typeof(item) === 'object' && 'id' in item && 'name' in item && 'location' in item && 'status' in item;\n            if (!isValid) {\n              console.warn('过滤掉无效的充电站数据:', item);\n            }\n            return isValid;\n          });\n          console.log(\"\\u8FC7\\u6EE4\\u540E\\u7684\\u5145\\u7535\\u7AD9\\u6570\\u636E\\u6570\\u91CF: \".concat(data.length));\n\n          // 5. 如果过滤后数组为空，使用后备数据\n          if (data.length === 0) {\n            console.warn('过滤后没有有效的充电站数据，使用后备数据');\n            data = generateFallbackStations();\n          }\n\n          // 返回处理后的数据\n          resolve({\n            data: data\n          });\n        } catch (e) {\n          console.error('处理响应数据时出错:', e);\n          resolve({\n            data: generateFallbackStations()\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取充电站数据网络请求失败:', error);\n        resolve({\n          data: generateFallbackStations()\n        });\n      });\n    });\n  },\n  // 获取单个充电站\n  getById: function getById(id) {\n    return api.get(\"/stations/\".concat(id, \"/\"));\n  },\n  // 更新充电站\n  update: function update(id, data) {\n    console.log('调用API: 更新充电站', id, data);\n    return new Promise(function (resolve, reject) {\n      // 确保数据格式正确\n      var stationData = _objectSpread({}, data);\n\n      // 确保功率值是数字\n      if (stationData.power_rating !== undefined) {\n        try {\n          stationData.power_rating = parseFloat(stationData.power_rating);\n          if (isNaN(stationData.power_rating)) {\n            stationData.power_rating = 0;\n          }\n        } catch (e) {\n          stationData.power_rating = 0;\n        }\n      }\n\n      // 确保效率值是数字\n      if (stationData.efficiency !== undefined) {\n        try {\n          stationData.efficiency = parseFloat(stationData.efficiency);\n          if (isNaN(stationData.efficiency)) {\n            stationData.efficiency = 80;\n          }\n        } catch (e) {\n          stationData.efficiency = 80;\n        }\n      }\n      console.log('格式化后的充电站数据:', stationData);\n      api.put(\"/stations/\".concat(id, \"/\"), stationData, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        console.log('更新充电站成功:', response.data);\n        resolve(response);\n      })[\"catch\"](function (error) {\n        console.error('更新充电站失败:', error.response ? error.response.data : error);\n        reject(error);\n      });\n    });\n  },\n  // 添加充电站\n  add: function add(data) {\n    console.log('调用API: 添加充电站', data);\n    return new Promise(function (resolve, reject) {\n      // 确保数据格式正确\n      var stationData = {\n        name: data.name || '',\n        location: data.location || '',\n        power_rating: data.power_rating !== undefined && data.power_rating !== null ? parseFloat(data.power_rating) : 0,\n        status: data.status || 'idle',\n        efficiency: data.efficiency !== undefined && data.efficiency !== null ? parseFloat(data.efficiency) : 80\n      };\n      console.log('格式化后的充电站数据:', stationData);\n      api.post('/stations/', stationData, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        console.log('添加充电站成功:', response.data);\n        resolve(response);\n      })[\"catch\"](function (error) {\n        console.error('添加充电站失败:', error.response ? error.response.data : error);\n        // 如果是422错误，提供更详细的错误信息\n        if (error.response && error.response.status === 422) {\n          reject(new Error('数据验证失败: ' + JSON.stringify(error.response.data)));\n        } else {\n          reject(error);\n        }\n      });\n    });\n  },\n  // 删除充电站\n  \"delete\": function _delete(id) {\n    return api[\"delete\"](\"/stations/\".concat(id, \"/\"));\n  }\n};\n\n// 机器人相关 API\nexport var robotApi = {\n  // 获取所有机器人\n  getAll: function getAll() {\n    console.log('调用API: 获取所有机器人');\n    return new Promise(function (resolve, reject) {\n      api.get('/robots/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      }).then(function (response) {\n        console.log('机器人API响应状态:', response.status);\n        console.log('机器人API响应头:', response.headers);\n        var data = response.data;\n        console.log('原始响应数据类型:', _typeof(data));\n\n        // 处理各种响应类型\n        try {\n          // 1. 如果是字符串，尝试解析为JSON\n          if (typeof data === 'string') {\n            console.log('响应是字符串，尝试解析为JSON');\n            try {\n              // 处理NaN值，将其替换为null\n              var cleanedData = data.replace(/: ?NaN/g, ': null');\n              data = JSON.parse(cleanedData);\n              console.log('解析后的数据类型:', _typeof(data));\n            } catch (e) {\n              console.error('解析字符串为JSON失败:', e);\n            }\n          }\n\n          // 2. 检查是否为null或undefined\n          if (data === null || data === undefined) {\n            console.error('API返回的机器人数据为null或undefined');\n            resolve({\n              data: []\n            });\n            return;\n          }\n\n          // 3. 确保数据是数组\n          if (!Array.isArray(data)) {\n            console.error('API返回的机器人数据不是数组:', _typeof(data));\n\n            // 如果是对象且有data属性是数组，则使用该属性\n            if (data && _typeof(data) === 'object' && Array.isArray(data.data)) {\n              console.log('使用响应对象中的data属性作为数据数组');\n              data = data.data;\n            } else {\n              // 最后的后备方案：使用硬编码的机器人数据\n              console.error('使用硬编码的机器人数据');\n              data = generateFallbackRobots();\n            }\n          }\n\n          // 4. 验证数组中每个元素是否为有效的机器人对象\n          data = data.filter(function (item) {\n            return item && _typeof(item) === 'object' && 'id' in item && 'name' in item && 'battery_level' in item && 'status' in item;\n          });\n          console.log(\"\\u8FC7\\u6EE4\\u540E\\u7684\\u673A\\u5668\\u4EBA\\u6570\\u636E\\u6570\\u91CF: \".concat(data.length));\n\n          // 5. 如果过滤后数组为空，使用后备数据\n          if (data.length === 0) {\n            console.warn('过滤后没有有效的机器人数据，使用后备数据');\n            data = generateFallbackRobots();\n          }\n\n          // 返回处理后的数据\n          resolve({\n            data: data\n          });\n        } catch (e) {\n          console.error('处理响应数据时出错:', e);\n          resolve({\n            data: generateFallbackRobots()\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取机器人数据网络请求失败:', error);\n        resolve({\n          data: generateFallbackRobots()\n        });\n      });\n    });\n  },\n  // 获取单个机器人\n  getById: function getById(id) {\n    return api.get(\"/robots/\".concat(id, \"/\"));\n  },\n  // 更新机器人\n  update: function update(id, data) {\n    console.log('调用API: 更新机器人', id, data);\n    return api.put(\"/robots/\".concat(id), data);\n  },\n  // 添加机器人\n  add: function add(data) {\n    return api.post('/robots/', data);\n  },\n  // 删除机器人\n  \"delete\": function _delete(id) {\n    return api[\"delete\"](\"/robots/\".concat(id, \"/\"));\n  },\n  // 新增：将机器人分配到充电桩\n  assignToStation: function assignToStation(robotId, stationId) {\n    console.log(\"\\u8C03\\u7528API: \\u5C06\\u673A\\u5668\\u4EBA\".concat(robotId, \"\\u5206\\u914D\\u5230\\u5145\\u7535\\u6869\").concat(stationId));\n    return new Promise(function (resolve, reject) {\n      api.post(\"/robots/\".concat(robotId, \"/assign/\").concat(stationId), {}, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        console.log('分配充电桩成功:', response.data);\n        resolve(response);\n      })[\"catch\"](function (error) {\n        console.error('分配充电桩失败:', error.response ? error.response.data : error.message);\n        reject(error);\n      });\n    });\n  },\n  // 新增：解除机器人与充电桩的关联\n  releaseFromStation: function releaseFromStation(robotId) {\n    console.log(\"\\u8C03\\u7528API: \\u89E3\\u9664\\u673A\\u5668\\u4EBA\".concat(robotId, \"\\u4E0E\\u5145\\u7535\\u6869\\u7684\\u5173\\u8054\"));\n    return new Promise(function (resolve, reject) {\n      api.post(\"/robots/\".concat(robotId, \"/release\"), {}, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        console.log('解除充电桩成功:', response.data);\n        resolve(response);\n      })[\"catch\"](function (error) {\n        console.error('解除充电桩失败:', error.response ? error.response.data : error.message);\n        reject(error);\n      });\n    });\n  },\n  // 新增：开始充电\n  startCharging: function startCharging(robotId) {\n    console.log(\"\\u8C03\\u7528API: \\u5F00\\u59CB\\u7ED9\\u673A\\u5668\\u4EBA\".concat(robotId, \"\\u5145\\u7535\"));\n    return api.post(\"/robots/\".concat(robotId, \"/start-charging\"));\n  },\n  // 新增：完成充电\n  completeCharging: function completeCharging(robotId) {\n    console.log(\"\\u8C03\\u7528API: \\u5B8C\\u6210\\u673A\\u5668\\u4EBA\".concat(robotId, \"\\u7684\\u5145\\u7535\"));\n    return api.post(\"/robots/\".concat(robotId, \"/complete-charging\"));\n  },\n  // 新增：检查低电量机器人并自动充电\n  checkLowBattery: function checkLowBattery() {\n    console.log('调用API: 检查低电量机器人');\n    return api.get('/robots/check-low-battery');\n  }\n};\n\n// 订单相关 API\nexport var orderApi = {\n  // 获取所有订单\n  getAll: function getAll() {\n    console.log('调用API: 获取所有订单');\n    return new Promise(function (resolve, reject) {\n      api.get('/orders/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      }).then(function (response) {\n        console.log('订单API响应状态:', response.status);\n        console.log('订单API响应头:', response.headers);\n        var data = response.data;\n        console.log('原始响应数据类型:', _typeof(data));\n\n        // 处理各种响应类型\n        try {\n          // 1. 如果是字符串，尝试解析为JSON\n          if (typeof data === 'string') {\n            console.log('响应是字符串，尝试解析为JSON');\n            try {\n              // 处理NaN值，将其替换为null\n              var cleanedData = data.replace(/: ?NaN/g, ': null');\n              data = JSON.parse(cleanedData);\n              console.log('解析后的数据类型:', _typeof(data));\n            } catch (e) {\n              console.error('解析字符串为JSON失败:', e);\n            }\n          }\n\n          // 2. 检查是否为null或undefined\n          if (data === null || data === undefined) {\n            console.error('API返回的订单数据为null或undefined');\n            resolve({\n              data: []\n            });\n            return;\n          }\n\n          // 3. 确保数据是数组\n          if (!Array.isArray(data)) {\n            console.error('API返回的订单数据不是数组:', _typeof(data));\n\n            // 如果是对象且有data属性是数组，则使用该属性\n            if (data && _typeof(data) === 'object' && Array.isArray(data.data)) {\n              console.log('使用响应对象中的data属性作为数据数组');\n              data = data.data;\n            } else {\n              // 最后的后备方案：使用硬编码的订单数据\n              console.error('使用硬编码的订单数据');\n              data = generateFallbackOrders();\n            }\n          }\n\n          // 4. 验证数组中每个元素是否为有效的订单对象\n          data = data.filter(function (item) {\n            var isValid = item && _typeof(item) === 'object' && 'id' in item && 'robot_id' in item && 'station_id' in item && 'start_time' in item && 'status' in item;\n            if (!isValid) {\n              console.warn('过滤掉无效的订单数据:', item);\n            }\n            return isValid;\n          });\n          console.log(\"\\u8FC7\\u6EE4\\u540E\\u7684\\u8BA2\\u5355\\u6570\\u636E\\u6570\\u91CF: \".concat(data.length));\n\n          // 5. 如果过滤后数组为空，使用后备数据\n          if (data.length === 0) {\n            console.warn('过滤后没有有效的订单数据，使用后备数据');\n            data = generateFallbackOrders();\n          }\n\n          // 返回处理后的数据\n          resolve({\n            data: data\n          });\n        } catch (e) {\n          console.error('处理响应数据时出错:', e);\n          resolve({\n            data: generateFallbackOrders()\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.error('获取订单数据网络请求失败:', error);\n        resolve({\n          data: generateFallbackOrders()\n        });\n      });\n    });\n  },\n  // 获取单个订单\n  getById: function getById(id) {\n    return api.get(\"/orders/\".concat(id, \"/\"));\n  },\n  // 创建订单\n  create: function create(data) {\n    return api.post('/orders/', data);\n  },\n  // 更新订单状态\n  updateStatus: function updateStatus(id, status) {\n    return api.put(\"/orders/\".concat(id, \"/status/\"), {\n      status: status\n    });\n  }\n};\n\n// 系统相关 API\nexport var systemApi = {\n  // 获取系统设置\n  getSettings: function getSettings() {\n    return api.get('/system/settings/');\n  },\n  // 更新系统设置\n  updateSettings: function updateSettings(data) {\n    return api.put('/system/settings/', data);\n  },\n  // 获取仪表盘数据\n  getDashboardData: function getDashboardData() {\n    console.log('调用API: 获取仪表盘数据');\n    return new Promise(function (resolve, reject) {\n      api.get('/system/dashboard/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        },\n        responseType: 'json',\n        timeout: 10000 // 增加超时时间到10秒\n      }).then(function (response) {\n        console.log('仪表盘API响应状态:', response.status);\n        var data = response.data;\n        console.log('仪表盘API响应:', data);\n\n        // 如果响应为字符串，尝试解析\n        if (typeof data === 'string') {\n          try {\n            data = JSON.parse(data);\n          } catch (e) {\n            console.error('解析仪表盘响应失败:', e);\n          }\n        }\n        resolve({\n          data: data\n        });\n      })[\"catch\"](function (error) {\n        console.error('获取仪表盘数据失败:', error.response || error.message || error);\n\n        // 返回带有错误信息的响应，而不是拒绝Promise\n        resolve({\n          data: {\n            stationCount: 0,\n            onlineStations: 0,\n            offlineStations: 0,\n            robotCount: 0,\n            chargingRobots: 0,\n            waitingRobots: 0,\n            todayOrders: 0,\n            orderChangeRate: 0,\n            systemStatus: '错误',\n            systemMessage: \"\\u6570\\u636E\\u52A0\\u8F7D\\u5931\\u8D25: \".concat(error.message || '未知错误')\n          }\n        });\n      });\n    });\n  },\n  // 获取系统告警\n  getAlerts: function getAlerts() {\n    return api.get('/system/alerts/');\n  },\n  // 获取系统日志\n  getLogs: function getLogs() {\n    return api.get('/system/logs/');\n  },\n  // 获取充电效率记录\n  getEfficiencyLogs: function getEfficiencyLogs() {\n    return api.get('/system/efficiency/');\n  }\n};\n\n// 测试API连接\nexport var testApi = {\n  checkData: function checkData() {\n    console.log('调用API: 测试数据加载');\n    return new Promise(function (resolve, reject) {\n      api.get('/auth/test-data/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        },\n        responseType: 'json',\n        timeout: 10000 // 增加超时时间到10秒\n      }).then(function (response) {\n        console.log('测试数据API响应状态:', response.status);\n        console.log('测试数据API响应头:', response.headers);\n        var data = response.data;\n        console.log('测试数据API响应:', data);\n\n        // 如果响应为字符串，尝试解析\n        if (typeof data === 'string') {\n          try {\n            data = JSON.parse(data);\n          } catch (e) {\n            console.error('解析测试数据响应失败:', e);\n          }\n        }\n        resolve({\n          data: data\n        });\n      })[\"catch\"](function (error) {\n        console.error('测试数据加载失败:', error.response || error.message || error);\n\n        // 返回带有错误信息的响应，而不是拒绝Promise\n        resolve({\n          data: {\n            error: error.message || '未知错误',\n            success: false,\n            errorDetails: error.response ? error.response.data : null\n          }\n        });\n      });\n    });\n  }\n};","map":{"version":3,"names":["axios","store","generateFallbackRobots","console","log","robots","statuses","i","status","Math","floor","random","length","batteryLevel","push","id","name","concat","toString","padStart","battery_level","last_charging","Date","toISOString","slice","replace","generateFallbackOrders","orders","startTime","now","order","robot_id","station_id","start_time","endTime","getTime","end_time","amount","generateFallbackStations","stations","efficiency","location","power_rating","api","create","baseURL","timeout","interceptors","request","use","config","method","toUpperCase","url","dispatch","endpoint","isLoading","token","localStorage","getItem","trim","headers","Authorization","warn","removeItem","error","Promise","reject","response","data","window","pathname","href","message","stationApi","getAll","resolve","get","responseType","then","_typeof","cleanedData","JSON","parse","e","undefined","Array","isArray","filter","item","isValid","getById","update","stationData","_objectSpread","parseFloat","isNaN","put","add","post","Error","stringify","delete","robotApi","assignToStation","robotId","stationId","releaseFromStation","startCharging","completeCharging","checkLowBattery","orderApi","updateStatus","systemApi","getSettings","updateSettings","getDashboardData","stationCount","onlineStations","offlineStations","robotCount","chargingRobots","waitingRobots","todayOrders","orderChangeRate","systemStatus","systemMessage","getAlerts","getLogs","getEfficiencyLogs","testApi","checkData","success","errorDetails"],"sources":["C:/Users/jiaronghao/Desktop/Documents/本科论文编写/5、货仓机器人激光充电和能效管理云平台的设计与实现/Y0527-final/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\nimport store from '../store'\n\n// 生成后备机器人数据的函数\nfunction generateFallbackRobots() {\n  console.log('生成后备机器人数据')\n  const robots = []\n  const statuses = ['idle', 'working', 'charging', 'error']\n  \n  for (let i = 1; i <= 10; i++) {\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const batteryLevel = Math.floor(Math.random() * 100)\n    \n    robots.push({\n      id: i,\n      name: `机器人-${i.toString().padStart(3, '0')}`,\n      battery_level: batteryLevel,\n      status: status,\n      last_charging: new Date().toISOString().slice(0, 19).replace('T', ' ')\n    })\n  }\n  \n  console.log(`生成了 ${robots.length} 条后备机器人数据`)\n  return robots\n}\n\n// 生成后备订单数据的函数\nfunction generateFallbackOrders() {\n  console.log('生成后备订单数据')\n  const orders = []\n  const statuses = ['charging', 'completed', 'failed']\n  \n  for (let i = 1; i <= 10; i++) {\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const startTime = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000))\n      .toISOString().slice(0, 19).replace('T', ' ')\n    \n    const order = {\n      id: i,\n      robot_id: Math.floor(Math.random() * 10) + 1,\n      station_id: Math.floor(Math.random() * 10) + 1,\n      start_time: startTime,\n      status: status\n    }\n    \n    // 如果状态是已完成，添加结束时间和充电量\n    if (status === 'completed') {\n      const endTime = new Date(new Date(startTime).getTime() + Math.floor(Math.random() * 4 * 60 * 60 * 1000))\n        .toISOString().slice(0, 19).replace('T', ' ')\n      order.end_time = endTime\n      order.amount = Math.floor(Math.random() * 40) + 10\n    }\n    \n    orders.push(order)\n  }\n  \n  console.log(`生成了 ${orders.length} 条后备订单数据`)\n  return orders\n}\n\n// 生成后备充电站数据的函数\nfunction generateFallbackStations() {\n  console.log('生成后备充电站数据')\n  const stations = []\n  const statuses = ['idle', 'charging', 'maintenance', 'error']\n  \n  for (let i = 1; i <= 8; i++) {\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const efficiency = Math.floor(Math.random() * 15) + 80 // 80-95\n    \n    stations.push({\n      id: i,\n      name: `充电站-${i}`,\n      location: `位置${i}`,\n      status: status,\n      power_rating: Math.floor(Math.random() * 5) + 5, // 5-10\n      efficiency: efficiency\n    })\n  }\n  \n  console.log(`生成了 ${stations.length} 条后备充电站数据`)\n  return stations\n}\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 5000\n})\n\n// 暴露api实例，供其他模块使用\nexport { api }\n\n// 请求拦截器\napi.interceptors.request.use(\n  config => {\n    console.log(`API请求: ${config.method.toUpperCase()} ${config.url}`)\n    \n    // 设置加载状态\n    store.dispatch('loading/setEndpointLoading', { \n      endpoint: config.url, \n      isLoading: true \n    })\n    \n    const token = localStorage.getItem('token')\n    if (token) {\n      // 确保令牌格式正确\n      if (typeof token === 'string' && token.trim() !== '') {\n        config.headers.Authorization = `Bearer ${token.trim()}`\n        // 禁用token缓存，确保每次请求都使用最新的token\n        config.headers['Cache-Control'] = 'no-cache'\n        console.log('已添加认证令牌')\n      } else {\n        console.warn('令牌格式不正确:', token)\n        localStorage.removeItem('token')\n      }\n    } else {\n      console.log('未找到认证令牌')\n    }\n    return config\n  },\n  error => {\n    console.error('请求拦截器错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\napi.interceptors.response.use(\n  response => {\n    console.log(`API响应: ${response.config.method.toUpperCase()} ${response.config.url}`, response.data)\n    \n    // 清除加载状态\n    store.dispatch('loading/setEndpointLoading', { \n      endpoint: response.config.url, \n      isLoading: false \n    })\n    \n    return response\n  },\n  error => {\n    // 清除加载状态\n    if (error.config) {\n      store.dispatch('loading/setEndpointLoading', { \n        endpoint: error.config.url, \n        isLoading: false \n      })\n    }\n    \n    // 处理认证错误\n    if (error.response && error.response.status === 401) {\n      console.error('认证失败，需要重新登录')\n      // 清除本地存储的认证信息\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      // 如果不是登录页面，可以重定向到登录页\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login'\n      }\n    }\n    \n    console.error('API错误:', error.response ? error.response.data : error.message)\n    return Promise.reject(error)\n  }\n)\n\n// 充电站相关 API\nexport const stationApi = {\n  // 获取所有充电站\n  getAll() {\n    console.log('调用API: 获取所有充电站')\n    return new Promise((resolve, reject) => {\n      api.get('/stations/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      })\n        .then(response => {\n          console.log('充电站API响应状态:', response.status)\n          console.log('充电站API响应头:', response.headers)\n          \n          let data = response.data\n          console.log('原始响应数据类型:', typeof data)\n          \n          // 处理各种响应类型\n          try {\n            // 1. 如果是字符串，尝试解析为JSON\n            if (typeof data === 'string') {\n              console.log('响应是字符串，尝试解析为JSON')\n              try {\n                // 处理NaN值，将其替换为null\n                const cleanedData = data.replace(/: ?NaN/g, ': null')\n                data = JSON.parse(cleanedData)\n                console.log('解析后的数据类型:', typeof data)\n              } catch (e) {\n                console.error('解析字符串为JSON失败:', e)\n              }\n            }\n            \n            // 2. 检查是否为null或undefined\n            if (data === null || data === undefined) {\n              console.error('API返回的充电站数据为null或undefined')\n              resolve({ data: [] })\n              return\n            }\n            \n            // 3. 确保数据是数组\n            if (!Array.isArray(data)) {\n              console.error('API返回的充电站数据不是数组:', typeof data)\n              \n              // 如果是对象且有data属性是数组，则使用该属性\n              if (data && typeof data === 'object' && Array.isArray(data.data)) {\n                console.log('使用响应对象中的data属性作为数据数组')\n                data = data.data\n              } else {\n                // 最后的后备方案：使用硬编码的充电站数据\n                console.error('使用硬编码的充电站数据')\n                data = generateFallbackStations()\n              }\n            }\n            \n            // 4. 验证数组中每个元素是否为有效的充电站对象\n            data = data.filter(item => {\n              const isValid = item && \n                     typeof item === 'object' && \n                     'id' in item && \n                     'name' in item && \n                     'location' in item && \n                     'status' in item\n              \n              if (!isValid) {\n                console.warn('过滤掉无效的充电站数据:', item)\n              }\n              return isValid\n            })\n            \n            console.log(`过滤后的充电站数据数量: ${data.length}`)\n            \n            // 5. 如果过滤后数组为空，使用后备数据\n            if (data.length === 0) {\n              console.warn('过滤后没有有效的充电站数据，使用后备数据')\n              data = generateFallbackStations()\n            }\n            \n            // 返回处理后的数据\n            resolve({ data })\n          } catch (e) {\n            console.error('处理响应数据时出错:', e)\n            resolve({ data: generateFallbackStations() })\n          }\n        })\n        .catch(error => {\n          console.error('获取充电站数据网络请求失败:', error)\n          resolve({ data: generateFallbackStations() })\n        })\n    })\n  },\n  // 获取单个充电站\n  getById(id) {\n    return api.get(`/stations/${id}/`)\n  },\n  // 更新充电站\n  update(id, data) {\n    console.log('调用API: 更新充电站', id, data)\n    return new Promise((resolve, reject) => {\n      // 确保数据格式正确\n      const stationData = { ...data }\n      \n      // 确保功率值是数字\n      if (stationData.power_rating !== undefined) {\n        try {\n          stationData.power_rating = parseFloat(stationData.power_rating)\n          if (isNaN(stationData.power_rating)) {\n            stationData.power_rating = 0\n          }\n        } catch (e) {\n          stationData.power_rating = 0\n        }\n      }\n      \n      // 确保效率值是数字\n      if (stationData.efficiency !== undefined) {\n        try {\n          stationData.efficiency = parseFloat(stationData.efficiency)\n          if (isNaN(stationData.efficiency)) {\n            stationData.efficiency = 80\n          }\n        } catch (e) {\n          stationData.efficiency = 80\n        }\n      }\n      \n      console.log('格式化后的充电站数据:', stationData)\n      \n      api.put(`/stations/${id}/`, stationData, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => {\n          console.log('更新充电站成功:', response.data)\n          resolve(response)\n        })\n        .catch(error => {\n          console.error('更新充电站失败:', error.response ? error.response.data : error)\n          reject(error)\n        })\n    })\n  },\n  // 添加充电站\n  add(data) {\n    console.log('调用API: 添加充电站', data)\n    return new Promise((resolve, reject) => {\n      // 确保数据格式正确\n      const stationData = {\n        name: data.name || '',\n        location: data.location || '',\n        power_rating: data.power_rating !== undefined && data.power_rating !== null ? \n          parseFloat(data.power_rating) : 0,\n        status: data.status || 'idle',\n        efficiency: data.efficiency !== undefined && data.efficiency !== null ? \n          parseFloat(data.efficiency) : 80\n      }\n      \n      console.log('格式化后的充电站数据:', stationData)\n      \n      api.post('/stations/', stationData, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => {\n          console.log('添加充电站成功:', response.data)\n          resolve(response)\n        })\n        .catch(error => {\n          console.error('添加充电站失败:', error.response ? error.response.data : error)\n          // 如果是422错误，提供更详细的错误信息\n          if (error.response && error.response.status === 422) {\n            reject(new Error('数据验证失败: ' + JSON.stringify(error.response.data)))\n          } else {\n            reject(error)\n          }\n        })\n    })\n  },\n  // 删除充电站\n  delete(id) {\n    return api.delete(`/stations/${id}/`)\n  }\n}\n\n// 机器人相关 API\nexport const robotApi = {\n  // 获取所有机器人\n  getAll() {\n    console.log('调用API: 获取所有机器人')\n    return new Promise((resolve, reject) => {\n      api.get('/robots/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      })\n        .then(response => {\n          console.log('机器人API响应状态:', response.status)\n          console.log('机器人API响应头:', response.headers)\n          \n          let data = response.data\n          console.log('原始响应数据类型:', typeof data)\n          \n          // 处理各种响应类型\n          try {\n            // 1. 如果是字符串，尝试解析为JSON\n            if (typeof data === 'string') {\n              console.log('响应是字符串，尝试解析为JSON')\n              try {\n                // 处理NaN值，将其替换为null\n                const cleanedData = data.replace(/: ?NaN/g, ': null')\n                data = JSON.parse(cleanedData)\n                console.log('解析后的数据类型:', typeof data)\n              } catch (e) {\n                console.error('解析字符串为JSON失败:', e)\n              }\n            }\n            \n            // 2. 检查是否为null或undefined\n            if (data === null || data === undefined) {\n              console.error('API返回的机器人数据为null或undefined')\n              resolve({ data: [] })\n              return\n            }\n            \n            // 3. 确保数据是数组\n            if (!Array.isArray(data)) {\n              console.error('API返回的机器人数据不是数组:', typeof data)\n              \n              // 如果是对象且有data属性是数组，则使用该属性\n              if (data && typeof data === 'object' && Array.isArray(data.data)) {\n                console.log('使用响应对象中的data属性作为数据数组')\n                data = data.data\n              } else {\n                // 最后的后备方案：使用硬编码的机器人数据\n                console.error('使用硬编码的机器人数据')\n                data = generateFallbackRobots()\n              }\n            }\n            \n            // 4. 验证数组中每个元素是否为有效的机器人对象\n            data = data.filter(item => {\n              return item && \n                     typeof item === 'object' && \n                     'id' in item && \n                     'name' in item && \n                     'battery_level' in item && \n                     'status' in item\n            })\n            \n            console.log(`过滤后的机器人数据数量: ${data.length}`)\n            \n            // 5. 如果过滤后数组为空，使用后备数据\n            if (data.length === 0) {\n              console.warn('过滤后没有有效的机器人数据，使用后备数据')\n              data = generateFallbackRobots()\n            }\n            \n            // 返回处理后的数据\n            resolve({ data })\n          } catch (e) {\n            console.error('处理响应数据时出错:', e)\n            resolve({ data: generateFallbackRobots() })\n          }\n        })\n        .catch(error => {\n          console.error('获取机器人数据网络请求失败:', error)\n          resolve({ data: generateFallbackRobots() })\n        })\n    })\n  },\n  // 获取单个机器人\n  getById(id) {\n    return api.get(`/robots/${id}/`)\n  },\n  // 更新机器人\n  update(id, data) {\n    console.log('调用API: 更新机器人', id, data)\n    return api.put(`/robots/${id}`, data)\n  },\n  // 添加机器人\n  add(data) {\n    return api.post('/robots/', data)\n  },\n  // 删除机器人\n  delete(id) {\n    return api.delete(`/robots/${id}/`)\n  },\n  // 新增：将机器人分配到充电桩\n  assignToStation(robotId, stationId) {\n    console.log(`调用API: 将机器人${robotId}分配到充电桩${stationId}`)\n    return new Promise((resolve, reject) => {\n      api.post(`/robots/${robotId}/assign/${stationId}`, {}, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        console.log('分配充电桩成功:', response.data)\n        resolve(response)\n      })\n      .catch(error => {\n        console.error('分配充电桩失败:', error.response ? error.response.data : error.message)\n        reject(error)\n      })\n    })\n  },\n  // 新增：解除机器人与充电桩的关联\n  releaseFromStation(robotId) {\n    console.log(`调用API: 解除机器人${robotId}与充电桩的关联`)\n    return new Promise((resolve, reject) => {\n      api.post(`/robots/${robotId}/release`, {}, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        console.log('解除充电桩成功:', response.data)\n        resolve(response)\n      })\n      .catch(error => {\n        console.error('解除充电桩失败:', error.response ? error.response.data : error.message)\n        reject(error)\n      })\n    })\n  },\n  // 新增：开始充电\n  startCharging(robotId) {\n    console.log(`调用API: 开始给机器人${robotId}充电`)\n    return api.post(`/robots/${robotId}/start-charging`)\n  },\n  // 新增：完成充电\n  completeCharging(robotId) {\n    console.log(`调用API: 完成机器人${robotId}的充电`)\n    return api.post(`/robots/${robotId}/complete-charging`)\n  },\n  // 新增：检查低电量机器人并自动充电\n  checkLowBattery() {\n    console.log('调用API: 检查低电量机器人')\n    return api.get('/robots/check-low-battery')\n  }\n}\n\n// 订单相关 API\nexport const orderApi = {\n  // 获取所有订单\n  getAll() {\n    console.log('调用API: 获取所有订单')\n    return new Promise((resolve, reject) => {\n      api.get('/orders/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        responseType: 'json'\n      })\n        .then(response => {\n          console.log('订单API响应状态:', response.status)\n          console.log('订单API响应头:', response.headers)\n          \n          let data = response.data\n          console.log('原始响应数据类型:', typeof data)\n          \n          // 处理各种响应类型\n          try {\n            // 1. 如果是字符串，尝试解析为JSON\n            if (typeof data === 'string') {\n              console.log('响应是字符串，尝试解析为JSON')\n              try {\n                // 处理NaN值，将其替换为null\n                const cleanedData = data.replace(/: ?NaN/g, ': null')\n                data = JSON.parse(cleanedData)\n                console.log('解析后的数据类型:', typeof data)\n              } catch (e) {\n                console.error('解析字符串为JSON失败:', e)\n              }\n            }\n            \n            // 2. 检查是否为null或undefined\n            if (data === null || data === undefined) {\n              console.error('API返回的订单数据为null或undefined')\n              resolve({ data: [] })\n              return\n            }\n            \n            // 3. 确保数据是数组\n            if (!Array.isArray(data)) {\n              console.error('API返回的订单数据不是数组:', typeof data)\n              \n              // 如果是对象且有data属性是数组，则使用该属性\n              if (data && typeof data === 'object' && Array.isArray(data.data)) {\n                console.log('使用响应对象中的data属性作为数据数组')\n                data = data.data\n              } else {\n                // 最后的后备方案：使用硬编码的订单数据\n                console.error('使用硬编码的订单数据')\n                data = generateFallbackOrders()\n              }\n            }\n            \n            // 4. 验证数组中每个元素是否为有效的订单对象\n            data = data.filter(item => {\n              const isValid = item && \n                     typeof item === 'object' && \n                     'id' in item && \n                     'robot_id' in item && \n                     'station_id' in item && \n                     'start_time' in item && \n                     'status' in item\n              \n              if (!isValid) {\n                console.warn('过滤掉无效的订单数据:', item)\n              }\n              return isValid\n            })\n            \n            console.log(`过滤后的订单数据数量: ${data.length}`)\n            \n            // 5. 如果过滤后数组为空，使用后备数据\n            if (data.length === 0) {\n              console.warn('过滤后没有有效的订单数据，使用后备数据')\n              data = generateFallbackOrders()\n            }\n            \n            // 返回处理后的数据\n            resolve({ data })\n          } catch (e) {\n            console.error('处理响应数据时出错:', e)\n            resolve({ data: generateFallbackOrders() })\n          }\n        })\n        .catch(error => {\n          console.error('获取订单数据网络请求失败:', error)\n          resolve({ data: generateFallbackOrders() })\n        })\n    })\n  },\n  // 获取单个订单\n  getById(id) {\n    return api.get(`/orders/${id}/`)\n  },\n  // 创建订单\n  create(data) {\n    return api.post('/orders/', data)\n  },\n  // 更新订单状态\n  updateStatus(id, status) {\n    return api.put(`/orders/${id}/status/`, { status })\n  }\n}\n\n// 系统相关 API\nexport const systemApi = {\n  // 获取系统设置\n  getSettings() {\n    return api.get('/system/settings/')\n  },\n  // 更新系统设置\n  updateSettings(data) {\n    return api.put('/system/settings/', data)\n  },\n  // 获取仪表盘数据\n  getDashboardData() {\n    console.log('调用API: 获取仪表盘数据')\n    return new Promise((resolve, reject) => {\n      api.get('/system/dashboard/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        },\n        responseType: 'json',\n        timeout: 10000 // 增加超时时间到10秒\n      })\n        .then(response => {\n          console.log('仪表盘API响应状态:', response.status)\n          \n          let data = response.data\n          console.log('仪表盘API响应:', data)\n          \n          // 如果响应为字符串，尝试解析\n          if (typeof data === 'string') {\n            try {\n              data = JSON.parse(data)\n            } catch (e) {\n              console.error('解析仪表盘响应失败:', e)\n            }\n          }\n          \n          resolve({ data })\n        })\n        .catch(error => {\n          console.error('获取仪表盘数据失败:', error.response || error.message || error)\n          \n          // 返回带有错误信息的响应，而不是拒绝Promise\n          resolve({\n            data: {\n              stationCount: 0,\n              onlineStations: 0,\n              offlineStations: 0,\n              robotCount: 0,\n              chargingRobots: 0,\n              waitingRobots: 0,\n              todayOrders: 0,\n              orderChangeRate: 0,\n              systemStatus: '错误',\n              systemMessage: `数据加载失败: ${error.message || '未知错误'}`\n            }\n          })\n        })\n    })\n  },\n  // 获取系统告警\n  getAlerts() {\n    return api.get('/system/alerts/')\n  },\n  // 获取系统日志\n  getLogs() {\n    return api.get('/system/logs/')\n  },\n  // 获取充电效率记录\n  getEfficiencyLogs() {\n    return api.get('/system/efficiency/')\n  }\n}\n\n// 测试API连接\nexport const testApi = {\n  checkData() {\n    console.log('调用API: 测试数据加载')\n    return new Promise((resolve, reject) => {\n      api.get('/auth/test-data/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        },\n        responseType: 'json',\n        timeout: 10000 // 增加超时时间到10秒\n      })\n        .then(response => {\n          console.log('测试数据API响应状态:', response.status)\n          console.log('测试数据API响应头:', response.headers)\n          \n          let data = response.data\n          console.log('测试数据API响应:', data)\n          \n          // 如果响应为字符串，尝试解析\n          if (typeof data === 'string') {\n            try {\n              data = JSON.parse(data)\n            } catch (e) {\n              console.error('解析测试数据响应失败:', e)\n            }\n          }\n          \n          resolve({ data })\n        })\n        .catch(error => {\n          console.error('测试数据加载失败:', error.response || error.message || error)\n          \n          // 返回带有错误信息的响应，而不是拒绝Promise\n          resolve({\n            data: {\n              error: error.message || '未知错误',\n              success: false,\n              errorDetails: error.response ? error.response.data : null\n            }\n          })\n        })\n    })\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}