{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createBlock as _createBlock, normalizeClass as _normalizeClass, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"energy-efficiency-analysis\"\n};\nvar _hoisted_2 = {\n  \"class\": \"kpi-title\"\n};\nvar _hoisted_3 = {\n  \"class\": \"kpi-value\"\n};\nvar _hoisted_4 = {\n  \"class\": \"value-number\"\n};\nvar _hoisted_5 = {\n  \"class\": \"value-unit\"\n};\nvar _hoisted_6 = {\n  \"class\": \"chart-header\"\n};\nvar _hoisted_7 = {\n  \"class\": \"chart-content\"\n};\nvar _hoisted_8 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_9 = {\n  ref: \"efficiencyChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_10 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_11 = {\n  ref: \"consumptionChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_12 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_13 = {\n  ref: \"utilizationChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_14 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_15 = {\n  ref: \"robotChart\",\n  \"class\": \"chart\"\n};\nvar _hoisted_16 = {\n  \"class\": \"chart-item\"\n};\nvar _hoisted_17 = {\n  ref: \"peakChart\",\n  \"class\": \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InfoFilled = _resolveComponent(\"InfoFilled\");\n  var _component_el_icon = _resolveComponent(\"el-icon\");\n  var _component_el_tooltip = _resolveComponent(\"el-tooltip\");\n  var _component_ArrowUp = _resolveComponent(\"ArrowUp\");\n  var _component_ArrowDown = _resolveComponent(\"ArrowDown\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_col = _resolveComponent(\"el-col\");\n  var _component_el_row = _resolveComponent(\"el-row\");\n  var _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  var _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" KPI指标卡片标题 \"), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    \"class\": \"section-title\"\n  }, [_createElementVNode(\"h2\", null, \"核心性能指标\"), _createElementVNode(\"div\", {\n    \"class\": \"section-subtitle\"\n  }, \"30天内充电系统性能概览\")], -1 /* HOISTED */)), _createCommentVNode(\" KPI指标卡片 \"), _createVNode(_component_el_row, {\n    gutter: 30,\n    \"class\": \"kpi-container\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.kpiData, function (kpi, index) {\n        return _openBlock(), _createBlock(_component_el_col, {\n          xs: 12,\n          sm: 8,\n          md: 6,\n          lg: 4,\n          key: index\n        }, {\n          \"default\": _withCtx(function () {\n            return [_createVNode(_component_el_card, {\n              \"class\": \"kpi-card\",\n              shadow: \"hover\"\n            }, {\n              \"default\": _withCtx(function () {\n                return [_createElementVNode(\"div\", _hoisted_2, [_createTextVNode(_toDisplayString(kpi.title) + \" \", 1 /* TEXT */), _createVNode(_component_el_tooltip, {\n                  content: $options.getKpiDescription(index),\n                  placement: \"top\",\n                  effect: \"light\"\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createVNode(_component_el_icon, {\n                      \"class\": \"info-icon\"\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createVNode(_component_InfoFilled)];\n                      }),\n                      _: 1 /* STABLE */\n                    })];\n                  }),\n                  _: 2 /* DYNAMIC */\n                }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"content\"])]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString(kpi.value), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(kpi.unit), 1 /* TEXT */)]), _createVNode(_component_el_tooltip, {\n                  content: \"\\u4E0E\\u4E0A\\u4E00\\u65F6\\u6BB5\\u76F8\\u6BD4\".concat(kpi.trend === 'up' ? '增长' : '下降', \"\\u4E86\").concat(kpi.change, \"%\"),\n                  placement: \"bottom\",\n                  effect: \"light\"\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createElementVNode(\"div\", {\n                      \"class\": _normalizeClass([\"kpi-change\", kpi.trend])\n                    }, [kpi.trend === 'up' ? (_openBlock(), _createBlock(_component_el_icon, {\n                      key: 0\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createVNode(_component_ArrowUp)];\n                      }),\n                      _: 1 /* STABLE */\n                    })) : (_openBlock(), _createBlock(_component_el_icon, {\n                      key: 1\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createVNode(_component_ArrowDown)];\n                      }),\n                      _: 1 /* STABLE */\n                    })), _createTextVNode(\" \" + _toDisplayString(kpi.change) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)];\n                  }),\n                  _: 2 /* DYNAMIC */\n                }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"content\"])];\n              }),\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)];\n          }),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 分析图表区域标题 \"), _cache[7] || (_cache[7] = _createElementVNode(\"div\", {\n    \"class\": \"section-title\"\n  }, [_createElementVNode(\"h2\", null, \"详细分析图表\"), _createElementVNode(\"div\", {\n    \"class\": \"section-subtitle\"\n  }, \"充电系统各维度分析数据\")], -1 /* HOISTED */)), _createCommentVNode(\" 分析图表区域 \"), _createVNode(_component_el_card, {\n    \"class\": \"chart-container\",\n    shadow: \"hover\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"h3\", null, _toDisplayString($data.currentChartTitle), 1 /* TEXT */), _createVNode(_component_el_radio_group, {\n        modelValue: $data.currentChart,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.currentChart = $event;\n        }),\n        onChange: $options.handleChartChange\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_radio_button, {\n            value: 'efficiency'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[1] || (_cache[1] = [_createTextVNode(\"充电效率趋势\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [1]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'consumption'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[2] || (_cache[2] = [_createTextVNode(\"能耗分布\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [2]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'utilization'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[3] || (_cache[3] = [_createTextVNode(\"充电站利用率\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [3]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'robot'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[4] || (_cache[4] = [_createTextVNode(\"机器人充电分析\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [4]\n          }), _createVNode(_component_el_radio_button, {\n            value: 'peak'\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[5] || (_cache[5] = [_createTextVNode(\"充电高峰期\")]);\n            }),\n            _: 1 /* STABLE */,\n            __: [5]\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" 不同图表的容器 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'efficiency']]), _withDirectives(_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'consumption']]), _withDirectives(_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'utilization']]), _withDirectives(_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'robot']]), _withDirectives(_createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), [[_vShow, $data.currentChart === 'peak']])])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_createVNode","_component_el_row","gutter","_withCtx","_Fragment","_renderList","$data","kpiData","kpi","index","_createBlock","_component_el_col","xs","sm","md","lg","key","_component_el_card","shadow","_hoisted_2","_createTextVNode","_toDisplayString","title","_component_el_tooltip","content","$options","getKpiDescription","placement","effect","_component_el_icon","_component_InfoFilled","_","_hoisted_3","_hoisted_4","value","_hoisted_5","unit","concat","trend","change","_normalizeClass","_component_ArrowUp","_component_ArrowDown","_hoisted_6","currentChartTitle","_component_el_radio_group","modelValue","currentChart","_cache","$event","onChange","handleChartChange","_component_el_radio_button","__","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\EnergyEfficiency.vue"],"sourcesContent":["<template>\r\n  <div class=\"energy-efficiency-analysis\">\r\n    <!-- KPI指标卡片标题 -->\r\n    <div class=\"section-title\">\r\n      <h2>核心性能指标</h2>\r\n      <div class=\"section-subtitle\">30天内充电系统性能概览</div>\r\n    </div>\r\n    \r\n    <!-- KPI指标卡片 -->\r\n    <el-row :gutter=\"30\" class=\"kpi-container\">\r\n      <el-col :xs=\"12\" :sm=\"8\" :md=\"6\" :lg=\"4\" v-for=\"(kpi, index) in kpiData\" :key=\"index\">\r\n        <el-card class=\"kpi-card\" shadow=\"hover\">\r\n          <div class=\"kpi-title\">\r\n            {{ kpi.title }}\r\n            <el-tooltip \r\n              :content=\"getKpiDescription(index)\" \r\n              placement=\"top\"\r\n              effect=\"light\">\r\n              <el-icon class=\"info-icon\"><InfoFilled /></el-icon>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"kpi-value\">\r\n            <span class=\"value-number\">{{ kpi.value }}</span><span class=\"value-unit\">{{ kpi.unit }}</span>\r\n          </div>\r\n          <el-tooltip \r\n            :content=\"`与上一时段相比${kpi.trend === 'up' ? '增长' : '下降'}了${kpi.change}%`\" \r\n            placement=\"bottom\"\r\n            effect=\"light\">\r\n            <div class=\"kpi-change\" :class=\"kpi.trend\">\r\n              <el-icon v-if=\"kpi.trend === 'up'\"><ArrowUp /></el-icon>\r\n              <el-icon v-else><ArrowDown /></el-icon>\r\n              {{ kpi.change }}%\r\n            </div>\r\n          </el-tooltip>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 分析图表区域标题 -->\r\n    <div class=\"section-title\">\r\n      <h2>详细分析图表</h2>\r\n      <div class=\"section-subtitle\">充电系统各维度分析数据</div>\r\n    </div>\r\n\r\n    <!-- 分析图表区域 -->\r\n    <el-card class=\"chart-container\" shadow=\"hover\">\r\n      <div class=\"chart-header\">\r\n        <h3>{{ currentChartTitle }}</h3>\r\n        <el-radio-group v-model=\"currentChart\" @change=\"handleChartChange\">\r\n          <el-radio-button :value=\"'efficiency'\">充电效率趋势</el-radio-button>\r\n          <el-radio-button :value=\"'consumption'\">能耗分布</el-radio-button>\r\n          <el-radio-button :value=\"'utilization'\">充电站利用率</el-radio-button>\r\n          <el-radio-button :value=\"'robot'\">机器人充电分析</el-radio-button>\r\n          <el-radio-button :value=\"'peak'\">充电高峰期</el-radio-button>\r\n        </el-radio-group>\r\n      </div>\r\n      <div class=\"chart-content\">\r\n        <!-- 不同图表的容器 -->\r\n        <div v-show=\"currentChart === 'efficiency'\" class=\"chart-item\">\r\n          <div ref=\"efficiencyChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'consumption'\" class=\"chart-item\">\r\n          <div ref=\"consumptionChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'utilization'\" class=\"chart-item\">\r\n          <div ref=\"utilizationChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'robot'\" class=\"chart-item\">\r\n          <div ref=\"robotChart\" class=\"chart\"></div>\r\n        </div>\r\n        <div v-show=\"currentChart === 'peak'\" class=\"chart-item\">\r\n          <div ref=\"peakChart\" class=\"chart\"></div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport energyEfficiencyApi from '@/api/energyEfficiency';\r\nimport { formatDateTime, calculateDuration } from '@/utils/dateTime';\r\nimport { ArrowUp, ArrowDown, InfoFilled } from '@element-plus/icons-vue';\r\n\r\nexport default {\r\n  name: 'EnergyEfficiencyAnalysis',\r\n  components: {\r\n    ArrowUp,\r\n    ArrowDown,\r\n    InfoFilled\r\n  },\r\n  data() {\r\n    return {\r\n      // 固定的默认筛选条件（不再显示在UI上）\r\n      dateRange: [new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000), new Date()],\r\n      selectedStations: [],\r\n      selectedRobots: [],\r\n      \r\n      // 数据列表\r\n      stations: [],\r\n      robots: [],\r\n      \r\n      // 图表相关\r\n      currentChart: 'efficiency',\r\n      currentChartTitle: '充电效率趋势分析',\r\n      charts: {\r\n        efficiency: null,\r\n        consumption: null,\r\n        utilization: null,\r\n        robot: null,\r\n        peak: null\r\n      },\r\n      \r\n      // KPI数据\r\n      kpiData: [\r\n        { title: '平均充电效率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总能耗', value: 0, unit: 'kWh', change: 0, trend: 'up' },\r\n        { title: '充电器利用率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '平均等待时间', value: 0, unit: 'min', change: 0, trend: 'down' },\r\n        { title: '充电成功率', value: 0, unit: '%', change: 0, trend: 'up' },\r\n        { title: '总充电次数', value: 0, unit: '次', change: 0, trend: 'up' }\r\n      ]\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    this.initData();\r\n    \r\n    // 添加窗口resize监听器，确保图表大小适应窗口变化\r\n    window.addEventListener('resize', this.handleResize);\r\n    \r\n    // 监听充电站数据变化事件\r\n    try {\r\n      if (this.$root && this.$root.$on) {\r\n        this.$root.$on('station-data-changed', this.handleStationDataChanged);\r\n        // 监听充电站即将删除的事件，提前清理资源\r\n        this.$root.$on('station-pre-delete', this.handleStationPreDelete);\r\n        // 监听强制刷新图表的事件\r\n        this.$root.$on('force-refresh-charts', this.forceRefreshCharts);\r\n      }\r\n    } catch (e) {\r\n      console.error('注册全局事件监听失败:', e);\r\n    }\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    // 先清理所有图表资源\r\n    this.disposeAllCharts();\r\n    \r\n    // 清空所有DOM引用\r\n    try {\r\n      if (this.$refs.efficiencyChart) this.$refs.efficiencyChart.innerHTML = '';\r\n      if (this.$refs.consumptionChart) this.$refs.consumptionChart.innerHTML = '';\r\n      if (this.$refs.utilizationChart) this.$refs.utilizationChart.innerHTML = '';\r\n      if (this.$refs.robotChart) this.$refs.robotChart.innerHTML = '';\r\n      if (this.$refs.peakChart) this.$refs.peakChart.innerHTML = '';\r\n    } catch (error) {\r\n      console.error('清理图表DOM引用失败:', error);\r\n    }\r\n    \r\n    // 移除resize监听器\r\n    window.removeEventListener('resize', this.handleResize);\r\n    \r\n    // 移除充电站数据变化事件监听\r\n    try {\r\n      if (this.$root && this.$root.$off) {\r\n        this.$root.$off('station-data-changed', this.handleStationDataChanged);\r\n        this.$root.$off('station-pre-delete', this.handleStationPreDelete);\r\n        this.$root.$off('force-refresh-charts', this.forceRefreshCharts);\r\n      }\r\n    } catch (e) {\r\n      console.error('移除全局事件监听失败:', e);\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    // 强制刷新所有图表\r\n    forceRefreshCharts() {\r\n      console.log('接收到强制刷新图表的请求');\r\n      // 先清理所有现有图表\r\n      this.disposeAllCharts();\r\n      \r\n      // 清空DOM内容\r\n      try {\r\n        if (this.$refs.efficiencyChart) this.$refs.efficiencyChart.innerHTML = '';\r\n        if (this.$refs.consumptionChart) this.$refs.consumptionChart.innerHTML = '';\r\n        if (this.$refs.utilizationChart) this.$refs.utilizationChart.innerHTML = '';\r\n        if (this.$refs.robotChart) this.$refs.robotChart.innerHTML = '';\r\n        if (this.$refs.peakChart) this.$refs.peakChart.innerHTML = '';\r\n      } catch (error) {\r\n        console.error('清理图表DOM引用失败:', error);\r\n      }\r\n      \r\n      // 等待DOM更新后重新初始化\r\n      this.$nextTick(() => {\r\n        // 重新获取数据并渲染当前选中的图表\r\n        this.fetchChartData();\r\n      });\r\n    },\r\n    \r\n    // 处理充电站即将删除的事件\r\n    handleStationPreDelete(stationId) {\r\n      console.log(`充电站 ${stationId} 即将被删除，提前清理资源`);\r\n      // 立即清理所有图表实例\r\n      this.disposeAllCharts();\r\n      \r\n      // 清空DOM内容，确保没有悬挂的观察者\r\n      try {\r\n        if (this.$refs.efficiencyChart) this.$refs.efficiencyChart.innerHTML = '';\r\n        if (this.$refs.consumptionChart) this.$refs.consumptionChart.innerHTML = '';\r\n        if (this.$refs.utilizationChart) this.$refs.utilizationChart.innerHTML = '';\r\n        if (this.$refs.robotChart) this.$refs.robotChart.innerHTML = '';\r\n        if (this.$refs.peakChart) this.$refs.peakChart.innerHTML = '';\r\n      } catch (error) {\r\n        console.error('清理图表DOM引用失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 处理充电站数据变化事件\r\n    handleStationDataChanged() {\r\n      console.log('检测到充电站数据变化，刷新图表');\r\n      // 先清理所有图表实例\r\n      this.disposeAllCharts();\r\n      // 然后重新获取数据并渲染\r\n      this.$nextTick(() => {\r\n        this.initData();\r\n      });\r\n    },\r\n    \r\n    // 处理窗口调整大小事件\r\n    handleResize() {\r\n      // 调整所有已创建的图表\r\n      Object.keys(this.charts).forEach(key => {\r\n        if (this.charts[key]) {\r\n          try {\r\n            this.charts[key].resize();\r\n          } catch (error) {\r\n            console.error(`调整图表 ${key} 大小失败:`, error);\r\n            // 如果调整大小失败，尝试销毁图表以避免进一步的错误\r\n            try {\r\n              this.charts[key].dispose();\r\n              this.charts[key] = null;\r\n            } catch (disposeError) {\r\n              console.error(`销毁图表 ${key} 失败:`, disposeError);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 销毁所有图表实例\r\n    disposeAllCharts() {\r\n      Object.keys(this.charts).forEach(key => {\r\n        if (this.charts[key]) {\r\n          try {\r\n            // 移除所有事件监听器\r\n            this.charts[key].off('click');\r\n            this.charts[key].off('resize');\r\n            // 销毁图表实例\r\n            this.charts[key].dispose();\r\n            this.charts[key] = null;\r\n          } catch (error) {\r\n            console.error(`销毁图表 ${key} 失败:`, error);\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 清理所有的DOM引用\r\n      try {\r\n        // 如果引用存在，则清空相关DOM元素内容\r\n        if (this.$refs.efficiencyChart) this.$refs.efficiencyChart.innerHTML = '';\r\n        if (this.$refs.consumptionChart) this.$refs.consumptionChart.innerHTML = '';\r\n        if (this.$refs.utilizationChart) this.$refs.utilizationChart.innerHTML = '';\r\n        if (this.$refs.robotChart) this.$refs.robotChart.innerHTML = '';\r\n        if (this.$refs.peakChart) this.$refs.peakChart.innerHTML = '';\r\n      } catch (error) {\r\n        console.error('清理图表DOM引用失败:', error);\r\n      }\r\n      \r\n      // 强制执行一次垃圾回收\r\n      try {\r\n        if (window.gc) window.gc();\r\n      } catch (e) {\r\n        // 大多数浏览器不支持直接调用gc，忽略错误\r\n      }\r\n    },\r\n    \r\n    async initData() {\r\n      try {\r\n        // 获取充电站列表\r\n        const stationsResponse = await energyEfficiencyApi.getStations();\r\n        this.stations = stationsResponse.data;\r\n        \r\n        // 获取机器人列表\r\n        const robotsResponse = await energyEfficiencyApi.getRobots();\r\n        this.robots = robotsResponse.data;\r\n        \r\n        // 获取初始数据\r\n        this.fetchKpiData();\r\n        this.fetchChartData();\r\n      } catch (error) {\r\n        console.error('初始化数据失败:', error);\r\n        this.$message.error('加载数据失败，请重试');\r\n      }\r\n    },\r\n    \r\n    // 刷新所有数据\r\n    refreshData() {\r\n      this.fetchKpiData();\r\n      this.fetchChartData();\r\n    },\r\n    \r\n    // 获取KPI数据\r\n    async fetchKpiData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        const response = await energyEfficiencyApi.getKpiData(params);\r\n        \r\n        // 格式化能耗值，根据大小选择合适的单位\r\n        const formatEnergy = (value) => {\r\n          if (value < 1) {\r\n            return { value: (value * 1000).toFixed(0), unit: 'Wh' };\r\n          } else if (value >= 1 && value < 1000) {\r\n            return { value: value.toFixed(2), unit: 'kWh' };\r\n          } else {\r\n            return { value: (value / 1000).toFixed(2), unit: 'MWh' };\r\n          }\r\n        };\r\n        \r\n        // 格式化时间，大于60分钟转为小时和分钟\r\n        const formatTime = (minutes) => {\r\n          if (minutes < 60) {\r\n            return { value: minutes.toFixed(0), unit: 'min' };\r\n          } else {\r\n            const hours = Math.floor(minutes / 60);\r\n            const mins = Math.round(minutes % 60);\r\n            return { value: `${hours}h ${mins}`, unit: 'min' };\r\n          }\r\n        };\r\n        \r\n        // 格式化次数，大于1000次使用k单位\r\n        const formatCount = (count) => {\r\n          if (count < 1000) {\r\n            return { value: count, unit: '次' };\r\n          } else {\r\n            return { value: (count / 1000).toFixed(1), unit: 'k次' };\r\n          }\r\n        };\r\n        \r\n        // 格式化变化率，统一显示格式\r\n        const formatChangeRate = (rate) => {\r\n          // 对极端值进行处理\r\n          if (!rate && rate !== 0) return \"0.00\";\r\n          if (!isFinite(rate)) return \"0.00\";\r\n          \r\n          // 对变化率进行合理限制，避免极端值\r\n          let limitedRate = rate;\r\n          if (Math.abs(limitedRate) > 1000) {\r\n            limitedRate = (limitedRate > 0) ? 999.99 : -999.99;\r\n          }\r\n          \r\n          // 统一保留2位小数\r\n          return limitedRate.toFixed(2);\r\n        };\r\n        \r\n        // 获取能耗值和单位\r\n        const energyData = formatEnergy(response.data.totalEnergy);\r\n        // 获取等待时间值和单位\r\n        const waitTimeData = formatTime(response.data.avgWaitTime);\r\n        // 获取充电次数值和单位\r\n        const ordersData = formatCount(response.data.totalOrders || 0);\r\n        \r\n        this.kpiData = [\r\n          { \r\n            title: '平均充电效率', \r\n            value: response.data.avgEfficiency.toFixed(2), \r\n            unit: '%', \r\n            change: formatChangeRate(response.data.efficiencyChange),\r\n            trend: response.data.efficiencyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总能耗', \r\n            value: energyData.value, \r\n            unit: energyData.unit, \r\n            change: formatChangeRate(response.data.energyChange),\r\n            trend: response.data.energyChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电器利用率', \r\n            value: response.data.utilization.toFixed(2), \r\n            unit: '%', \r\n            change: formatChangeRate(response.data.utilizationChange),\r\n            trend: response.data.utilizationChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '平均等待时间', \r\n            value: waitTimeData.value, \r\n            unit: waitTimeData.unit, \r\n            change: formatChangeRate(response.data.waitTimeChange),\r\n            trend: response.data.waitTimeChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '充电成功率', \r\n            value: response.data.successRate.toFixed(2), \r\n            unit: '%', \r\n            change: formatChangeRate(response.data.successRateChange),\r\n            trend: response.data.successRateChange >= 0 ? 'up' : 'down' \r\n          },\r\n          { \r\n            title: '总充电次数', \r\n            value: ordersData.value, \r\n            unit: ordersData.unit, \r\n            change: formatChangeRate(response.data.ordersChange || 0),\r\n            trend: (response.data.ordersChange || 0) >= 0 ? 'up' : 'down' \r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.error('获取KPI数据失败:', error);\r\n        this.$message.error('获取KPI数据失败');\r\n      }\r\n    },\r\n    \r\n    // 获取图表数据并渲染\r\n    async fetchChartData() {\r\n      try {\r\n        const params = this.getFilterParams();\r\n        \r\n        // 根据当前选择的图表类型获取数据\r\n        switch (this.currentChart) {\r\n          case 'efficiency':\r\n            await this.renderEfficiencyChart(params);\r\n            break;\r\n          case 'consumption':\r\n            await this.renderConsumptionChart(params);\r\n            break;\r\n          case 'utilization':\r\n            await this.renderUtilizationChart(params);\r\n            break;\r\n          case 'robot':\r\n            await this.renderRobotChart(params);\r\n            break;\r\n          case 'peak':\r\n            await this.renderPeakChart(params);\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取图表数据失败:', error);\r\n        this.$message.error('获取图表数据失败');\r\n        \r\n        // 清理错误的图表实例\r\n        const chartKey = this.currentChart;\r\n        if (this.charts[chartKey]) {\r\n          try {\r\n            this.charts[chartKey].dispose();\r\n            this.charts[chartKey] = null;\r\n          } catch (cleanupError) {\r\n            console.error(`清理图表失败: ${cleanupError}`);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 充电效率趋势图\r\n    async renderEfficiencyChart(params) {\r\n      try {\r\n        const response = await energyEfficiencyApi.getEfficiencyTrend(params);\r\n        \r\n        // 检查返回的数据\r\n        if (!response.data || !response.data.stations || !response.data.timeline) {\r\n          console.error('效率趋势数据异常:', response.data);\r\n          const chart = await this.safeInitChart('efficiencyChart', 'efficiency');\r\n          if (chart) {\r\n            chart.setOption({\r\n              title: {\r\n                text: '充电效率趋势分析 (暂无数据)',\r\n                left: 'center'\r\n              }\r\n            });\r\n          }\r\n          return;\r\n        }\r\n        \r\n        // 安全创建图表\r\n        const chart = await this.safeInitChart('efficiencyChart', 'efficiency');\r\n        if (!chart) return;\r\n      \r\n        const option = {\r\n          title: {\r\n            text: '充电效率趋势分析',\r\n            left: 'center',\r\n            top: '10px'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: response.data.stations.map(station => station.name),\r\n            selected: response.data.stations.reduce((acc, station) => {\r\n              acc[station.name] = true;\r\n              return acc;\r\n            }, {}),\r\n            top: '40px',\r\n            type: 'scroll',\r\n            orient: 'horizontal',\r\n            selectedMode: false\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            top: '100px',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            data: response.data.timeline\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            name: '充电效率 (%)',\r\n            min: 50,\r\n            max: 100\r\n          },\r\n          series: response.data.stations.map(station => ({\r\n            name: station.name,\r\n            type: 'line',\r\n            data: station.efficiencyData,\r\n            smooth: true\r\n          }))\r\n        };\r\n        \r\n        chart.setOption(option);\r\n        \r\n        // 取消图表的点击事件\r\n        chart.off('click');\r\n      } catch (error) {\r\n        console.error('渲染效率趋势图失败:', error);\r\n        \r\n        // 错误情况下，显示错误信息\r\n        try {\r\n          const chart = await this.safeInitChart('efficiencyChart', 'efficiency');\r\n          if (chart) {\r\n            chart.setOption({\r\n              title: {\r\n                text: '充电效率趋势分析 (加载失败)',\r\n                textStyle: { color: '#ff0000' },\r\n                left: 'center'\r\n              }\r\n            });\r\n          }\r\n        } catch (e) {\r\n          console.error('显示错误信息失败:', e);\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 能耗分布热力图\r\n    async renderConsumptionChart(params) {\r\n      try {\r\n        console.log('获取能耗分布数据，参数:', params);\r\n        const response = await energyEfficiencyApi.getEnergyConsumptionDistribution(params);\r\n        console.log('能耗分布数据响应:', response.data);\r\n        \r\n        // 检查返回的数据\r\n        if (!response.data || !response.data.days || !response.data.data) {\r\n          console.error('能耗分布数据异常:', response.data);\r\n          const chart = await this.safeInitChart('consumptionChart', 'consumption');\r\n          if (chart) {\r\n            chart.setOption({\r\n              title: {\r\n                text: '能耗分布热力图 (暂无数据)',\r\n                left: 'center'\r\n              }\r\n            });\r\n          }\r\n          return;\r\n        }\r\n        \r\n        // 检查数据是否为空数组\r\n        if (response.data.days.length === 0 || response.data.data.length === 0) {\r\n          console.warn('能耗分布数据为空');\r\n          const chart = await this.safeInitChart('consumptionChart', 'consumption');\r\n          if (chart) {\r\n            chart.setOption({\r\n              title: {\r\n                text: '能耗分布热力图 (暂无数据)',\r\n                left: 'center'\r\n              }\r\n            });\r\n          }\r\n          return;\r\n        }\r\n        \r\n        console.log('能耗分布数据:', response.data.data);\r\n        \r\n        // 安全创建图表\r\n        const consumptionChart = await this.safeInitChart('consumptionChart', 'consumption');\r\n        if (!consumptionChart) return;\r\n        \r\n        // 设置容器尺寸\r\n        if (this.$refs.consumptionChart) {\r\n          this.$refs.consumptionChart.style.width = '100%';\r\n          this.$refs.consumptionChart.style.height = '500px';\r\n          \r\n          // 调整图表大小以适应容器\r\n          consumptionChart.resize();\r\n        }\r\n        \r\n        // 直接使用后端返回的日期作为Y轴\r\n        const days = response.data.days;\r\n        \r\n        // 提取所有小时作为X轴（0-23）\r\n        const hours = [];\r\n        for (let i = 0; i < 24; i++) {\r\n          hours.push(i.toString());\r\n        }\r\n        \r\n        // 将API返回的数据转换为ECharts需要的格式 [x索引, y索引, 值]\r\n        const formattedData = [];\r\n        \r\n        // 找出数据中的最小值和最大值，用于设置图例刻度\r\n        let minValue = Infinity;\r\n        let maxValue = 0;\r\n        \r\n        if (Array.isArray(response.data.data)) {\r\n          response.data.data.forEach(item => {\r\n            if (Array.isArray(item) && item.length === 3) {\r\n              const day = item[0];\r\n              const hour = parseInt(item[1]);\r\n              const value = parseFloat(item[2] || 0);\r\n              \r\n              // 更新最小值和最大值\r\n              if (!isNaN(value)) {\r\n                minValue = Math.min(minValue, value);\r\n                maxValue = Math.max(maxValue, value);\r\n              }\r\n              \r\n              // 确保值是有效的数字\r\n              if (!isNaN(value) && hour >= 0 && hour < 24) {\r\n                // 找到日期在Y轴中的索引\r\n                const dayIndex = days.indexOf(day);\r\n                \r\n                // 只有当日期在Y轴中存在时才添加数据点\r\n                if (dayIndex !== -1) {\r\n                  formattedData.push([hour, dayIndex, value]);\r\n                }\r\n              }\r\n            }\r\n          });\r\n        } else {\r\n          console.error('能耗数据不是数组格式');\r\n          // 创建默认数据以避免图表崩溃\r\n          for (let dayIndex = 0; dayIndex < days.length; dayIndex++) {\r\n            for (let hour = 0; hour < 24; hour++) {\r\n              formattedData.push([hour, dayIndex, 0]);\r\n            }\r\n          }\r\n        }\r\n        \r\n        console.log('格式化后的数据点数:', formattedData.length);\r\n        console.log('数据范围:', minValue, '至', maxValue);\r\n        \r\n        // 如果没有有效数据，设置默认值避免图表错误\r\n        if (formattedData.length === 0 || minValue === Infinity) {\r\n          minValue = 0;\r\n          maxValue = 100;\r\n        }\r\n        \r\n        // 使用后端返回的最大值或计算得到的最大值\r\n        const visualMaxValue = response.data.maxValue || Math.ceil(maxValue) || 100;\r\n        \r\n        // 创建均匀分布的刻度值数组\r\n        const pieces = [];\r\n        const stepCount = 10; // 分成10个刻度\r\n        const step = visualMaxValue / stepCount;\r\n        \r\n        for (let i = 0; i < stepCount; i++) {\r\n          const startValue = i * step;\r\n          const endValue = (i + 1) * step;\r\n          pieces.push({\r\n            min: startValue,\r\n            max: endValue,\r\n            label: `${startValue.toFixed(0)}-${endValue.toFixed(0)}`\r\n          });\r\n        }\r\n        \r\n        // 使用简单的配置\r\n        const option = {\r\n          title: {\r\n            text: '能耗分布热力图',\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            position: 'top',\r\n            formatter: function (params) {\r\n              const hour = params.data[0];\r\n              const day = days[params.data[1]];\r\n              const value = params.data[2];\r\n              return `${hour}:00 - ${(parseInt(hour) + 1) % 24}:00<br>日期: ${day}<br>能耗: ${value.toFixed(2)} kWh`;\r\n            }\r\n          },\r\n          grid: {\r\n            height: '70%',\r\n            top: '60px',\r\n            left: '80px',\r\n            right: '30px',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: hours,\r\n            axisLabel: {\r\n              formatter: '{value}:00',\r\n              interval: function (index, value) {\r\n                // 每2小时显示一个标签\r\n                return index % 2 === 0;\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: days,\r\n            axisLabel: {\r\n              formatter: function (value) {\r\n                const parts = value.split('-');\r\n                return parts[1] + '-' + parts[2]; // 只显示月-日\r\n              }\r\n            }\r\n          },\r\n          visualMap: {\r\n            type: 'continuous',\r\n            min: 0,\r\n            max: visualMaxValue,\r\n            precision: 0,\r\n            calculable: true,\r\n            orient: 'horizontal',\r\n            left: 'center',\r\n            bottom: '5%',\r\n            inRange: {\r\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\r\n            },\r\n            // 添加具体的数字刻度\r\n            splitNumber: 10, // 分割段数\r\n            formatter: function (value) {\r\n              return value.toFixed(0) + ' kWh';\r\n            },\r\n            textStyle: {\r\n              color: '#333'\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: '能耗 (kWh)',\r\n              type: 'heatmap',\r\n              data: formattedData,\r\n              emphasis: {\r\n                itemStyle: {\r\n                  shadowBlur: 10,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        };\r\n        \r\n        // 应用配置并渲染\r\n        consumptionChart.setOption(option);\r\n        console.log('热力图渲染成功');\r\n        \r\n        // 取消图表的点击事件\r\n        consumptionChart.off('click');\r\n      } catch (error) {\r\n        console.error('渲染能耗分布热力图失败:', error);\r\n        \r\n        // 尝试显示错误信息\r\n        try {\r\n          const chart = await this.safeInitChart('consumptionChart', 'consumption');\r\n          if (chart) {\r\n            chart.setOption({\r\n              title: {\r\n                text: '能耗分布热力图 (加载失败)',\r\n                textStyle: { color: '#ff0000' },\r\n                left: 'center'\r\n              }\r\n            });\r\n          }\r\n        } catch (e) {\r\n          console.error('显示错误信息失败:', e);\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 充电站利用率对比\r\n    async renderUtilizationChart(params) {\r\n      try {\r\n        const response = await energyEfficiencyApi.getStationUtilization(params);\r\n        \r\n        // 确保DOM元素存在\r\n        if (!this.$refs.utilizationChart) {\r\n          console.error('利用率图表DOM元素不存在');\r\n          return;\r\n        }\r\n        \r\n        // 检查返回数据\r\n        if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {\r\n          console.error('充电站利用率数据异常:', response.data);\r\n          // 创建没有数据的图表以避免错误\r\n          if (this.charts.utilization) {\r\n            this.charts.utilization.dispose();\r\n          }\r\n          this.charts.utilization = echarts.init(this.$refs.utilizationChart);\r\n          this.charts.utilization.setOption({\r\n            title: {\r\n              text: '充电站利用率对比 (暂无数据)',\r\n              left: 'center'\r\n            }\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 销毁旧图表实例\r\n        if (this.charts.utilization) {\r\n          try {\r\n            this.charts.utilization.dispose();\r\n            this.charts.utilization = null;\r\n          } catch (error) {\r\n            console.error('销毁旧利用率图表失败:', error);\r\n          }\r\n        }\r\n        \r\n        // 重新创建图表实例\r\n        this.charts.utilization = echarts.init(this.$refs.utilizationChart);\r\n        \r\n        // 数据处理：确保所有数据都是正数，且单位一致\r\n        const processedData = response.data.map(item => {\r\n          return {\r\n            stationName: item.stationName || '未知充电站',\r\n            busyHours: Math.abs(parseFloat(item.busyHours || 0)),\r\n            idleHours: Math.abs(parseFloat(item.idleHours || 0)),\r\n            maintenanceHours: Math.abs(parseFloat(item.maintenanceHours || 0)),\r\n            errorHours: Math.abs(parseFloat(item.errorHours || 0))\r\n          };\r\n        });\r\n        \r\n        // 验证数据总和是否合理，如果总和异常大，则进行归一化处理\r\n        processedData.forEach(item => {\r\n          const total = item.busyHours + item.idleHours + item.maintenanceHours + item.errorHours;\r\n          // 如果总时间超过48小时（允许一定误差），则认为数据异常，需要归一化\r\n          if (total > 48) {\r\n            const factor = 24 / total;\r\n            item.busyHours *= factor;\r\n            item.idleHours *= factor;\r\n            item.maintenanceHours *= factor;\r\n            item.errorHours *= factor;\r\n          }\r\n        });\r\n        \r\n        console.log('处理后的充电站利用率数据:', processedData);\r\n        \r\n        const option = {\r\n          title: {\r\n            text: '充电站利用率对比',\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            },\r\n            formatter: function(params) {\r\n              let tooltip = params[0].name + '<br/>';\r\n              let total = 0;\r\n              \r\n              params.forEach(param => {\r\n                tooltip += param.seriesName + ': ' + param.value.toFixed(2) + ' 小时<br/>';\r\n                total += param.value;\r\n              });\r\n              \r\n              tooltip += '<br/>总计: ' + total.toFixed(2) + ' 小时';\r\n              return tooltip;\r\n            }\r\n          },\r\n          legend: {\r\n            data: ['忙碌时间', '空闲时间', '维护时间', '故障时间'],\r\n            selectedMode: false,\r\n            top: '30px'\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            top: '80px',\r\n            containLabel: true\r\n          },\r\n          xAxis: {\r\n            type: 'value',\r\n            name: '小时',\r\n            min: 0,\r\n            max: 24,\r\n            axisLabel: {\r\n              formatter: '{value} h'\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'category',\r\n            data: processedData.map(item => item.stationName)\r\n          },\r\n          series: [\r\n            {\r\n              name: '忙碌时间',\r\n              type: 'bar',\r\n              stack: 'total',\r\n              label: {\r\n                show: true,\r\n                formatter: '{c} h'\r\n              },\r\n              emphasis: {\r\n                focus: 'series'\r\n              },\r\n              data: processedData.map(item => parseFloat(item.busyHours.toFixed(2)))\r\n            },\r\n            {\r\n              name: '空闲时间',\r\n              type: 'bar',\r\n              stack: 'total',\r\n              label: {\r\n                show: true,\r\n                formatter: '{c} h'\r\n              },\r\n              emphasis: {\r\n                focus: 'series'\r\n              },\r\n              data: processedData.map(item => parseFloat(item.idleHours.toFixed(2)))\r\n            },\r\n            {\r\n              name: '维护时间',\r\n              type: 'bar',\r\n              stack: 'total',\r\n              label: {\r\n                show: true,\r\n                formatter: '{c} h'\r\n              },\r\n              emphasis: {\r\n                focus: 'series'\r\n              },\r\n              data: processedData.map(item => parseFloat(item.maintenanceHours.toFixed(2)))\r\n            },\r\n            {\r\n              name: '故障时间',\r\n              type: 'bar',\r\n              stack: 'total',\r\n              label: {\r\n                show: true,\r\n                formatter: '{c} h'\r\n              },\r\n              emphasis: {\r\n                focus: 'series'\r\n              },\r\n              data: processedData.map(item => parseFloat(item.errorHours.toFixed(2)))\r\n            }\r\n          ]\r\n        };\r\n        \r\n        this.charts.utilization.setOption(option);\r\n        \r\n        // 取消图表的点击事件\r\n        this.charts.utilization.off('click');\r\n      } catch (error) {\r\n        console.error('渲染充电站利用率图表失败:', error);\r\n        \r\n        // 错误情况下，显示错误信息\r\n        if (this.$refs.utilizationChart) {\r\n          if (this.charts.utilization) {\r\n            this.charts.utilization.dispose();\r\n          }\r\n          this.charts.utilization = echarts.init(this.$refs.utilizationChart);\r\n          this.charts.utilization.setOption({\r\n            title: {\r\n              text: '充电站利用率对比 (加载失败)',\r\n              textStyle: { color: '#ff0000' },\r\n              left: 'center'\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 机器人充电行为分析\r\n    async renderRobotChart(params) {\r\n      try {\r\n        const response = await energyEfficiencyApi.getRobotChargingBehavior(params);\r\n        \r\n        // 确保DOM元素存在\r\n        if (!this.$refs.robotChart) {\r\n          console.error('机器人充电行为图表DOM元素不存在');\r\n          return;\r\n        }\r\n        \r\n        // 检查返回的数据\r\n        if (!response.data || !response.data.robots || !Array.isArray(response.data.robots) || response.data.robots.length === 0) {\r\n          console.error('机器人充电行为数据异常:', response.data);\r\n          // 创建空图表以避免错误\r\n          if (this.charts.robot) {\r\n            this.charts.robot.dispose();\r\n          }\r\n          this.charts.robot = echarts.init(this.$refs.robotChart);\r\n          this.charts.robot.setOption({\r\n            title: {\r\n              text: '机器人充电行为分析 (暂无数据)',\r\n              left: 'center'\r\n            }\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 销毁旧的图表实例\r\n        if (this.charts.robot) {\r\n          try {\r\n            this.charts.robot.dispose();\r\n            this.charts.robot = null;\r\n          } catch (error) {\r\n            console.error('销毁旧机器人充电行为图表失败:', error);\r\n          }\r\n        }\r\n        \r\n        this.charts.robot = echarts.init(this.$refs.robotChart);\r\n      \r\n        const option = {\r\n          title: {\r\n            text: '机器人充电行为分析'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: ['充电次数', '平均充电时长', '平均等待时间'],\r\n            selectedMode: false\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n          },\r\n          xAxis: [\r\n            {\r\n              type: 'category',\r\n              data: response.data.robots.map(robot => robot.name),\r\n              axisPointer: {\r\n                type: 'shadow'\r\n              }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: 'value',\r\n              name: '次数',\r\n              min: 0,\r\n              axisLabel: {\r\n                formatter: '{value}'\r\n              }\r\n            },\r\n            {\r\n              type: 'value',\r\n              name: '时间 (分钟)',\r\n              min: 0,\r\n              axisLabel: {\r\n                formatter: '{value} min'\r\n              }\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: '充电次数',\r\n              type: 'bar',\r\n              data: response.data.robots.map(robot => robot.chargingCount)\r\n            },\r\n            {\r\n              name: '平均充电时长',\r\n              type: 'line',\r\n              yAxisIndex: 1,\r\n              data: response.data.robots.map(robot => robot.avgChargingDuration)\r\n            },\r\n            {\r\n              name: '平均等待时间',\r\n              type: 'line',\r\n              yAxisIndex: 1,\r\n              data: response.data.robots.map(robot => robot.avgWaitingTime)\r\n            }\r\n          ]\r\n        };\r\n        \r\n        this.charts.robot.setOption(option);\r\n        \r\n        // 取消图表的点击事件\r\n        this.charts.robot.off('click');\r\n      } catch (error) {\r\n        console.error('渲染机器人充电行为图表失败:', error);\r\n        \r\n        // 错误情况下，显示错误信息\r\n        if (this.$refs.robotChart) {\r\n          if (this.charts.robot) {\r\n            this.charts.robot.dispose();\r\n          }\r\n          this.charts.robot = echarts.init(this.$refs.robotChart);\r\n          this.charts.robot.setOption({\r\n            title: {\r\n              text: '机器人充电行为分析 (加载失败)',\r\n              textStyle: { color: '#ff0000' },\r\n              left: 'center'\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 充电高峰期分析\r\n    async renderPeakChart(params) {\r\n      try {\r\n        const response = await energyEfficiencyApi.getChargingPeakAnalysis(params);\r\n        \r\n        // 确保DOM元素存在\r\n        if (!this.$refs.peakChart) {\r\n          console.error('充电高峰期图表DOM元素不存在');\r\n          return;\r\n        }\r\n        \r\n        // 检查返回的数据\r\n        if (!response.data || !response.data.timeSlots || !response.data.requestCounts || !response.data.avgWaitingTimes) {\r\n          console.error('充电高峰期数据异常:', response.data);\r\n          // 创建空图表以避免错误\r\n          if (this.charts.peak) {\r\n            this.charts.peak.dispose();\r\n          }\r\n          this.charts.peak = echarts.init(this.$refs.peakChart);\r\n          this.charts.peak.setOption({\r\n            title: {\r\n              text: '充电高峰期分析 (暂无数据)',\r\n              left: 'center'\r\n            }\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 销毁旧的图表实例\r\n        if (this.charts.peak) {\r\n          try {\r\n            this.charts.peak.dispose();\r\n            this.charts.peak = null;\r\n          } catch (error) {\r\n            console.error('销毁旧充电高峰期图表失败:', error);\r\n          }\r\n        }\r\n        \r\n        this.charts.peak = echarts.init(this.$refs.peakChart);\r\n      \r\n        const option = {\r\n          title: {\r\n            text: '充电高峰期分析'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          },\r\n          legend: {\r\n            data: ['充电请求数', '平均等待时间'],\r\n            selectedMode: false\r\n          },\r\n          grid: {\r\n            left: '3%',\r\n            right: '4%',\r\n            bottom: '3%',\r\n            containLabel: true\r\n          },\r\n          xAxis: [\r\n            {\r\n              type: 'category',\r\n              data: response.data.timeSlots,\r\n              axisLabel: {\r\n                formatter: '{value}时'\r\n              }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: 'value',\r\n              name: '请求数',\r\n              min: 0,\r\n              axisLabel: {\r\n                formatter: '{value}'\r\n              }\r\n            },\r\n            {\r\n              type: 'value',\r\n              name: '等待时间 (分钟)',\r\n              min: 0,\r\n              axisLabel: {\r\n                formatter: '{value} min'\r\n              }\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: '充电请求数',\r\n              type: 'bar',\r\n              data: response.data.requestCounts\r\n            },\r\n            {\r\n              name: '平均等待时间',\r\n              type: 'line',\r\n              yAxisIndex: 1,\r\n              data: response.data.avgWaitingTimes\r\n            }\r\n          ]\r\n        };\r\n        \r\n        this.charts.peak.setOption(option);\r\n        \r\n        // 取消图表的点击事件\r\n        this.charts.peak.off('click');\r\n      } catch (error) {\r\n        console.error('渲染充电高峰期图表失败:', error);\r\n        \r\n        // 错误情况下，显示错误信息\r\n        if (this.$refs.peakChart) {\r\n          if (this.charts.peak) {\r\n            this.charts.peak.dispose();\r\n          }\r\n          this.charts.peak = echarts.init(this.$refs.peakChart);\r\n          this.charts.peak.setOption({\r\n            title: {\r\n              text: '充电高峰期分析 (加载失败)',\r\n              textStyle: { color: '#ff0000' },\r\n              left: 'center'\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 获取筛选参数\r\n    getFilterParams() {\r\n      return {\r\n        startDate: this.dateRange[0] ? this.dateRange[0].toISOString() : null,\r\n        endDate: this.dateRange[1] ? this.dateRange[1].toISOString() : null,\r\n        stationIds: this.selectedStations.length > 0 ? this.selectedStations : null,\r\n        robotIds: this.selectedRobots.length > 0 ? this.selectedRobots : null\r\n      };\r\n    },\r\n    \r\n    // 处理图表切换\r\n    handleChartChange(chartType) {\r\n      const titles = {\r\n        efficiency: '充电效率趋势分析',\r\n        consumption: '能耗分布热力图',\r\n        utilization: '充电站利用率对比',\r\n        robot: '机器人充电行为分析',\r\n        peak: '充电高峰期分析'\r\n      };\r\n      \r\n      this.currentChartTitle = titles[chartType];\r\n      \r\n      // 在切换图表前先清理旧图表实例，避免内存泄漏和DOM冲突\r\n      if (this.charts[this.currentChart]) {\r\n        try {\r\n          // 移除所有事件监听器\r\n          this.charts[this.currentChart].off();\r\n          this.charts[this.currentChart].dispose();\r\n          this.charts[this.currentChart] = null;\r\n        } catch (error) {\r\n          console.error(`清理图表失败: ${error}`);\r\n        }\r\n      }\r\n      \r\n      // 使用nextTick确保DOM已更新\r\n      this.$nextTick(() => {\r\n        this.fetchChartData();\r\n      });\r\n    },\r\n    \r\n    // 增强版创建图表函数，包含额外的安全检查\r\n    async safeInitChart(refName, chartKey) {\r\n      // 检查DOM元素是否存在且在文档中\r\n      if (!this.$refs[refName] || !document.body.contains(this.$refs[refName])) {\r\n        console.error(`${refName} DOM元素不存在或已从文档中移除`);\r\n        return null;\r\n      }\r\n      \r\n      // 销毁旧的图表实例\r\n      if (this.charts[chartKey]) {\r\n        try {\r\n          this.charts[chartKey].dispose();\r\n          this.charts[chartKey] = null;\r\n        } catch (error) {\r\n          console.error(`销毁旧 ${chartKey} 图表失败:`, error);\r\n        }\r\n      }\r\n      \r\n      try {\r\n        // 等待DOM更新\r\n        await this.$nextTick();\r\n        \r\n        // 再次检查DOM是否仍然存在\r\n        if (!this.$refs[refName] || !document.body.contains(this.$refs[refName])) {\r\n          console.error(`${refName} DOM元素在DOM更新后已不存在，无法创建图表`);\r\n          return null;\r\n        }\r\n        \r\n        // 创建图表实例\r\n        this.charts[chartKey] = echarts.init(this.$refs[refName]);\r\n        return this.charts[chartKey];\r\n      } catch (error) {\r\n        console.error(`创建 ${chartKey} 图表失败:`, error);\r\n        return null;\r\n      }\r\n    },\r\n    \r\n    // 获取KPI描述\r\n    getKpiDescription(index) {\r\n      // 根据索引返回相应的描述\r\n      const descriptions = [\r\n        '平均充电效率表示充电过程中能源转换的效率，计算公式为：实际充电量/(充电时长*充电站功率)*100%。效率越高，表示充电系统性能越好，能源利用率越高。',\r\n        '总能耗表示所有充电站在统计周期内消耗的总电量，单位为千瓦时(kWh)或兆瓦时(MWh)。通过分析能耗可以评估系统整体电力消耗情况和运行成本。',\r\n        '充电器利用率衡量充电设备的使用效率，计算公式为：充电时间总和/(充电站数量*统计周期小时数)*100%。较高的利用率表示设备投资回报更好。',\r\n        '平均等待时间指机器人从发出充电请求到开始充电的平均等待时长。等待时间短表示充电调度更高效，能提高整体工作效率和降低生产延误。',\r\n        '充电成功率衡量充电过程的可靠性，计算公式为：成功完成的充电订单数/总订单数*100%。高成功率表示系统稳定性好，减少了因充电失败导致的工作中断。',\r\n        '总充电次数统计周期内完成的充电订单总数，反映系统负载和使用频率。可用于评估充电需求变化趋势，为扩容或优化提供依据。'\r\n      ];\r\n      return descriptions[index];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.energy-efficiency-analysis {\r\n  padding: 20px;\r\n}\r\n\r\n.kpi-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.kpi-card {\r\n  text-align: center;\r\n  padding: 15px 10px;\r\n  height: 100%;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.kpi-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.kpi-title {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 8px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.kpi-value {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: baseline;\r\n  margin-bottom: 8px;\r\n  line-height: 1.2;\r\n}\r\n\r\n.value-number {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #303133;\r\n}\r\n\r\n.value-unit {\r\n  font-size: 14px;\r\n  color: #909399;\r\n  margin-left: 2px;\r\n}\r\n\r\n.kpi-change {\r\n  font-size: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2px 5px;\r\n  border-radius: 10px;\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  max-width: 80%;\r\n  margin: 0 auto;\r\n}\r\n\r\n.kpi-change.up {\r\n  color: #67c23a;\r\n}\r\n\r\n.kpi-change.down {\r\n  color: #f56c6c;\r\n}\r\n\r\n.kpi-change .el-icon {\r\n  margin-right: 2px;\r\n  font-size: 14px;\r\n}\r\n\r\n.chart-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-content {\r\n  position: relative;\r\n}\r\n\r\n.chart-item {\r\n  position: relative;\r\n}\r\n\r\n.chart {\r\n  height: 400px;\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}