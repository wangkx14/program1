{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createElementBlock as _createElementBlock, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"chart-container\"\n};\nvar _hoisted_2 = {\n  ref: \"chartRef\",\n  \"class\": \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_loading = _resolveDirective(\"loading\");\n  return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)])), [[_directive_loading, $data.loading]]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","loading"],"sources":["C:\\Users\\jiaronghao\\Desktop\\Documents\\本科论文编写\\5、货仓机器人激光充电和能效管理云平台的设计与实现\\Y0527-final\\frontend\\src\\components\\ChargingEfficiencyChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\" v-loading=\"loading\">\r\n    <div ref=\"chartRef\" class=\"chart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport dashboardApi from '@/api/dashboard';\r\n\r\nexport default {\r\n  name: 'ChargingEfficiencyChart',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      chart: null,\r\n      efficiencyData: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n    this.fetchData();\r\n    \r\n    // 设置自动刷新（每60秒刷新一次）\r\n    this.refreshInterval = setInterval(() => {\r\n      this.fetchData();\r\n    }, 60000);\r\n  },\r\n  beforeUnmount() {\r\n    // 组件销毁前清除定时器和图表实例\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n    if (this.chart) {\r\n      this.chart.dispose();\r\n      this.chart = null;\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      // 确保DOM元素已渲染\r\n      if (!this.$refs.chartRef) return;\r\n      \r\n      // 初始化图表\r\n      this.chart = echarts.init(this.$refs.chartRef);\r\n      \r\n      // 设置基础配置\r\n      const option = {\r\n        title: {\r\n          text: '充电效率趋势',\r\n          left: 'center',\r\n          textStyle: {\r\n            fontSize: 14\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: '{b}: {c}%'\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisLabel: {\r\n            interval: 0,\r\n            rotate: 30\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '充电效率 (%)',\r\n          min: 50,\r\n          max: 100\r\n        },\r\n        series: [\r\n          {\r\n            type: 'bar',\r\n            data: [],\r\n            itemStyle: {\r\n              color: function(params) {\r\n                // 根据效率值设置不同颜色\r\n                const value = params.value;\r\n                if (value >= 90) return '#67C23A'; // 高效率 - 绿色\r\n                if (value >= 80) return '#E6A23C'; // 中等效率 - 黄色\r\n                return '#F56C6C'; // 低效率 - 红色\r\n              }\r\n            },\r\n            label: {\r\n              show: true,\r\n              position: 'top',\r\n              formatter: '{c}%'\r\n            }\r\n          }\r\n        ]\r\n      };\r\n      \r\n      this.chart.setOption(option);\r\n      \r\n      // 添加窗口大小变化时自动调整图表大小的监听器\r\n      window.addEventListener('resize', this.resizeChart);\r\n    },\r\n    resizeChart() {\r\n      if (this.chart) {\r\n        this.chart.resize();\r\n      }\r\n    },\r\n    async fetchData() {\r\n      this.loading = true;\r\n      try {\r\n        const response = await dashboardApi.getChargingEfficiency();\r\n        this.efficiencyData = response.data;\r\n        this.updateChart();\r\n      } catch (error) {\r\n        console.error('获取充电效率数据失败:', error);\r\n        this.$message.error('获取充电效率数据失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    updateChart() {\r\n      if (!this.chart || !this.efficiencyData.length) return;\r\n      \r\n      // 提取充电站名称和效率数据\r\n      const stationNames = this.efficiencyData.map(item => item.name);\r\n      const efficiencyValues = this.efficiencyData.map(item => parseFloat(item.efficiency).toFixed(2));\r\n      \r\n      // 更新图表数据\r\n      this.chart.setOption({\r\n        xAxis: {\r\n          data: stationNames\r\n        },\r\n        series: [\r\n          {\r\n            data: efficiencyValues\r\n          }\r\n        ]\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 300px;\r\n}\r\n\r\n.chart {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 300px;\r\n}\r\n</style> "],"mappings":";;EACO,SAAM;AAAiB;;EACrBA,GAAG,EAAC,UAAU;EAAC,SAAM;;;;wCAD5BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAwC,OAAxCC,UAAwC,8B,0BADFC,KAAA,CAAAC,OAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}