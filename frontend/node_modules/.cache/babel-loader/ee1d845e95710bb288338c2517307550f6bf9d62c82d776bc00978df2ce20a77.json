{"ast":null,"code":"import _regeneratorRuntime from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/software_data/Project/Y0527/CODE_BAK/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport * as echarts from 'echarts';\nimport dashboardApi from '@/api/dashboard';\nexport default {\n  name: 'ChargingEfficiencyTrend',\n  data: function data() {\n    return {\n      chart: null,\n      timeRange: '7',\n      // 默认显示最近7天\n      loading: false,\n      chartData: {\n        timeline: [],\n        stations: []\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initChart();\n    this.fetchChargingEfficiencyData();\n\n    // 监听窗口大小变化，调整图表大小\n    window.addEventListener('resize', this.resizeChart);\n  },\n  beforeUnmount: function beforeUnmount() {\n    // 移除事件监听\n    window.removeEventListener('resize', this.resizeChart);\n\n    // 销毁图表实例\n    if (this.chart) {\n      this.chart.dispose();\n      this.chart = null;\n    }\n  },\n  watch: {\n    timeRange: function timeRange() {\n      this.fetchChargingEfficiencyData();\n    }\n  },\n  methods: {\n    initChart: function initChart() {\n      // 初始化图表\n      var chartDom = this.$refs.chartContainer;\n      if (!chartDom) return;\n      this.chart = echarts.init(chartDom);\n\n      // 设置加载动画\n      this.chart.showLoading({\n        text: '数据加载中...',\n        color: '#409EFF',\n        textColor: '#000',\n        maskColor: 'rgba(255, 255, 255, 0.8)'\n      });\n    },\n    fetchChargingEfficiencyData: function fetchChargingEfficiencyData() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.chart) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _this.loading = true;\n              _this.chart.showLoading();\n              _context.prev = 4;\n              _context.next = 7;\n              return dashboardApi.getChargingEfficiencyTrend({\n                days: parseInt(_this.timeRange)\n              });\n            case 7:\n              response = _context.sent;\n              _this.chartData = response.data;\n              _this.renderChart();\n              _context.next = 16;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](4);\n              console.error('获取充电效率趋势数据失败:', _context.t0);\n              _this.$message.error('获取充电效率趋势数据失败');\n            case 16:\n              _context.prev = 16;\n              _this.loading = false;\n              _this.chart.hideLoading();\n              return _context.finish(16);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[4, 12, 16, 20]]);\n      }))();\n    },\n    renderChart: function renderChart() {\n      if (!this.chart || !this.chartData.timeline || !this.chartData.stations) return;\n      var option = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: this.chartData.stations.map(function (station) {\n            return station.name;\n          }),\n          top: '5%',\n          type: 'scroll',\n          orient: 'horizontal',\n          pageButtonPosition: 'end'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          top: '15%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: this.chartData.timeline,\n          axisLabel: {\n            formatter: function formatter(value) {\n              // 格式化日期显示\n              var date = new Date(value);\n              return \"\".concat(date.getMonth() + 1, \"/\").concat(date.getDate());\n            }\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '充电效率 (%)',\n          min: 70,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: this.chartData.stations.map(function (station) {\n          return {\n            name: station.name,\n            type: 'line',\n            smooth: true,\n            symbol: 'circle',\n            symbolSize: 6,\n            sampling: 'average',\n            data: station.efficiencyData,\n            markPoint: {\n              data: [{\n                type: 'max',\n                name: '最大值'\n              }, {\n                type: 'min',\n                name: '最小值'\n              }]\n            }\n          };\n        })\n      };\n      this.chart.setOption(option);\n    },\n    resizeChart: function resizeChart() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","dashboardApi","name","data","chart","timeRange","loading","chartData","timeline","stations","mounted","initChart","fetchChargingEfficiencyData","window","addEventListener","resizeChart","beforeUnmount","removeEventListener","dispose","watch","methods","chartDom","$refs","chartContainer","init","showLoading","text","color","textColor","maskColor","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","abrupt","getChargingEfficiencyTrend","days","parseInt","sent","renderChart","t0","console","error","$message","hideLoading","finish","stop","option","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","map","station","top","orient","pageButtonPosition","grid","left","right","bottom","containLabel","xAxis","boundaryGap","axisLabel","formatter","value","date","Date","concat","getMonth","getDate","yAxis","min","max","series","smooth","symbol","symbolSize","sampling","efficiencyData","markPoint","setOption","resize"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\components\\dashboard\\ChargingEfficiencyTrend.vue"],"sourcesContent":["<template>\r\n  <div class=\"charging-efficiency-trend\">\r\n    <el-card class=\"chart-card\" shadow=\"hover\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h3>充电效率趋势</h3>\r\n          <div class=\"header-actions\">\r\n            <el-select v-model=\"timeRange\" placeholder=\"选择时间范围\" size=\"small\">\r\n              <el-option label=\"最近7天\" value=\"7\"></el-option>\r\n              <el-option label=\"最近30天\" value=\"30\"></el-option>\r\n              <el-option label=\"最近90天\" value=\"90\"></el-option>\r\n            </el-select>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <div class=\"chart-container\" ref=\"chartContainer\"></div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport dashboardApi from '@/api/dashboard';\r\n\r\nexport default {\r\n  name: 'ChargingEfficiencyTrend',\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      timeRange: '7', // 默认显示最近7天\r\n      loading: false,\r\n      chartData: {\r\n        timeline: [],\r\n        stations: []\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n    this.fetchChargingEfficiencyData();\r\n    \r\n    // 监听窗口大小变化，调整图表大小\r\n    window.addEventListener('resize', this.resizeChart);\r\n  },\r\n  beforeUnmount() {\r\n    // 移除事件监听\r\n    window.removeEventListener('resize', this.resizeChart);\r\n    \r\n    // 销毁图表实例\r\n    if (this.chart) {\r\n      this.chart.dispose();\r\n      this.chart = null;\r\n    }\r\n  },\r\n  watch: {\r\n    timeRange() {\r\n      this.fetchChargingEfficiencyData();\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      // 初始化图表\r\n      const chartDom = this.$refs.chartContainer;\r\n      if (!chartDom) return;\r\n      \r\n      this.chart = echarts.init(chartDom);\r\n      \r\n      // 设置加载动画\r\n      this.chart.showLoading({\r\n        text: '数据加载中...',\r\n        color: '#409EFF',\r\n        textColor: '#000',\r\n        maskColor: 'rgba(255, 255, 255, 0.8)'\r\n      });\r\n    },\r\n    \r\n    async fetchChargingEfficiencyData() {\r\n      if (!this.chart) return;\r\n      \r\n      this.loading = true;\r\n      this.chart.showLoading();\r\n      \r\n      try {\r\n        // 调用API获取数据\r\n        const response = await dashboardApi.getChargingEfficiencyTrend({\r\n          days: parseInt(this.timeRange)\r\n        });\r\n        \r\n        this.chartData = response.data;\r\n        this.renderChart();\r\n      } catch (error) {\r\n        console.error('获取充电效率趋势数据失败:', error);\r\n        this.$message.error('获取充电效率趋势数据失败');\r\n      } finally {\r\n        this.loading = false;\r\n        this.chart.hideLoading();\r\n      }\r\n    },\r\n    \r\n    renderChart() {\r\n      if (!this.chart || !this.chartData.timeline || !this.chartData.stations) return;\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#6a7985'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: this.chartData.stations.map(station => station.name),\r\n          top: '5%',\r\n          type: 'scroll',\r\n          orient: 'horizontal',\r\n          pageButtonPosition: 'end'\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          top: '15%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: this.chartData.timeline,\r\n          axisLabel: {\r\n            formatter: function(value) {\r\n              // 格式化日期显示\r\n              const date = new Date(value);\r\n              return `${date.getMonth() + 1}/${date.getDate()}`;\r\n            }\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '充电效率 (%)',\r\n          min: 70,\r\n          max: 100,\r\n          axisLabel: {\r\n            formatter: '{value}%'\r\n          }\r\n        },\r\n        series: this.chartData.stations.map(station => ({\r\n          name: station.name,\r\n          type: 'line',\r\n          smooth: true,\r\n          symbol: 'circle',\r\n          symbolSize: 6,\r\n          sampling: 'average',\r\n          data: station.efficiencyData,\r\n          markPoint: {\r\n            data: [\r\n              { type: 'max', name: '最大值' },\r\n              { type: 'min', name: '最小值' }\r\n            ]\r\n          }\r\n        }))\r\n      };\r\n      \r\n      this.chart.setOption(option);\r\n    },\r\n    \r\n    resizeChart() {\r\n      if (this.chart) {\r\n        this.chart.resize();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.charging-efficiency-trend {\r\n  width: 100%;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.chart-container {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}