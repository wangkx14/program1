{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, resolveDirective as _resolveDirective, createBlock as _createBlock, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"orders-container\"\n};\nvar _hoisted_2 = {\n  key: 0,\n  \"class\": \"error-message\"\n};\nvar _hoisted_3 = {\n  key: 2,\n  \"class\": \"no-data\"\n};\nvar _hoisted_4 = {\n  key: 3,\n  \"class\": \"pagination-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_alert = _resolveComponent(\"el-alert\");\n  var _component_el_table_column = _resolveComponent(\"el-table-column\");\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n  var _component_el_table = _resolveComponent(\"el-table\");\n  var _component_el_empty = _resolveComponent(\"el-empty\");\n  var _component_el_pagination = _resolveComponent(\"el-pagination\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"充电订单管理\", -1 /* HOISTED */)), _createVNode(_component_el_card, {\n    \"class\": \"box-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [$data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_el_alert, {\n        title: \"加载数据出错\",\n        type: \"error\",\n        description: $data.error,\n        \"show-icon\": \"\"\n      }, null, 8 /* PROPS */, [\"description\"])])) : _createCommentVNode(\"v-if\", true), $data.orders && $data.orders.length > 0 ? _withDirectives((_openBlock(), _createBlock(_component_el_table, {\n        key: 1,\n        data: $options.paginatedOrders,\n        style: {\n          \"width\": \"100%\"\n        }\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"订单ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"robot_id\",\n            label: \"机器人ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"station_id\",\n            label: \"充电站ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"start_time\",\n            label: \"开始时间\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"end_time\",\n            label: \"结束时间\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"status\",\n            label: \"状态\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_tag, {\n                type: $options.getStatusType(scope.row.status)\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($options.getStatusText(scope.row.status)), 1 /* TEXT */)];\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            prop: \"amount\",\n            label: \"充电量\"\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"])), [[_directive_loading, $data.loading]]) : !$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_el_empty, {\n        description: \"暂无数据\"\n      })])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 分页控件 \"), $data.orders && $data.orders.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_el_pagination, {\n        \"current-page\": $data.currentPage,\n        \"onUpdate:currentPage\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.currentPage = $event;\n        }),\n        \"page-size\": $data.pageSize,\n        total: $options.totalItems,\n        layout: \"total, prev, pager, next, jumper\",\n        onCurrentChange: $options.handleCurrentChange\n      }, null, 8 /* PROPS */, [\"current-page\", \"page-size\", \"total\", \"onCurrentChange\"])])) : _createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","_component_el_card","_withCtx","$data","error","_hoisted_2","_component_el_alert","title","type","description","_createCommentVNode","orders","length","_createBlock","_component_el_table","data","$options","paginatedOrders","style","_component_el_table_column","prop","label","width","scope","_component_el_tag","getStatusType","row","status","_createTextVNode","_toDisplayString","getStatusText","_","loading","_hoisted_3","_component_el_empty","_hoisted_4","_component_el_pagination","currentPage","_cache","$event","pageSize","total","totalItems","layout","onCurrentChange","handleCurrentChange"],"sources":["D:\\software_data\\Project\\Y0527\\CODE_BAK\\frontend\\src\\views\\Orders.vue"],"sourcesContent":["<template>\r\n  <div class=\"orders-container\">\r\n    <h2>充电订单管理</h2>\r\n    <el-card class=\"box-card\">\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        <el-alert\r\n          title=\"加载数据出错\"\r\n          type=\"error\"\r\n          :description=\"error\"\r\n          show-icon\r\n        />\r\n      </div>\r\n      <el-table \r\n        v-if=\"orders && orders.length > 0\" \r\n        :data=\"paginatedOrders\" \r\n        style=\"width: 100%\" \r\n        v-loading=\"loading\">\r\n        <el-table-column prop=\"id\" label=\"订单ID\" width=\"180\" />\r\n        <el-table-column prop=\"robot_id\" label=\"机器人ID\" width=\"180\" />\r\n        <el-table-column prop=\"station_id\" label=\"充电站ID\" width=\"180\" />\r\n        <el-table-column prop=\"start_time\" label=\"开始时间\" />\r\n        <el-table-column prop=\"end_time\" label=\"结束时间\" />\r\n        <el-table-column prop=\"status\" label=\"状态\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ getStatusText(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"amount\" label=\"充电量\" />\r\n      </el-table>\r\n      <div v-else-if=\"!loading\" class=\"no-data\">\r\n        <el-empty description=\"暂无数据\" />\r\n      </div>\r\n      \r\n      <!-- 分页控件 -->\r\n      <div class=\"pagination-container\" v-if=\"orders && orders.length > 0\">\r\n        <el-pagination\r\n          v-model:current-page=\"currentPage\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"totalItems\"\r\n          layout=\"total, prev, pager, next, jumper\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { orderApi } from '@/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'Orders',\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      loading: false,\r\n      error: null,\r\n      // 分页相关\r\n      currentPage: 1,\r\n      pageSize: 10\r\n    }\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.orders.length\r\n    },\r\n    paginatedOrders() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize\r\n      const endIndex = startIndex + this.pageSize\r\n      return this.orders.slice(startIndex, endIndex)\r\n    }\r\n  },\r\n  created() {\r\n    console.log('Orders组件已创建，准备获取数据')\r\n    \r\n    // 添加这个延迟调用以避免可能的ResizeObserver问题\r\n    setTimeout(() => {\r\n      this.fetchOrders()\r\n    }, 0)\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        this.loading = true\r\n        this.error = null\r\n        console.log('开始获取订单数据')\r\n        \r\n        try {\r\n          const response = await orderApi.getAll()\r\n          // 打印原始响应\r\n          console.log('获取到订单数据(原始):', response)\r\n          console.log('获取到订单数据:', response.data)\r\n          console.log('订单数据类型:', typeof response.data, Array.isArray(response.data))\r\n          \r\n          // 确保数据是数组\r\n          if (Array.isArray(response.data)) {\r\n            // 检查每个订单对象的字段\r\n            const validOrders = response.data.filter(order => {\r\n              const isValid = order && \r\n                            typeof order === 'object' && \r\n                            'id' in order && \r\n                            'robot_id' in order && \r\n                            'station_id' in order && \r\n                            'start_time' in order && \r\n                            'status' in order;\r\n              \r\n              // 处理可能的NaN或undefined值\r\n              if (isValid) {\r\n                // 确保amount字段存在且为数字\r\n                if (!('amount' in order) || order.amount === null || isNaN(order.amount)) {\r\n                  order.amount = '-';\r\n                }\r\n                \r\n                // 确保end_time字段存在\r\n                if (!('end_time' in order) || order.end_time === null) {\r\n                  order.end_time = '-';\r\n                }\r\n              } else {\r\n                console.warn('过滤掉无效的订单数据:', order);\r\n              }\r\n              return isValid;\r\n            });\r\n            \r\n            console.log('有效的订单数据:', validOrders);\r\n            this.orders = validOrders;\r\n            // 重置为第一页\r\n            this.currentPage = 1;\r\n            console.log('成功设置订单数据，数量:', this.orders.length)\r\n          } else {\r\n            console.error('API返回的订单数据不是数组:', response.data)\r\n            this.orders = [] // 设置为空数组\r\n            this.error = '订单数据格式错误，请联系管理员'\r\n            ElMessage.error('订单数据格式错误')\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用出错:', apiError)\r\n          this.orders = [] // 确保错误时也设置为空数组\r\n          this.error = `API调用出错: ${apiError.message || '未知错误'}`\r\n          ElMessage.error('获取订单数据失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取订单列表失败:', error)\r\n        this.orders = [] // 确保错误时也设置为空数组\r\n        this.error = `获取数据失败: ${error.message || '未知错误'}`\r\n        ElMessage.error('获取订单列表失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 分页相关方法\r\n    handleCurrentChange(page) {\r\n      this.currentPage = page\r\n      console.log(`当前页: ${this.currentPage}`)\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        'charging': 'primary',\r\n        'completed': 'success',\r\n        'failed': 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getStatusText(status) {\r\n      const texts = {\r\n        'charging': '充电中',\r\n        'completed': '已完成',\r\n        'failed': '失败'\r\n      }\r\n      return texts[status] || status\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.orders-container {\r\n  padding: 20px;\r\n}\r\n.error-message {\r\n  margin-bottom: 20px;\r\n}\r\n.no-data {\r\n  padding: 20px 0;\r\n}\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}