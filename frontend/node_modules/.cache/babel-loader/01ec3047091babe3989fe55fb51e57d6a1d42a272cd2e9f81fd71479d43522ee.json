{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createBlock as _createBlock, withDirectives as _withDirectives, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"robots-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_table_column = _resolveComponent(\"el-table-column\");\n  var _component_el_progress = _resolveComponent(\"el-progress\");\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n  var _component_el_table = _resolveComponent(\"el-table\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"机器人管理\", -1 /* HOISTED */)), _createVNode(_component_el_card, {\n    \"class\": \"box-card\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_withDirectives((_openBlock(), _createBlock(_component_el_table, {\n        data: $data.robots,\n        style: {\n          \"width\": \"100%\"\n        }\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"机器人ID\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"名称\",\n            width: \"180\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"battery_level\",\n            label: \"电量\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_progress, {\n                percentage: scope.row.battery_level\n              }, null, 8 /* PROPS */, [\"percentage\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            prop: \"status\",\n            label: \"状态\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_tag, {\n                type: $options.getStatusType(scope.row.status)\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString($options.getStatusText(scope.row.status)), 1 /* TEXT */)];\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            prop: \"last_charging\",\n            label: \"上次充电时间\"\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"])), [[_directive_loading, $data.loading]])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","_component_el_card","_withCtx","_createBlock","_component_el_table","data","$data","robots","style","_component_el_table_column","prop","label","width","scope","_component_el_progress","percentage","row","battery_level","_","_component_el_tag","type","$options","getStatusType","status","_createTextVNode","_toDisplayString","getStatusText","loading"],"sources":["D:\\software_data\\Project\\Y0527\\CODE\\frontend\\src\\views\\Robots.vue"],"sourcesContent":["<template>\r\n  <div class=\"robots-container\">\r\n    <h2>机器人管理</h2>\r\n    <el-card class=\"box-card\">\r\n      <el-table :data=\"robots\" style=\"width: 100%\" v-loading=\"loading\">\r\n        <el-table-column prop=\"id\" label=\"机器人ID\" width=\"180\" />\r\n        <el-table-column prop=\"name\" label=\"名称\" width=\"180\" />\r\n        <el-table-column prop=\"battery_level\" label=\"电量\">\r\n          <template #default=\"scope\">\r\n            <el-progress :percentage=\"scope.row.battery_level\" />\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"status\" label=\"状态\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ getStatusText(scope.row.status) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"last_charging\" label=\"上次充电时间\" />\r\n      </el-table>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { robotApi } from '@/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'Robots',\r\n  data() {\r\n    return {\r\n      robots: [],\r\n      loading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchRobots()\r\n  },\r\n  methods: {\r\n    async fetchRobots() {\r\n      try {\r\n        this.loading = true\r\n        console.log('开始获取机器人数据')\r\n        \r\n        try {\r\n          const response = await robotApi.getAll()\r\n          console.log('获取到机器人数据:', response.data)\r\n          console.log('机器人数据类型:', typeof response.data, Array.isArray(response.data))\r\n          \r\n          // 确保数据是数组\r\n          if (Array.isArray(response.data)) {\r\n            this.robots = response.data\r\n            console.log('成功设置机器人数据，数量:', this.robots.length)\r\n          } else {\r\n            console.error('API返回的机器人数据不是数组:', response.data)\r\n            this.robots = [] // 设置为空数组\r\n            ElMessage.error('机器人数据格式错误')\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API调用出错:', apiError)\r\n          this.robots = [] // 确保错误时也设置为空数组\r\n          ElMessage.error('获取机器人数据失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取机器人列表失败:', error)\r\n        this.robots = [] // 确保错误时也设置为空数组\r\n        ElMessage.error('获取机器人列表失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        'idle': 'info',\r\n        'working': 'success',\r\n        'charging': 'primary',\r\n        'error': 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getStatusText(status) {\r\n      const texts = {\r\n        'idle': '空闲',\r\n        'working': '工作中',\r\n        'charging': '充电中',\r\n        'error': '故障'\r\n      }\r\n      return texts[status] || status\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.robots-container {\r\n  padding: 20px;\r\n}\r\n</style> "],"mappings":";;EACO,SAAM;AAAkB;;;;;;;;uBAA7BA,mBAAA,CAqBM,OArBNC,UAqBM,G,0BApBJC,mBAAA,CAAc,YAAV,OAAK,sBACTC,YAAA,CAkBUC,kBAAA;IAlBD,SAAM;EAAU;IAH7B,WAAAC,QAAA,CAIM;MAAA,OAgBW,C,+BAhBXC,YAAA,CAgBWC,mBAAA;QAhBAC,IAAI,EAAEC,KAAA,CAAAC,MAAM;QAAEC,KAAmB,EAAnB;UAAA;QAAA;;QAJ/B,WAAAN,QAAA,CAKQ;UAAA,OAAuD,CAAvDF,YAAA,CAAuDS,0BAAA;YAAtCC,IAAI,EAAC,IAAI;YAACC,KAAK,EAAC,OAAO;YAACC,KAAK,EAAC;cAC/CZ,YAAA,CAAsDS,0BAAA;YAArCC,IAAI,EAAC,MAAM;YAACC,KAAK,EAAC,IAAI;YAACC,KAAK,EAAC;cAC9CZ,YAAA,CAIkBS,0BAAA;YAJDC,IAAI,EAAC,eAAe;YAACC,KAAK,EAAC;;YAC/B,WAAOT,QAAA,CAChB,UAAqDW,KAD9B;cAAA,QACvBb,YAAA,CAAqDc,sBAAA;gBAAvCC,UAAU,EAAEF,KAAK,CAACG,GAAG,CAACC;;;YAThDC,CAAA;cAYQlB,YAAA,CAMkBS,0BAAA;YANDC,IAAI,EAAC,QAAQ;YAACC,KAAK,EAAC;;YACxB,WAAOT,QAAA,CAChB,UAESW,KAHc;cAAA,QACvBb,YAAA,CAESmB,iBAAA;gBAFAC,IAAI,EAAEC,QAAA,CAAAC,aAAa,CAACT,KAAK,CAACG,GAAG,CAACO,MAAM;;gBAdzD,WAAArB,QAAA,CAec;kBAAA,OAAqC,CAfnDsB,gBAAA,CAAAC,gBAAA,CAeiBJ,QAAA,CAAAK,aAAa,CAACb,KAAK,CAACG,GAAG,CAACO,MAAM,kB;;gBAf/CL,CAAA;;;YAAAA,CAAA;cAmBQlB,YAAA,CAAuDS,0BAAA;YAAtCC,IAAI,EAAC,eAAe;YAACC,KAAK,EAAC;;;QAnBpDO,CAAA;0DAI8DZ,KAAA,CAAAqB,OAAO,E;;IAJrET,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}